
C:\Users\Jeremy\AppData\Local\Temp\arduino\sketches\3AEBFBCE4AD74F3DFBBD09BAE767DC91/ArduinoMITM.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f912 	bl	60001654 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8be 	bl	60001664 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fae0 	bl	60001ae0 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fc71 	bl	60001e18 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f8ee 	bl	6000175c <configure_external_ram>
	analog_init();
60001580:	f000 fc12 	bl	60001da8 <analog_init>
	pwm_init();
60001584:	f000 fc58 	bl	60001e38 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fad8 	bl	60001b3c <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f864 	bl	60001658 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fb69 	bl	60001c6c <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f85d 	bl	60001660 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f859 	bl	6000165c <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fc39 	bl	60001e20 <____libc_init_array_veneer>
	main();
600015ae:	f000 fc3f 	bl	60001e30 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00005a10 	.word	0x00005a10
600015c0:	60001f5c 	.word	0x60001f5c
600015c4:	00000000 	.word	0x00000000
600015c8:	20000ec0 	.word	0x20000ec0
600015cc:	60007970 	.word	0x60007970
600015d0:	20000000 	.word	0x20000000
600015d4:	200060a0 	.word	0x200060a0
600015d8:	20000ec0 	.word	0x20000ec0
600015dc:	20000c00 	.word	0x20000c00
600015e0:	00003ec9 	.word	0x00003ec9
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	0000528d 	.word	0x0000528d
600015f4:	20006030 	.word	0x20006030
600015f8:	00005291 	.word	0x00005291
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	20006034 	.word	0x20006034
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaaab 	.word	0xaaaaaaab
6000164c:	00200007 	.word	0x00200007
60001650:	20078000 	.word	0x20078000

60001654 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001654:	4770      	bx	lr
60001656:	bf00      	nop

60001658 <startup_default_middle_hook>:
60001658:	4770      	bx	lr
6000165a:	bf00      	nop

6000165c <startup_default_late_hook>:
6000165c:	4770      	bx	lr
6000165e:	bf00      	nop

60001660 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001660:	bf00      	nop
60001662:	4770      	bx	lr

60001664 <configure_cache>:
{
60001664:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000166a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000166c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000166e:	482b      	ldr	r0, [pc, #172]	; (6000171c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001670:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001674:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001678:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000167a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000167e:	4828      	ldr	r0, [pc, #160]	; (60001720 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001680:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001684:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001686:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000168a:	4826      	ldr	r0, [pc, #152]	; (60001724 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000168c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001690:	4a25      	ldr	r2, [pc, #148]	; (60001728 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001692:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001696:	4c25      	ldr	r4, [pc, #148]	; (6000172c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001698:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000169c:	4824      	ldr	r0, [pc, #144]	; (60001730 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000169e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016a6:	4c23      	ldr	r4, [pc, #140]	; (60001734 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016a8:	4823      	ldr	r0, [pc, #140]	; (60001738 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016aa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016b2:	4c22      	ldr	r4, [pc, #136]	; (6000173c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016b8:	4821      	ldr	r0, [pc, #132]	; (60001740 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016ba:	4a22      	ldr	r2, [pc, #136]	; (60001744 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016bc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016c4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016c8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016cc:	4c1e      	ldr	r4, [pc, #120]	; (60001748 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ce:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016d0:	481e      	ldr	r0, [pc, #120]	; (6000174c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016d2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016d6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016da:	4a1d      	ldr	r2, [pc, #116]	; (60001750 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016e0:	4c1c      	ldr	r4, [pc, #112]	; (60001754 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016e2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016e6:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016e8:	481b      	ldr	r0, [pc, #108]	; (60001758 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016ea:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016f2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600016f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016fa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600016fe:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001702:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001706:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000170a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000170e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001712:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001716:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000171a:	4770      	bx	lr
6000171c:	1000003f 	.word	0x1000003f
60001720:	03080025 	.word	0x03080025
60001724:	00100009 	.word	0x00100009
60001728:	200060a0 	.word	0x200060a0
6000172c:	00200013 	.word	0x00200013
60001730:	07020021 	.word	0x07020021
60001734:	20000014 	.word	0x20000014
60001738:	13080025 	.word	0x13080025
6000173c:	10000009 	.word	0x10000009
60001740:	20200016 	.word	0x20200016
60001744:	130b0027 	.word	0x130b0027
60001748:	40000017 	.word	0x40000017
6000174c:	60000018 	.word	0x60000018
60001750:	070b002f 	.word	0x070b002f
60001754:	70000019 	.word	0x70000019
60001758:	130b002f 	.word	0x130b002f

6000175c <configure_external_ram>:
{
6000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000175e:	4bb8      	ldr	r3, [pc, #736]	; (60001a40 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001760:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001762:	4eb8      	ldr	r6, [pc, #736]	; (60001a44 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001764:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001766:	4fb8      	ldr	r7, [pc, #736]	; (60001a48 <configure_external_ram+0x2ec>)
{
60001768:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000176a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000176e:	49b7      	ldr	r1, [pc, #732]	; (60001a4c <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001770:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001774:	4db6      	ldr	r5, [pc, #728]	; (60001a50 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001776:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000177a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000177e:	4cb5      	ldr	r4, [pc, #724]	; (60001a54 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001780:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001784:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001788:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000178c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001790:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001794:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000179a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000179c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000179e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017a0:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017ae:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b2:	4aa9      	ldr	r2, [pc, #676]	; (60001a58 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017b4:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017b8:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017bc:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017c0:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017c4:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017c8:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017ca:	4ba4      	ldr	r3, [pc, #656]	; (60001a5c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017cc:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017ce:	48a4      	ldr	r0, [pc, #656]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017d0:	49a4      	ldr	r1, [pc, #656]	; (60001a64 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017d2:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017d4:	4aa4      	ldr	r2, [pc, #656]	; (60001a68 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017d6:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600017d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600017dc:	f043 030c 	orr.w	r3, r3, #12
600017e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017e4:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017e8:	6803      	ldr	r3, [r0, #0]
600017ea:	f043 0302 	orr.w	r3, r3, #2
600017ee:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017f0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017f4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017fa:	4b9c      	ldr	r3, [pc, #624]	; (60001a6c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017fc:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017fe:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001800:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001802:	4c9b      	ldr	r4, [pc, #620]	; (60001a70 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001804:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001806:	4a9b      	ldr	r2, [pc, #620]	; (60001a74 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000180c:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000180e:	68c3      	ldr	r3, [r0, #12]
60001810:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001814:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001816:	6a03      	ldr	r3, [r0, #32]
60001818:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000181a:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181c:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181e:	6a03      	ldr	r3, [r0, #32]
60001820:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001822:	4a95      	ldr	r2, [pc, #596]	; (60001a78 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001824:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001826:	4c95      	ldr	r4, [pc, #596]	; (60001a7c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001828:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000182a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000182c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000182e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001830:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001838:	f043 0301 	orr.w	r3, r3, #1
6000183c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001840:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001844:	498e      	ldr	r1, [pc, #568]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000184a:	f043 0301 	orr.w	r3, r3, #1
6000184e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001852:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001856:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001858:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000185c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001860:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001862:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001864:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001866:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000186a:	6803      	ldr	r3, [r0, #0]
6000186c:	f023 0302 	bic.w	r3, r3, #2
60001870:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001872:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001874:	4b83      	ldr	r3, [pc, #524]	; (60001a84 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001876:	4984      	ldr	r1, [pc, #528]	; (60001a88 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001878:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000187a:	f843 2b04 	str.w	r2, [r3], #4
6000187e:	428b      	cmp	r3, r1
60001880:	d1fb      	bne.n	6000187a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001882:	4a77      	ldr	r2, [pc, #476]	; (60001a60 <configure_external_ram+0x304>)
60001884:	6813      	ldr	r3, [r2, #0]
60001886:	f043 0301 	orr.w	r3, r3, #1
6000188a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000188c:	6813      	ldr	r3, [r2, #0]
6000188e:	f013 0301 	ands.w	r3, r3, #1
60001892:	d1fb      	bne.n	6000188c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	487a      	ldr	r0, [pc, #488]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001896:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001898:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000189c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000189e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018a2:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018a4:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018a8:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018ac:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018b4:	4975      	ldr	r1, [pc, #468]	; (60001a8c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018b6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ba:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018be:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018c2:	4873      	ldr	r0, [pc, #460]	; (60001a90 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018c4:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018c8:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018cc:	4c71      	ldr	r4, [pc, #452]	; (60001a94 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018ce:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018d2:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600018d6:	4970      	ldr	r1, [pc, #448]	; (60001a98 <configure_external_ram+0x33c>)
600018d8:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018dc:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018de:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018e2:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018e6:	485e      	ldr	r0, [pc, #376]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6943      	ldr	r3, [r0, #20]
600018f6:	07da      	lsls	r2, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600018fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001902:	4957      	ldr	r1, [pc, #348]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001906:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000190a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001912:	694b      	ldr	r3, [r1, #20]
60001914:	07db      	lsls	r3, r3, #31
60001916:	d5fc      	bpl.n	60001912 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001918:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000191a:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000191c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001920:	4a4f      	ldr	r2, [pc, #316]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001922:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001924:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001928:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000192c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001930:	6953      	ldr	r3, [r2, #20]
60001932:	07df      	lsls	r7, r3, #31
60001934:	d5fc      	bpl.n	60001930 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001936:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001938:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193a:	4858      	ldr	r0, [pc, #352]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193c:	4948      	ldr	r1, [pc, #288]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001944:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	07de      	lsls	r6, r3, #31
60001950:	d5fc      	bpl.n	6000194c <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001952:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001956:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000195c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001960:	4293      	cmp	r3, r2
60001962:	d165      	bne.n	60001a30 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001964:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000196a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	483c      	ldr	r0, [pc, #240]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000196e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001972:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001976:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197a:	6943      	ldr	r3, [r0, #20]
6000197c:	07dd      	lsls	r5, r3, #31
6000197e:	d5fc      	bpl.n	6000197a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001980:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001982:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001986:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001988:	4a35      	ldr	r2, [pc, #212]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000198a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000198c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001990:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001994:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001998:	6953      	ldr	r3, [r2, #20]
6000199a:	07dc      	lsls	r4, r3, #31
6000199c:	d5fc      	bpl.n	60001998 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a8:	492d      	ldr	r1, [pc, #180]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019aa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ac:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b8:	694b      	ldr	r3, [r1, #20]
600019ba:	07d8      	lsls	r0, r3, #31
600019bc:	d5fc      	bpl.n	600019b8 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019be:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4a25      	ldr	r2, [pc, #148]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019d0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	6953      	ldr	r3, [r2, #20]
600019da:	07d9      	lsls	r1, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019de:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019e4:	482d      	ldr	r0, [pc, #180]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e6:	491e      	ldr	r1, [pc, #120]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e8:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ea:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019ee:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f6:	694b      	ldr	r3, [r1, #20]
600019f8:	07da      	lsls	r2, r3, #31
600019fa:	d5fc      	bpl.n	600019f6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600019fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a00:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a04:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a06:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a08:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a0a:	4293      	cmp	r3, r2
60001a0c:	d050      	beq.n	60001ab0 <configure_external_ram+0x354>
60001a0e:	2508      	movs	r5, #8
60001a10:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a14:	4922      	ldr	r1, [pc, #136]	; (60001aa0 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a16:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a18:	4b22      	ldr	r3, [pc, #136]	; (60001aa4 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a1a:	4a23      	ldr	r2, [pc, #140]	; (60001aa8 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a1c:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a1e:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a20:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a22:	2301      	movs	r3, #1
60001a24:	4821      	ldr	r0, [pc, #132]	; (60001aac <configure_external_ram+0x350>)
60001a26:	4422      	add	r2, r4
60001a28:	f000 fa0a 	bl	60001e40 <__sm_set_pool_veneer>
}
60001a2c:	b003      	add	sp, #12
60001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a30:	4b1e      	ldr	r3, [pc, #120]	; (60001aac <configure_external_ram+0x350>)
60001a32:	2200      	movs	r2, #0
60001a34:	e9c3 2200 	strd	r2, r2, [r3]
60001a38:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a3c:	b003      	add	sp, #12
60001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a40:	401f8000 	.word	0x401f8000
60001a44:	0001b0f9 	.word	0x0001b0f9
60001a48:	000110f9 	.word	0x000110f9
60001a4c:	401f8400 	.word	0x401f8400
60001a50:	000170f9 	.word	0x000170f9
60001a54:	400fc000 	.word	0x400fc000
60001a58:	1ffffcff 	.word	0x1ffffcff
60001a5c:	a0000300 	.word	0xa0000300
60001a60:	402a4000 	.word	0x402a4000
60001a64:	402a8000 	.word	0x402a8000
60001a68:	ffff0012 	.word	0xffff0012
60001a6c:	00f737ff 	.word	0x00f737ff
60001a70:	80000040 	.word	0x80000040
60001a74:	7cf0ff00 	.word	0x7cf0ff00
60001a78:	830f00ff 	.word	0x830f00ff
60001a7c:	00020063 	.word	0x00020063
60001a80:	5af05af0 	.word	0x5af05af0
60001a84:	402a4200 	.word	0x402a4200
60001a88:	402a4300 	.word	0x402a4300
60001a8c:	3018049f 	.word	0x3018049f
60001a90:	0a1806eb 	.word	0x0a1806eb
60001a94:	0a180638 	.word	0x0a180638
60001a98:	26013206 	.word	0x26013206
60001a9c:	00030004 	.word	0x00030004
60001aa0:	70000000 	.word	0x70000000
60001aa4:	70000000 	.word	0x70000000
60001aa8:	20006062 	.word	0x20006062
60001aac:	20005fb4 	.word	0x20005fb4
	FLEXSPI2_IPCR0 = addr;
60001ab0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ab8:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aba:	4808      	ldr	r0, [pc, #32]	; (60001adc <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ac0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	6943      	ldr	r3, [r0, #20]
60001aca:	07db      	lsls	r3, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ace:	2301      	movs	r3, #1
60001ad0:	2510      	movs	r5, #16
60001ad2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001ad6:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ad8:	e79c      	b.n	60001a14 <configure_external_ram+0x2b8>
60001ada:	bf00      	nop
60001adc:	402a4000 	.word	0x402a4000

60001ae0 <usb_pll_start>:
{
60001ae0:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ae2:	4a15      	ldr	r2, [pc, #84]	; (60001b38 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ae4:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001af2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001af6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001afa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001afc:	f013 0f02 	tst.w	r3, #2
60001b00:	d10e      	bne.n	60001b20 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b06:	d00f      	beq.n	60001b28 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b0c:	d00e      	beq.n	60001b2c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b0e:	2b00      	cmp	r3, #0
60001b10:	daf3      	bge.n	60001afa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b16:	d10b      	bne.n	60001b30 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b18:	065b      	lsls	r3, r3, #25
60001b1a:	d50b      	bpl.n	60001b34 <usb_pll_start+0x54>
}
60001b1c:	bcf0      	pop	{r4, r5, r6, r7}
60001b1e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b20:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b22:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b24:	6190      	str	r0, [r2, #24]
			continue;
60001b26:	e7e8      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b28:	6155      	str	r5, [r2, #20]
			continue;
60001b2a:	e7e6      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b2c:	6156      	str	r6, [r2, #20]
			continue;
60001b2e:	e7e4      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b30:	6191      	str	r1, [r2, #24]
			continue;
60001b32:	e7e2      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b34:	6157      	str	r7, [r2, #20]
			continue;
60001b36:	e7e0      	b.n	60001afa <usb_pll_start+0x1a>
60001b38:	400d8000 	.word	0x400d8000

60001b3c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b3c:	4a3f      	ldr	r2, [pc, #252]	; (60001c3c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b3e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b40:	493f      	ldr	r1, [pc, #252]	; (60001c40 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b42:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b4a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c44 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b52:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c48 <tempmon_init+0x10c>
{
60001b5a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b60:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b64:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b68:	4d38      	ldr	r5, [pc, #224]	; (60001c4c <tempmon_init+0x110>)
60001b6a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b6c:	4c38      	ldr	r4, [pc, #224]	; (60001c50 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b6e:	4839      	ldr	r0, [pc, #228]	; (60001c54 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b70:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b72:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b76:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b78:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b80:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b84:	ee07 1a10 	vmov	s14, r1
60001b88:	4b33      	ldr	r3, [pc, #204]	; (60001c58 <tempmon_init+0x11c>)
60001b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b8e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b94:	4931      	ldr	r1, [pc, #196]	; (60001c5c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b96:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b9a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ba6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001baa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bae:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bb6:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bba:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bbe:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bc2:	4827      	ldr	r0, [pc, #156]	; (60001c60 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc4:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bcc:	ee75 5a87 	vadd.f32	s11, s11, s14
60001bd0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd4:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bd8:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be4:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bec:	ee16 3a10 	vmov	r3, s12
60001bf0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bf8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001bfc:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfe:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c02:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c0a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c0e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c10:	4914      	ldr	r1, [pc, #80]	; (60001c64 <tempmon_init+0x128>)
60001c12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c1a:	f043 0302 	orr.w	r3, r3, #2
60001c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c22:	4b11      	ldr	r3, [pc, #68]	; (60001c68 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c24:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c28:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c30:	2201      	movs	r2, #1
}
60001c32:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c38:	4770      	bx	lr
60001c3a:	bf00      	nop
60001c3c:	400d8100 	.word	0x400d8100
60001c40:	401f4400 	.word	0x401f4400
60001c44:	42aa0000 	.word	0x42aa0000
60001c48:	42b40000 	.word	0x42b40000
60001c4c:	20006020 	.word	0x20006020
60001c50:	2000601c 	.word	0x2000601c
60001c54:	20006024 	.word	0x20006024
60001c58:	20006028 	.word	0x20006028
60001c5c:	0fff0000 	.word	0x0fff0000
60001c60:	e000e400 	.word	0xe000e400
60001c64:	20000c00 	.word	0x20000c00
60001c68:	00004049 	.word	0x00004049

60001c6c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c6c:	4b31      	ldr	r3, [pc, #196]	; (60001d34 <usb_init+0xc8>)
60001c6e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001c72:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001c78:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001c7c:	f000 f8d4 	bl	60001e28 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c80:	4a2d      	ldr	r2, [pc, #180]	; (60001d38 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001c82:	492e      	ldr	r1, [pc, #184]	; (60001d3c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c88:	482d      	ldr	r0, [pc, #180]	; (60001d40 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c8a:	f043 0303 	orr.w	r3, r3, #3
60001c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c92:	4b2c      	ldr	r3, [pc, #176]	; (60001d44 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c94:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c98:	6802      	ldr	r2, [r0, #0]
60001c9a:	421a      	tst	r2, r3
60001c9c:	d103      	bne.n	60001ca6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c9e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ca2:	079a      	lsls	r2, r3, #30
60001ca4:	d01b      	beq.n	60001cde <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ca6:	4a25      	ldr	r2, [pc, #148]	; (60001d3c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001cac:	4b24      	ldr	r3, [pc, #144]	; (60001d40 <usb_init+0xd4>)
60001cae:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cb4:	f043 0302 	orr.w	r3, r3, #2
60001cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cbc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cc0:	079b      	lsls	r3, r3, #30
60001cc2:	d4fb      	bmi.n	60001cbc <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ccc:	4b1c      	ldr	r3, [pc, #112]	; (60001d40 <usb_init+0xd4>)
60001cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cd2:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001cd6:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001cd8:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001cda:	f000 f899 	bl	60001e10 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001cde:	4a18      	ldr	r2, [pc, #96]	; (60001d40 <usb_init+0xd4>)
60001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ce4:	4c15      	ldr	r4, [pc, #84]	; (60001d3c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001ce6:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ce8:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cea:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cec:	4b16      	ldr	r3, [pc, #88]	; (60001d48 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001cee:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cf4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf8:	4618      	mov	r0, r3
60001cfa:	f000 f885 	bl	60001e08 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001cfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d02:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d04:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d08:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d0c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d12:	641a      	str	r2, [r3, #64]	; 0x40
60001d14:	4b0d      	ldr	r3, [pc, #52]	; (60001d4c <usb_init+0xe0>)
60001d16:	4a0e      	ldr	r2, [pc, #56]	; (60001d50 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d18:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d28:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d2a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d32:	bd10      	pop	{r4, pc}
60001d34:	400d8000 	.word	0x400d8000
60001d38:	400fc000 	.word	0x400fc000
60001d3c:	402e0000 	.word	0x402e0000
60001d40:	400d9000 	.word	0x400d9000
60001d44:	001e1c00 	.word	0x001e1c00
60001d48:	20000000 	.word	0x20000000
60001d4c:	20000c00 	.word	0x20000c00
60001d50:	00004231 	.word	0x00004231

60001d54 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001d54:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d56:	4b0e      	ldr	r3, [pc, #56]	; (60001d90 <_reboot_Teensyduino_+0x3c>)
60001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d5a:	079b      	lsls	r3, r3, #30
60001d5c:	d400      	bmi.n	60001d60 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d5e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d60:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d62:	4b0c      	ldr	r3, [pc, #48]	; (60001d94 <_reboot_Teensyduino_+0x40>)
60001d64:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d66:	4a0c      	ldr	r2, [pc, #48]	; (60001d98 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001d68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d70:	490a      	ldr	r1, [pc, #40]	; (60001d9c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d72:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d76:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d78:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001d7a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001d82:	4807      	ldr	r0, [pc, #28]	; (60001da0 <_reboot_Teensyduino_+0x4c>)
60001d84:	4a07      	ldr	r2, [pc, #28]	; (60001da4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d86:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d88:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d8a:	689b      	ldr	r3, [r3, #8]
60001d8c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d8e:	bf00      	nop
60001d90:	401f4400 	.word	0x401f4400
60001d94:	402e0000 	.word	0x402e0000
60001d98:	400ac000 	.word	0x400ac000
60001d9c:	00200003 	.word	0x00200003
60001da0:	20208000 	.word	0x20208000
60001da4:	eb120000 	.word	0xeb120000

60001da8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001da8:	4b10      	ldr	r3, [pc, #64]	; (60001dec <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001daa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dac:	4a10      	ldr	r2, [pc, #64]	; (60001df0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001db0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001db4:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001db6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001db8:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001dbe:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dc2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc4:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dc6:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001dc8:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001dca:	061b      	lsls	r3, r3, #24
60001dcc:	d4fc      	bmi.n	60001dc8 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dce:	4a09      	ldr	r2, [pc, #36]	; (60001df4 <analog_init+0x4c>)
60001dd0:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd4:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dd6:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd8:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001ddc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001de0:	d1fb      	bne.n	60001dda <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001de2:	4a05      	ldr	r2, [pc, #20]	; (60001df8 <analog_init+0x50>)
60001de4:	7013      	strb	r3, [r2, #0]
}
60001de6:	f85d 4b04 	ldr.w	r4, [sp], #4
60001dea:	4770      	bx	lr
60001dec:	400fc000 	.word	0x400fc000
60001df0:	400c4000 	.word	0x400c4000
60001df4:	400c8000 	.word	0x400c8000
60001df8:	20006061 	.word	0x20006061

60001dfc <_init>:
60001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001dfe:	bf00      	nop
60001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e02:	bc08      	pop	{r3}
60001e04:	469e      	mov	lr, r3
60001e06:	4770      	bx	lr

60001e08 <__memset_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <__memset_veneer+0x4>
60001e0c:	00005901 	.word	0x00005901

60001e10 <__delay_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <__delay_veneer+0x4>
60001e14:	00003bb5 	.word	0x00003bb5

60001e18 <__set_arm_clock_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <__set_arm_clock_veneer+0x4>
60001e1c:	000052b1 	.word	0x000052b1

60001e20 <____libc_init_array_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <____libc_init_array_veneer+0x4>
60001e24:	000059b1 	.word	0x000059b1

60001e28 <__usb_init_serialnumber_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__usb_init_serialnumber_veneer+0x4>
60001e2c:	000049a1 	.word	0x000049a1

60001e30 <__main_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__main_veneer+0x4>
60001e34:	00003d21 	.word	0x00003d21

60001e38 <__pwm_init_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__pwm_init_veneer+0x4>
60001e3c:	0000561d 	.word	0x0000561d

60001e40 <__sm_set_pool_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__sm_set_pool_veneer+0x4>
60001e44:	00005785 	.word	0x00005785

60001e48 <__frame_dummy_init_array_entry>:
60001e48:	00000045 00003a11                       E....:..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
                        return (void *)-1;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
                        errno = ENOMEM;
      24:	1a1b      	subs	r3, r3, r0
                }
                __brkval = prev + incr;
        }
        return prev;
}
      26:	0fd9      	lsrs	r1, r3, #31
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20000ec0 	.word	0x20000ec0
      3c:	20000ec0 	.word	0x20000ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20005fc8 	.word	0x20005fc8
      64:	60009800 	.word	0x60009800

00000068 <flexcan_isr_can1()>:
      68:	4b03      	ldr	r3, [pc, #12]	; (78 <flexcan_isr_can1()+0x10>)
      6a:	6818      	ldr	r0, [r3, #0]
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6c:	b110      	cbz	r0, 74 <flexcan_isr_can1()+0xc>
      6e:	6803      	ldr	r3, [r0, #0]
      70:	681b      	ldr	r3, [r3, #0]
		return ADC2_R0;
      72:	4718      	bx	r3
      74:	4770      	bx	lr
}
      76:	bf00      	nop
	if (pin > sizeof(pin_to_channel)) return 0;
      78:	20005e30 	.word	0x20005e30

0000007c <flexcan_isr_can2()>:
}
      7c:	4b03      	ldr	r3, [pc, #12]	; (8c <flexcan_isr_can2()+0x10>)
      7e:	6818      	ldr	r0, [r3, #0]
      80:	b110      	cbz	r0, 88 <flexcan_isr_can2()+0xc>
      82:	6803      	ldr	r3, [r0, #0]
      84:	681b      	ldr	r3, [r3, #0]
      86:	4718      	bx	r3
      88:	4770      	bx	lr
      8a:	bf00      	nop
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	20005e34 	.word	0x20005e34

00000090 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
      90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      94:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
      98:	b090      	sub	sp, #64	; 0x40
  Serial.print("  LEN: "); Serial.print(msg.len);
  Serial.print(" EXT: "); Serial.print(msg.flags.extended);
  Serial.print(" TS: "); Serial.print(msg.timestamp);
  Serial.print(" ID: "); Serial.print(msg.id, HEX);
  Serial.print(" Buffer: ");
  for ( uint8_t i = 0; i < msg.len; i++ ) {
      9a:	4c57      	ldr	r4, [pc, #348]	; (1f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x168>)
      9c:	4696      	mov	lr, r2
      9e:	4b57      	ldr	r3, [pc, #348]	; (1fc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x16c>)
      a0:	9400      	str	r4, [sp, #0]
    Serial.print(msg.buf[i], HEX); Serial.print(" ");
  } Serial.println();
      a2:	f8c0 16cc 	str.w	r1, [r0, #1740]	; 0x6cc
}
      a6:	6a1b      	ldr	r3, [r3, #32]
  } Serial.println();
      a8:	4855      	ldr	r0, [pc, #340]	; (200 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x170>)
      aa:	f3c3 2301 	ubfx	r3, r3, #8, #2
      ae:	6804      	ldr	r4, [r0, #0]
      b0:	3340      	adds	r3, #64	; 0x40
      b2:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
      b6:	446b      	add	r3, sp
      b8:	f813 6c40 	ldrb.w	r6, [r3, #-64]
      bc:	4b51      	ldr	r3, [pc, #324]	; (204 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x174>)
      be:	fb03 f606 	mul.w	r6, r3, r6
      c2:	6803      	ldr	r3, [r0, #0]
      c4:	fbb6 f2f1 	udiv	r2, r6, r1
      c8:	fbb6 f5f2 	udiv	r5, r6, r2
      cc:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
}
      d0:	1b4d      	subs	r5, r1, r5
	while (newdiv > 65535 && prescale < 7) {
      d2:	6003      	str	r3, [r0, #0]
      d4:	6803      	ldr	r3, [r0, #0]
      d6:	01df      	lsls	r7, r3, #7
      d8:	d5fc      	bpl.n	d4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x44>
      da:	2a05      	cmp	r2, #5
  uint32_t clockFreq = getClock() * 1000000;
#else
  uint32_t clockFreq = 16000000;
#endif

  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
      dc:	f04f 0c00 	mov.w	ip, #0
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;

  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();

  while (result > 5) {
      e0:	d92a      	bls.n	138 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0xa8>
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
      e2:	4660      	mov	r0, ip
      e4:	1c83      	adds	r3, r0, #2
    divisor++;
      e6:	3001      	adds	r0, #1
    result = clockFreq / baud / (divisor + 1);
      e8:	fbb2 f7f3 	udiv	r7, r2, r3
    if (result <= 25) {
      ec:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
      ee:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
      f2:	d8f7      	bhi.n	e4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x54>
      f4:	f04f 0801 	mov.w	r8, #1
      error = baud - (clockFreq / (result * (divisor + 1)));
      f8:	fbb6 f3f3 	udiv	r3, r6, r3
      fc:	1acb      	subs	r3, r1, r3
      fe:	2b00      	cmp	r3, #0
     100:	bfb8      	it	lt
     102:	425b      	neglt	r3, r3
      if (error < 0) error *= -1;
      if (error < bestError) {
     104:	42ab      	cmp	r3, r5
     106:	db0b      	blt.n	120 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x90>
        bestError = error;
        bestDivisor = divisor;
      }
      if ((error == bestError) && (result > 11) && (result < 19)) {
     108:	f1a7 030c 	sub.w	r3, r7, #12
     10c:	bf18      	it	ne
     10e:	f04f 0800 	movne.w	r8, #0
     112:	2b06      	cmp	r3, #6
     114:	d80a      	bhi.n	12c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x9c>
     116:	f1b8 0f00 	cmp.w	r8, #0
     11a:	d007      	beq.n	12c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x9c>
        bestError = error;
        bestDivisor = divisor;
     11c:	4684      	mov	ip, r0
     11e:	e7e1      	b.n	e4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x54>
     120:	461d      	mov	r5, r3
      if ((error == bestError) && (result > 11) && (result < 19)) {
     122:	f1a7 030c 	sub.w	r3, r7, #12
        bestDivisor = divisor;
     126:	4684      	mov	ip, r0
      if ((error == bestError) && (result > 11) && (result < 19)) {
     128:	2b06      	cmp	r3, #6
     12a:	d9f4      	bls.n	116 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x86>
  while (result > 5) {
     12c:	2f05      	cmp	r7, #5
     12e:	d8d9      	bhi.n	e4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x54>
      }
    }
  }

  divisor = bestDivisor;
  result = clockFreq / baud / (divisor + 1);
     130:	f10c 0301 	add.w	r3, ip, #1
     134:	fbb2 f2f3 	udiv	r2, r2, r3

  if ((result < 5) || (result > 25) || (bestError > 300)) {
     138:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     13c:	f1a2 0205 	sub.w	r2, r2, #5
     140:	dc4c      	bgt.n	1dc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x14c>
     142:	2a14      	cmp	r2, #20
     144:	d84a      	bhi.n	1dc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x14c>
    {4, 7, 6}, //21
    {5, 7, 6}, //22
    {6, 7, 6}, //23
    {6, 7, 7}, //24
    {7, 7, 7}, //25
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     146:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  uint8_t bitTimingTable[21][3] = {
     14a:	4f2f      	ldr	r7, [pc, #188]	; (208 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x178>)
     14c:	466e      	mov	r6, sp
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     14e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 200 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x170>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     152:	f102 0340 	add.w	r3, r2, #64	; 0x40
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     156:	f1be 0f02 	cmp.w	lr, #2
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     15a:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     15e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     160:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     162:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     164:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     166:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     168:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     16a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     16e:	c607      	stmia	r6!, {r0, r1, r2}
     170:	f826 3b02 	strh.w	r3, [r6], #2
     174:	ea4f 4313 	mov.w	r3, r3, lsr #16
     178:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     17a:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     17e:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     182:	ea4f 43c3 	mov.w	r3, r3, lsl #19
     186:	f815 1c40 	ldrb.w	r1, [r5, #-64]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     18a:	ea4f 4202 	mov.w	r2, r2, lsl #16
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     18e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     192:	f001 0107 	and.w	r1, r1, #7
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     196:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     19a:	ea43 0302 	orr.w	r3, r3, r2
     19e:	ea43 0301 	orr.w	r3, r3, r1
     1a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     1a6:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     1aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     1ae:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     1b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
     1b6:	bf14      	ite	ne
     1b8:	f023 0308 	bicne.w	r3, r3, #8
     1bc:	f043 0308 	orreq.w	r3, r3, #8
     1c0:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     1c4:	b93c      	cbnz	r4, 1d6 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x146>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     1c6:	4a0e      	ldr	r2, [pc, #56]	; (200 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x170>)
     1c8:	6813      	ldr	r3, [r2, #0]
     1ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     1ce:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     1d0:	6813      	ldr	r3, [r2, #0]
     1d2:	01db      	lsls	r3, r3, #7
     1d4:	d4fc      	bmi.n	1d0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x140>
}
     1d6:	b010      	add	sp, #64	; 0x40
     1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     1dc:	2c00      	cmp	r4, #0
     1de:	d1fa      	bne.n	1d6 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x146>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     1e0:	4a07      	ldr	r2, [pc, #28]	; (200 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x170>)
     1e2:	6813      	ldr	r3, [r2, #0]
     1e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     1e8:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     1ea:	6813      	ldr	r3, [r2, #0]
     1ec:	01d9      	lsls	r1, r3, #7
     1ee:	d4fc      	bmi.n	1ea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x15a>
}
     1f0:	b010      	add	sp, #64	; 0x40
     1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     1f6:	bf00      	nop
     1f8:	0050183c 	.word	0x0050183c
     1fc:	400fc000 	.word	0x400fc000
     200:	401d0000 	.word	0x401d0000
     204:	000f4240 	.word	0x000f4240
     208:	20000280 	.word	0x20000280

0000020c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  currentBitrate = baud;
     210:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     214:	b090      	sub	sp, #64	; 0x40
  const uint8_t clocksrc[4] = {60, 24, 80, 0};
     216:	4c57      	ldr	r4, [pc, #348]	; (374 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x168>)
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     218:	4696      	mov	lr, r2
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
     21a:	4b57      	ldr	r3, [pc, #348]	; (378 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x16c>)
  const uint8_t clocksrc[4] = {60, 24, 80, 0};
     21c:	9400      	str	r4, [sp, #0]
  currentBitrate = baud;
     21e:	f8c0 16cc 	str.w	r1, [r0, #1740]	; 0x6cc
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
     222:	6a1b      	ldr	r3, [r3, #32]
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     224:	4855      	ldr	r0, [pc, #340]	; (37c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x170>)
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
     226:	f3c3 2301 	ubfx	r3, r3, #8, #2
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     22a:	6804      	ldr	r4, [r0, #0]
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
     22c:	3340      	adds	r3, #64	; 0x40
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     22e:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
     232:	446b      	add	r3, sp
     234:	f813 6c40 	ldrb.w	r6, [r3, #-64]
  uint32_t clockFreq = getClock() * 1000000;
     238:	4b51      	ldr	r3, [pc, #324]	; (380 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x174>)
     23a:	fb03 f606 	mul.w	r6, r3, r6
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     23e:	6803      	ldr	r3, [r0, #0]
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     240:	fbb6 f2f1 	udiv	r2, r6, r1
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     244:	fbb6 f5f2 	udiv	r5, r6, r2
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     248:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     24c:	1b4d      	subs	r5, r1, r5
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     24e:	6003      	str	r3, [r0, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     250:	6803      	ldr	r3, [r0, #0]
     252:	01df      	lsls	r7, r3, #7
     254:	d5fc      	bpl.n	250 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x44>
  while (result > 5) {
     256:	2a05      	cmp	r2, #5
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     258:	f04f 0c00 	mov.w	ip, #0
  while (result > 5) {
     25c:	d92a      	bls.n	2b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0xa8>
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     25e:	4660      	mov	r0, ip
     260:	1c83      	adds	r3, r0, #2
    divisor++;
     262:	3001      	adds	r0, #1
    result = clockFreq / baud / (divisor + 1);
     264:	fbb2 f7f3 	udiv	r7, r2, r3
    if (result <= 25) {
     268:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
     26a:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
     26e:	d8f7      	bhi.n	260 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x54>
     270:	f04f 0801 	mov.w	r8, #1
      error = baud - (clockFreq / (result * (divisor + 1)));
     274:	fbb6 f3f3 	udiv	r3, r6, r3
     278:	1acb      	subs	r3, r1, r3
     27a:	2b00      	cmp	r3, #0
     27c:	bfb8      	it	lt
     27e:	425b      	neglt	r3, r3
      if (error < bestError) {
     280:	42ab      	cmp	r3, r5
     282:	db0b      	blt.n	29c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x90>
      if ((error == bestError) && (result > 11) && (result < 19)) {
     284:	f1a7 030c 	sub.w	r3, r7, #12
     288:	bf18      	it	ne
     28a:	f04f 0800 	movne.w	r8, #0
     28e:	2b06      	cmp	r3, #6
     290:	d80a      	bhi.n	2a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x9c>
     292:	f1b8 0f00 	cmp.w	r8, #0
     296:	d007      	beq.n	2a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x9c>
        bestDivisor = divisor;
     298:	4684      	mov	ip, r0
     29a:	e7e1      	b.n	260 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x54>
     29c:	461d      	mov	r5, r3
      if ((error == bestError) && (result > 11) && (result < 19)) {
     29e:	f1a7 030c 	sub.w	r3, r7, #12
        bestDivisor = divisor;
     2a2:	4684      	mov	ip, r0
      if ((error == bestError) && (result > 11) && (result < 19)) {
     2a4:	2b06      	cmp	r3, #6
     2a6:	d9f4      	bls.n	292 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x86>
  while (result > 5) {
     2a8:	2f05      	cmp	r7, #5
     2aa:	d8d9      	bhi.n	260 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x54>
  result = clockFreq / baud / (divisor + 1);
     2ac:	f10c 0301 	add.w	r3, ip, #1
     2b0:	fbb2 f2f3 	udiv	r2, r2, r3
  if ((result < 5) || (result > 25) || (bestError > 300)) {
     2b4:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     2b8:	f1a2 0205 	sub.w	r2, r2, #5
     2bc:	dc4c      	bgt.n	358 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x14c>
     2be:	2a14      	cmp	r2, #20
     2c0:	d84a      	bhi.n	358 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x14c>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     2c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  uint8_t bitTimingTable[21][3] = {
     2c6:	4f2f      	ldr	r7, [pc, #188]	; (384 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x178>)
     2c8:	466e      	mov	r6, sp
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     2ca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 37c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x170>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     2ce:	f102 0340 	add.w	r3, r2, #64	; 0x40
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     2d2:	f1be 0f02 	cmp.w	lr, #2
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     2d6:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     2da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     2dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     2de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     2e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     2e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     2e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     2e6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     2ea:	c607      	stmia	r6!, {r0, r1, r2}
     2ec:	f826 3b02 	strh.w	r3, [r6], #2
     2f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
     2f4:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     2f6:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     2fa:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     2fe:	ea4f 43c3 	mov.w	r3, r3, lsl #19
     302:	f815 1c40 	ldrb.w	r1, [r5, #-64]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     306:	ea4f 4202 	mov.w	r2, r2, lsl #16
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     30a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     30e:	f001 0107 	and.w	r1, r1, #7
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     312:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     316:	ea43 0302 	orr.w	r3, r3, r2
     31a:	ea43 0301 	orr.w	r3, r3, r1
     31e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     322:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     32a:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     32e:	f8d8 3004 	ldr.w	r3, [r8, #4]
     332:	bf14      	ite	ne
     334:	f023 0308 	bicne.w	r3, r3, #8
     338:	f043 0308 	orreq.w	r3, r3, #8
     33c:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     340:	b93c      	cbnz	r4, 352 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x146>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     342:	4a0e      	ldr	r2, [pc, #56]	; (37c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x170>)
     344:	6813      	ldr	r3, [r2, #0]
     346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     34a:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     34c:	6813      	ldr	r3, [r2, #0]
     34e:	01db      	lsls	r3, r3, #7
     350:	d4fc      	bmi.n	34c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x140>
}
     352:	b010      	add	sp, #64	; 0x40
     354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     358:	2c00      	cmp	r4, #0
     35a:	d1fa      	bne.n	352 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x146>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     35c:	4a07      	ldr	r2, [pc, #28]	; (37c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x170>)
     35e:	6813      	ldr	r3, [r2, #0]
     360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     364:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     366:	6813      	ldr	r3, [r2, #0]
     368:	01d9      	lsls	r1, r3, #7
     36a:	d4fc      	bmi.n	366 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x15a>
}
     36c:	b010      	add	sp, #64	; 0x40
     36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     372:	bf00      	nop
     374:	0050183c 	.word	0x0050183c
     378:	400fc000 	.word	0x400fc000
     37c:	401d4000 	.word	0x401d4000
     380:	000f4240 	.word	0x000f4240
     384:	20000280 	.word	0x20000280

00000388 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3); /* input 3 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4); /* input 4 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4, uint32_t id5); /* input 5 ID's to be filtered */
    bool setMBFilterRange(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2); /* filter a range of ids */
    int write(const CAN_message_t &msg); /* use any available mailbox for transmitting */
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     388:	2000      	movs	r0, #0
     38a:	4770      	bx	lr

0000038c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     38c:	2000      	movs	r0, #0
     38e:	4770      	bx	lr

00000390 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
#endif
    void enhanceFilter(FLEXCAN_MAILBOX mb_num);
    void distribute(bool state = 1) { distribution = state; }
    void enableDMA(bool state = 1);
    void disableDMA() { enableDMA(0); }
    uint8_t getFirstTxBoxSize(){ return 8; }
     390:	2008      	movs	r0, #8
     392:	4770      	bx	lr

00000394 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     394:	2000      	movs	r0, #0
     396:	4770      	bx	lr

00000398 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     398:	2000      	movs	r0, #0
     39a:	4770      	bx	lr

0000039c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
    uint8_t getFirstTxBoxSize(){ return 8; }
     39c:	2008      	movs	r0, #8
     39e:	4770      	bx	lr

000003a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     3a0:	4910      	ldr	r1, [pc, #64]	; (3e4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     3a2:	680b      	ldr	r3, [r1, #0]
     3a4:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     3a6:	680a      	ldr	r2, [r1, #0]
     3a8:	6b49      	ldr	r1, [r1, #52]	; 0x34
     3aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     3ae:	f3c1 6103 	ubfx	r1, r1, #24, #4
     3b2:	3201      	adds	r2, #1
     3b4:	3104      	adds	r1, #4
     3b6:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     3ba:	d310      	bcc.n	3de <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     3bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3c0:	f3c0 6003 	ubfx	r0, r0, #24, #4
     3c4:	3b05      	subs	r3, #5
     3c6:	3001      	adds	r0, #1
     3c8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     3cc:	b2db      	uxtb	r3, r3
     3ce:	4a05      	ldr	r2, [pc, #20]	; (3e4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     3d0:	6810      	ldr	r0, [r2, #0]
     3d2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     3d6:	3001      	adds	r0, #1
     3d8:	1ac0      	subs	r0, r0, r3
}
     3da:	b2c0      	uxtb	r0, r0
     3dc:	4770      	bx	lr
     3de:	2300      	movs	r3, #0
     3e0:	e7f5      	b.n	3ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     3e2:	bf00      	nop
     3e4:	401d0000 	.word	0x401d0000

000003e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     3e8:	4910      	ldr	r1, [pc, #64]	; (42c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     3ea:	680b      	ldr	r3, [r1, #0]
     3ec:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     3ee:	680a      	ldr	r2, [r1, #0]
     3f0:	6b49      	ldr	r1, [r1, #52]	; 0x34
     3f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     3f6:	f3c1 6103 	ubfx	r1, r1, #24, #4
     3fa:	3201      	adds	r2, #1
     3fc:	3104      	adds	r1, #4
     3fe:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     402:	d310      	bcc.n	426 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     408:	f3c0 6003 	ubfx	r0, r0, #24, #4
     40c:	3b05      	subs	r3, #5
     40e:	3001      	adds	r0, #1
     410:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     414:	b2db      	uxtb	r3, r3
     416:	4a05      	ldr	r2, [pc, #20]	; (42c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     418:	6810      	ldr	r0, [r2, #0]
     41a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     41e:	3001      	adds	r0, #1
     420:	1ac0      	subs	r0, r0, r3
}
     422:	b2c0      	uxtb	r0, r0
     424:	4770      	bx	lr
     426:	2300      	movs	r3, #0
     428:	e7f5      	b.n	416 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     42a:	bf00      	nop
     42c:	401d4000 	.word	0x401d4000

00000430 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     430:	4a63      	ldr	r2, [pc, #396]	; (5c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     436:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     438:	6813      	ldr	r3, [r2, #0]
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     43a:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     43e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     442:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     444:	6813      	ldr	r3, [r2, #0]
     446:	01dd      	lsls	r5, r3, #7
     448:	d5fc      	bpl.n	444 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     44a:	6811      	ldr	r1, [r2, #0]
  FLEXCANb_IMASK2(_bus) = value >> 32;
     44c:	2300      	movs	r3, #0
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     44e:	f8df c178 	ldr.w	ip, [pc, #376]	; 5c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x198>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     452:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     456:	4f5b      	ldr	r7, [pc, #364]	; (5c4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     458:	4e59      	ldr	r6, [pc, #356]	; (5c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     45a:	6011      	str	r1, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     45c:	4619      	mov	r1, r3
  FLEXCANb_IMASK2(_bus) = value >> 32;
     45e:	6253      	str	r3, [r2, #36]	; 0x24
  FLEXCANb_IMASK1(_bus) = value;
     460:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     462:	6812      	ldr	r2, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     464:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     468:	19dd      	adds	r5, r3, r7
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     46a:	3301      	adds	r3, #1
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     46c:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     46e:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     470:	60d1      	str	r1, [r2, #12]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     472:	b2db      	uxtb	r3, r3
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     474:	6091      	str	r1, [r2, #8]
     476:	6051      	str	r1, [r2, #4]
     478:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     47a:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     47c:	6832      	ldr	r2, [r6, #0]
     47e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     482:	3201      	adds	r2, #1
     484:	4293      	cmp	r3, r2
     486:	d3ed      	bcc.n	464 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x34>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     488:	64b1      	str	r1, [r6, #72]	; 0x48
     48a:	6131      	str	r1, [r6, #16]
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
     48c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
     48e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG2(_bus) = value >> 32;
     490:	62f2      	str	r2, [r6, #44]	; 0x2c
  FLEXCANb_IFLAG1(_bus) = value;
     492:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     494:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     496:	2800      	cmp	r0, #0
     498:	d149      	bne.n	52e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfe>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     49a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 5c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x198>
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     49e:	4605      	mov	r5, r0
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     4a0:	4e47      	ldr	r6, [pc, #284]	; (5c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     4a2:	4f48      	ldr	r7, [pc, #288]	; (5c4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
     4a4:	e019      	b.n	4da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xaa>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     4a6:	6833      	ldr	r3, [r6, #0]
     4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     4ac:	3301      	adds	r3, #1
     4ae:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     4b2:	bf34      	ite	cc
     4b4:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     4b8:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     4bc:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     4be:	6b73      	ldr	r3, [r6, #52]	; 0x34
     4c0:	f3c3 4300 	ubfx	r3, r3, #16, #1
     4c4:	079b      	lsls	r3, r3, #30
     4c6:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     4c8:	6833      	ldr	r3, [r6, #0]
     4ca:	3501      	adds	r5, #1
     4cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     4d0:	b2ed      	uxtb	r5, r5
     4d2:	3301      	adds	r3, #1
     4d4:	4628      	mov	r0, r5
     4d6:	429d      	cmp	r5, r3
     4d8:	d21e      	bcs.n	518 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe8>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     4da:	6833      	ldr	r3, [r6, #0]
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     4dc:	eb05 0208 	add.w	r2, r5, r8
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     4e0:	19e9      	adds	r1, r5, r7
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     4e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     4e6:	0112      	lsls	r2, r2, #4
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     4e8:	0089      	lsls	r1, r1, #2
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     4ea:	3301      	adds	r3, #1
     4ec:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
     4f0:	d3d9      	bcc.n	4a6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x76>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     4f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     4f6:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     4f8:	6833      	ldr	r3, [r6, #0]
     4fa:	009a      	lsls	r2, r3, #2
     4fc:	d503      	bpl.n	506 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd6>
     4fe:	f7ff ff73 	bl	3e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     502:	42a8      	cmp	r0, r5
     504:	d8e0      	bhi.n	4c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x98>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     506:	2301      	movs	r3, #1
     508:	2d1f      	cmp	r5, #31
     50a:	fa03 f305 	lsl.w	r3, r3, r5
     50e:	d84c      	bhi.n	5aa <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x17a>
     510:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     512:	4313      	orrs	r3, r2
     514:	62b3      	str	r3, [r6, #40]	; 0x28
     516:	e7d7      	b.n	4c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x98>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     518:	b93c      	cbnz	r4, 52a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfa>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     51a:	4a29      	ldr	r2, [pc, #164]	; (5c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
     51c:	6813      	ldr	r3, [r2, #0]
     51e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     522:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     524:	6813      	ldr	r3, [r2, #0]
     526:	01db      	lsls	r3, r3, #7
     528:	d4fc      	bmi.n	524 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf4>
}
     52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     52e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     532:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     534:	6835      	ldr	r5, [r6, #0]
     536:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     53a:	d03e      	beq.n	5ba <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18a>
     53c:	f7ff ff54 	bl	3e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     540:	6833      	ldr	r3, [r6, #0]
     542:	4605      	mov	r5, r0
     544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     548:	3301      	adds	r3, #1
     54a:	4283      	cmp	r3, r0
     54c:	d9e4      	bls.n	518 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe8>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     54e:	4f1e      	ldr	r7, [pc, #120]	; (5c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x198>)
     550:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     554:	f8df 8068 	ldr.w	r8, [pc, #104]	; 5c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>
     558:	e00d      	b.n	576 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x146>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     55a:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     55e:	4313      	orrs	r3, r2
     560:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     564:	f8d8 3000 	ldr.w	r3, [r8]
     568:	3501      	adds	r5, #1
     56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     56e:	b2ed      	uxtb	r5, r5
     570:	3301      	adds	r3, #1
     572:	429d      	cmp	r5, r3
     574:	d2d0      	bcs.n	518 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe8>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     576:	19eb      	adds	r3, r5, r7
     578:	011b      	lsls	r3, r3, #4
     57a:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     57c:	f8d8 3000 	ldr.w	r3, [r8]
     580:	0099      	lsls	r1, r3, #2
     582:	d503      	bpl.n	58c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15c>
     584:	f7ff ff30 	bl	3e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     588:	4285      	cmp	r5, r0
     58a:	d3eb      	bcc.n	564 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x134>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     58c:	2301      	movs	r3, #1
     58e:	2d1f      	cmp	r5, #31
     590:	fa03 f305 	lsl.w	r3, r3, r5
     594:	d9e1      	bls.n	55a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x12a>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     596:	f1a5 0120 	sub.w	r1, r5, #32
     59a:	2301      	movs	r3, #1
     59c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     5a0:	408b      	lsls	r3, r1
     5a2:	4313      	orrs	r3, r2
     5a4:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     5a8:	e7dc      	b.n	564 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x134>
     5aa:	f1a5 0120 	sub.w	r1, r5, #32
     5ae:	2301      	movs	r3, #1
     5b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
     5b2:	408b      	lsls	r3, r1
     5b4:	4313      	orrs	r3, r2
     5b6:	6273      	str	r3, [r6, #36]	; 0x24
     5b8:	e786      	b.n	4c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x98>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     5ba:	6833      	ldr	r3, [r6, #0]
     5bc:	e7c7      	b.n	54e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11e>
     5be:	bf00      	nop
     5c0:	401d4000 	.word	0x401d4000
     5c4:	10075220 	.word	0x10075220
     5c8:	0401d408 	.word	0x0401d408

000005cc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5cc:	4a63      	ldr	r2, [pc, #396]	; (75c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5d2:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     5d4:	6813      	ldr	r3, [r2, #0]
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5d6:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     5da:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     5de:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     5e0:	6813      	ldr	r3, [r2, #0]
     5e2:	01dd      	lsls	r5, r3, #7
     5e4:	d5fc      	bpl.n	5e0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     5e6:	6811      	ldr	r1, [r2, #0]
  FLEXCANb_IMASK2(_bus) = value >> 32;
     5e8:	2300      	movs	r3, #0
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     5ea:	f8df c178 	ldr.w	ip, [pc, #376]	; 764 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x198>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     5ee:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     5f2:	4f5b      	ldr	r7, [pc, #364]	; (760 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     5f4:	4e59      	ldr	r6, [pc, #356]	; (75c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     5f6:	6011      	str	r1, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     5f8:	4619      	mov	r1, r3
  FLEXCANb_IMASK2(_bus) = value >> 32;
     5fa:	6253      	str	r3, [r2, #36]	; 0x24
  FLEXCANb_IMASK1(_bus) = value;
     5fc:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     5fe:	6812      	ldr	r2, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     600:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     604:	19dd      	adds	r5, r3, r7
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     606:	3301      	adds	r3, #1
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     608:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     60a:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     60c:	60d1      	str	r1, [r2, #12]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     60e:	b2db      	uxtb	r3, r3
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     610:	6091      	str	r1, [r2, #8]
     612:	6051      	str	r1, [r2, #4]
     614:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     616:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     618:	6832      	ldr	r2, [r6, #0]
     61a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     61e:	3201      	adds	r2, #1
     620:	4293      	cmp	r3, r2
     622:	d3ed      	bcc.n	600 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x34>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     624:	64b1      	str	r1, [r6, #72]	; 0x48
     626:	6131      	str	r1, [r6, #16]
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
     628:	6af2      	ldr	r2, [r6, #44]	; 0x2c
     62a:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG2(_bus) = value >> 32;
     62c:	62f2      	str	r2, [r6, #44]	; 0x2c
  FLEXCANb_IFLAG1(_bus) = value;
     62e:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     630:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     632:	2800      	cmp	r0, #0
     634:	d149      	bne.n	6ca <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfe>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     636:	f8df 812c 	ldr.w	r8, [pc, #300]	; 764 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x198>
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     63a:	4605      	mov	r5, r0
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     63c:	4e47      	ldr	r6, [pc, #284]	; (75c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     63e:	4f48      	ldr	r7, [pc, #288]	; (760 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
     640:	e019      	b.n	676 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xaa>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     642:	6833      	ldr	r3, [r6, #0]
     644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     648:	3301      	adds	r3, #1
     64a:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     64e:	bf34      	ite	cc
     650:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     654:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     658:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     65a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     65c:	f3c3 4300 	ubfx	r3, r3, #16, #1
     660:	079b      	lsls	r3, r3, #30
     662:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     664:	6833      	ldr	r3, [r6, #0]
     666:	3501      	adds	r5, #1
     668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     66c:	b2ed      	uxtb	r5, r5
     66e:	3301      	adds	r3, #1
     670:	4628      	mov	r0, r5
     672:	429d      	cmp	r5, r3
     674:	d21e      	bcs.n	6b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe8>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     676:	6833      	ldr	r3, [r6, #0]
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     678:	eb05 0208 	add.w	r2, r5, r8
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     67c:	19e9      	adds	r1, r5, r7
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     682:	0112      	lsls	r2, r2, #4
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     684:	0089      	lsls	r1, r1, #2
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     686:	3301      	adds	r3, #1
     688:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
     68c:	d3d9      	bcc.n	642 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x76>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     68e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     692:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     694:	6833      	ldr	r3, [r6, #0]
     696:	009a      	lsls	r2, r3, #2
     698:	d503      	bpl.n	6a2 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd6>
     69a:	f7ff fe81 	bl	3a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     69e:	42a8      	cmp	r0, r5
     6a0:	d8e0      	bhi.n	664 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x98>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     6a2:	2301      	movs	r3, #1
     6a4:	2d1f      	cmp	r5, #31
     6a6:	fa03 f305 	lsl.w	r3, r3, r5
     6aa:	d84c      	bhi.n	746 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x17a>
     6ac:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     6ae:	4313      	orrs	r3, r2
     6b0:	62b3      	str	r3, [r6, #40]	; 0x28
     6b2:	e7d7      	b.n	664 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x98>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     6b4:	b93c      	cbnz	r4, 6c6 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfa>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     6b6:	4a29      	ldr	r2, [pc, #164]	; (75c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
     6b8:	6813      	ldr	r3, [r2, #0]
     6ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     6be:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     6c0:	6813      	ldr	r3, [r2, #0]
     6c2:	01db      	lsls	r3, r3, #7
     6c4:	d4fc      	bmi.n	6c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf4>
}
     6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     6ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     6ce:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     6d0:	6835      	ldr	r5, [r6, #0]
     6d2:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     6d6:	d03e      	beq.n	756 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18a>
     6d8:	f7ff fe62 	bl	3a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     6dc:	6833      	ldr	r3, [r6, #0]
     6de:	4605      	mov	r5, r0
     6e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     6e4:	3301      	adds	r3, #1
     6e6:	4283      	cmp	r3, r0
     6e8:	d9e4      	bls.n	6b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe8>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     6ea:	4f1e      	ldr	r7, [pc, #120]	; (764 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x198>)
     6ec:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     6f0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 75c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>
     6f4:	e00d      	b.n	712 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x146>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     6f6:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     6fa:	4313      	orrs	r3, r2
     6fc:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     700:	f8d8 3000 	ldr.w	r3, [r8]
     704:	3501      	adds	r5, #1
     706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     70a:	b2ed      	uxtb	r5, r5
     70c:	3301      	adds	r3, #1
     70e:	429d      	cmp	r5, r3
     710:	d2d0      	bcs.n	6b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe8>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     712:	19eb      	adds	r3, r5, r7
     714:	011b      	lsls	r3, r3, #4
     716:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     718:	f8d8 3000 	ldr.w	r3, [r8]
     71c:	0099      	lsls	r1, r3, #2
     71e:	d503      	bpl.n	728 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15c>
     720:	f7ff fe3e 	bl	3a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     724:	4285      	cmp	r5, r0
     726:	d3eb      	bcc.n	700 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x134>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     728:	2301      	movs	r3, #1
     72a:	2d1f      	cmp	r5, #31
     72c:	fa03 f305 	lsl.w	r3, r3, r5
     730:	d9e1      	bls.n	6f6 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x12a>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     732:	f1a5 0120 	sub.w	r1, r5, #32
     736:	2301      	movs	r3, #1
     738:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     73c:	408b      	lsls	r3, r1
     73e:	4313      	orrs	r3, r2
     740:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     744:	e7dc      	b.n	700 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x134>
     746:	f1a5 0120 	sub.w	r1, r5, #32
     74a:	2301      	movs	r3, #1
     74c:	6a72      	ldr	r2, [r6, #36]	; 0x24
     74e:	408b      	lsls	r3, r1
     750:	4313      	orrs	r3, r2
     752:	6273      	str	r3, [r6, #36]	; 0x24
     754:	e786      	b.n	664 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x98>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     756:	6833      	ldr	r3, [r6, #0]
     758:	e7c7      	b.n	6ea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11e>
     75a:	bf00      	nop
     75c:	401d0000 	.word	0x401d0000
     760:	10074220 	.word	0x10074220
     764:	0401d008 	.word	0x0401d008

00000768 <check_led_timers()>:
     768:	4b1d      	ldr	r3, [pc, #116]	; (7e0 <check_led_timers()+0x78>)
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
     76a:	491e      	ldr	r1, [pc, #120]	; (7e4 <check_led_timers()+0x7c>)
     76c:	681a      	ldr	r2, [r3, #0]
     76e:	6809      	ldr	r1, [r1, #0]
     770:	1a52      	subs	r2, r2, r1
     772:	491d      	ldr	r1, [pc, #116]	; (7e8 <check_led_timers()+0x80>)
  RED_LED_state = !RED_LED_state;
  red_toggle_timer = 0;
}

void check_led_timers(){
  if (red_toggle_timer > LED_TIMEOUT){RED_LED_state = LOW;}
     774:	2ac8      	cmp	r2, #200	; 0xc8
     776:	6809      	ldr	r1, [r1, #0]
     778:	bf88      	it	hi
     77a:	2200      	movhi	r2, #0
void check_led_timers(){
     77c:	b570      	push	{r4, r5, r6, lr}
  if (red_toggle_timer > LED_TIMEOUT){RED_LED_state = LOW;}
     77e:	4c1b      	ldr	r4, [pc, #108]	; (7ec <check_led_timers()+0x84>)
  if (blue_toggle_timer > LED_TIMEOUT){BLUE_LED_state = LOW;}
     780:	4d1b      	ldr	r5, [pc, #108]	; (7f0 <check_led_timers()+0x88>)
  if (red_toggle_timer > LED_TIMEOUT){RED_LED_state = LOW;}
     782:	bf88      	it	hi
     784:	7022      	strbhi	r2, [r4, #0]
     786:	681a      	ldr	r2, [r3, #0]
     788:	1a52      	subs	r2, r2, r1
     78a:	491a      	ldr	r1, [pc, #104]	; (7f4 <check_led_timers()+0x8c>)
  if (blue_toggle_timer > LED_TIMEOUT){BLUE_LED_state = LOW;}
     78c:	2ac8      	cmp	r2, #200	; 0xc8
     78e:	6809      	ldr	r1, [r1, #0]
     790:	bf84      	itt	hi
     792:	2200      	movhi	r2, #0
     794:	702a      	strbhi	r2, [r5, #0]
     796:	681a      	ldr	r2, [r3, #0]
     798:	1a52      	subs	r2, r2, r1
  if (green_toggle_timer > LED_TIMEOUT){GREEN_LED_state = LOW;}
     79a:	2ac8      	cmp	r2, #200	; 0xc8
     79c:	d81b      	bhi.n	7d6 <check_led_timers()+0x6e>
  if (yellow_toggle_timer > LED_TIMEOUT){YELLOW_LED_state = LOW;}
  digitalWrite(GREEN_LED,GREEN_LED_state);
     79e:	4a16      	ldr	r2, [pc, #88]	; (7f8 <check_led_timers()+0x90>)
     7a0:	7811      	ldrb	r1, [r2, #0]
     7a2:	4a16      	ldr	r2, [pc, #88]	; (7fc <check_led_timers()+0x94>)
     7a4:	2015      	movs	r0, #21
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	6812      	ldr	r2, [r2, #0]
  if (yellow_toggle_timer > LED_TIMEOUT){YELLOW_LED_state = LOW;}
     7aa:	4e15      	ldr	r6, [pc, #84]	; (800 <check_led_timers()+0x98>)
     7ac:	1a9b      	subs	r3, r3, r2
     7ae:	2bc8      	cmp	r3, #200	; 0xc8
     7b0:	bf84      	itt	hi
     7b2:	2300      	movhi	r3, #0
     7b4:	7033      	strbhi	r3, [r6, #0]
  digitalWrite(GREEN_LED,GREEN_LED_state);
     7b6:	f003 fa51 	bl	3c5c <digitalWrite>
  digitalWrite(RED_LED,RED_LED_state);
     7ba:	7821      	ldrb	r1, [r4, #0]
     7bc:	2003      	movs	r0, #3
     7be:	f003 fa4d 	bl	3c5c <digitalWrite>
  digitalWrite(YELLOW_LED,YELLOW_LED_state);
     7c2:	7831      	ldrb	r1, [r6, #0]
     7c4:	2014      	movs	r0, #20
     7c6:	f003 fa49 	bl	3c5c <digitalWrite>
  digitalWrite(BLUE_LED,BLUE_LED_state);
     7ca:	7829      	ldrb	r1, [r5, #0]
     7cc:	2002      	movs	r0, #2
}
     7ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  digitalWrite(BLUE_LED,BLUE_LED_state);
     7d2:	f003 ba43 	b.w	3c5c <digitalWrite>
  if (green_toggle_timer > LED_TIMEOUT){GREEN_LED_state = LOW;}
     7d6:	2100      	movs	r1, #0
     7d8:	4a07      	ldr	r2, [pc, #28]	; (7f8 <check_led_timers()+0x90>)
     7da:	7011      	strb	r1, [r2, #0]
     7dc:	e7e1      	b.n	7a2 <check_led_timers()+0x3a>
     7de:	bf00      	nop
     7e0:	20006034 	.word	0x20006034
     7e4:	20005fe0 	.word	0x20005fe0
     7e8:	20005fa0 	.word	0x20005fa0
     7ec:	2000605c 	.word	0x2000605c
     7f0:	2000605a 	.word	0x2000605a
     7f4:	20005fc4 	.word	0x20005fc4
     7f8:	2000605b 	.word	0x2000605b
     7fc:	20006050 	.word	0x20006050
     800:	2000605d 	.word	0x2000605d

00000804 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     804:	b570      	push	{r4, r5, r6, lr}
  const uint8_t clocksrc[4] = {60, 24, 80, 0};
     806:	4b5e      	ldr	r3, [pc, #376]	; (980 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x17c>)
FCTP_FUNC void FCTP_OPT::begin() {
     808:	b082      	sub	sp, #8
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
     80a:	4a5e      	ldr	r2, [pc, #376]	; (984 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x180>)
  const uint8_t clocksrc[4] = {60, 24, 80, 0};
     80c:	9301      	str	r3, [sp, #4]
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
     80e:	6a13      	ldr	r3, [r2, #32]
     810:	f3c3 2301 	ubfx	r3, r3, #8, #2
     814:	3308      	adds	r3, #8
     816:	446b      	add	r3, sp
     818:	f813 3c04 	ldrb.w	r3, [r3, #-4]
  if ( !getClock() ) setClock(CLK_24MHz); /* no clock enabled, enable osc clock */
     81c:	2b00      	cmp	r3, #0
     81e:	f000 8085 	beq.w	92c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x128>
     822:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
    CCM_CCGR0 |= 0x3C000;
     826:	4957      	ldr	r1, [pc, #348]	; (984 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x180>)
    nvicIrq = IRQ_CAN1;
     828:	2024      	movs	r0, #36	; 0x24
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     82a:	4b57      	ldr	r3, [pc, #348]	; (988 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x184>)
    busNumber = 1;
     82c:	2401      	movs	r4, #1
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     82e:	4a57      	ldr	r2, [pc, #348]	; (98c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x188>)
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03 = 0x10B0; // pin 0 T4B1+B2
    }
  }
  if ( _bus == CAN1 ) {
    if ( pin == DEF ) {
      IOMUXC_FLEXCAN1_RX_SELECT_INPUT = 0x02;
     830:	2602      	movs	r6, #2
    nvicIrq = IRQ_CAN1;
     832:	f8c5 06c8 	str.w	r0, [r5, #1736]	; 0x6c8
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08 = 0x12; // pin 22 T4B1+B2
     836:	2012      	movs	r0, #18
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     838:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    CCM_CCGR0 |= 0x3C000;
     83c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08 = 0x12; // pin 22 T4B1+B2
     83e:	4b54      	ldr	r3, [pc, #336]	; (990 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x18c>)
    CCM_CCGR0 |= 0x3C000;
     840:	f442 3270 	orr.w	r2, r2, #245760	; 0x3c000
     844:	668a      	str	r2, [r1, #104]	; 0x68
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08 = 0x10B0; // pin 22 T4B1+B2
     846:	f241 01b0 	movw	r1, #4272	; 0x10b0
    busNumber = 1;
     84a:	f885 46d1 	strb.w	r4, [r5, #1745]	; 0x6d1
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     84e:	4a51      	ldr	r2, [pc, #324]	; (994 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
      IOMUXC_FLEXCAN1_RX_SELECT_INPUT = 0x02;
     850:	4c51      	ldr	r4, [pc, #324]	; (998 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x194>)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_08 = 0x12; // pin 22 T4B1+B2
     852:	f8c3 011c 	str.w	r0, [r3, #284]	; 0x11c
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_08 = 0x10B0; // pin 22 T4B1+B2
     856:	f8c3 130c 	str.w	r1, [r3, #780]	; 0x30c
      IOMUXC_FLEXCAN1_RX_SELECT_INPUT = 0x02;
     85a:	64e6      	str	r6, [r4, #76]	; 0x4c
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B1_09 = 0x12; // pin 23 T4B1+B2
     85c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B1_09 = 0x10B0; // pin 23 T4B1+B2
     860:	f8c3 1310 	str.w	r1, [r3, #784]	; 0x310
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     864:	6813      	ldr	r3, [r2, #0]
     866:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     86a:	6013      	str	r3, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     86c:	6813      	ldr	r3, [r2, #0]
     86e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     872:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     874:	6813      	ldr	r3, [r2, #0]
     876:	01dc      	lsls	r4, r3, #7
     878:	d5fc      	bpl.n	874 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x70>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     87a:	6853      	ldr	r3, [r2, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     87c:	4945      	ldr	r1, [pc, #276]	; (994 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     87e:	f043 0308 	orr.w	r3, r3, #8
     882:	6053      	str	r3, [r2, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     884:	6813      	ldr	r3, [r2, #0]
     886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     88a:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     88c:	680b      	ldr	r3, [r1, #0]
     88e:	02d8      	lsls	r0, r3, #11
     890:	d4fc      	bmi.n	88c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x88>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     892:	680b      	ldr	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     894:	4a3f      	ldr	r2, [pc, #252]	; (994 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     896:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     89a:	600b      	str	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     89c:	6813      	ldr	r3, [r2, #0]
     89e:	0199      	lsls	r1, r3, #6
     8a0:	d4fc      	bmi.n	89c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x98>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     8a2:	4c3c      	ldr	r4, [pc, #240]	; (994 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
     8a4:	6823      	ldr	r3, [r4, #0]
     8a6:	01da      	lsls	r2, r3, #7
     8a8:	d5fc      	bpl.n	8a4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xa0>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     8aa:	6823      	ldr	r3, [r4, #0]
    void disableFIFO() { enableFIFO(0); }
     8ac:	2000      	movs	r0, #0
     8ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     8b2:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     8b4:	6823      	ldr	r3, [r4, #0]
     8b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     8ba:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     8bc:	6823      	ldr	r3, [r4, #0]
     8be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     8c2:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     8c4:	6823      	ldr	r3, [r4, #0]
     8c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     8ca:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     8cc:	6823      	ldr	r3, [r4, #0]
     8ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     8d2:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     8d4:	6823      	ldr	r3, [r4, #0]
     8d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     8da:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     8dc:	6823      	ldr	r3, [r4, #0]
     8de:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     8e2:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     8e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
     8e6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     8ea:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     8ec:	6823      	ldr	r3, [r4, #0]
     8ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     8f2:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     8f4:	6823      	ldr	r3, [r4, #0]
     8f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     8fa:	6023      	str	r3, [r4, #0]
     8fc:	f7ff fe66 	bl	5cc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     900:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     902:	4a24      	ldr	r2, [pc, #144]	; (994 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     908:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     90a:	6813      	ldr	r3, [r2, #0]
     90c:	01db      	lsls	r3, r3, #7
     90e:	d4fc      	bmi.n	90a <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x106>
  NVIC_ENABLE_IRQ(nvicIrq);
     910:	f8d5 26c8 	ldr.w	r2, [r5, #1736]	; 0x6c8
     914:	2101      	movs	r1, #1
     916:	4b21      	ldr	r3, [pc, #132]	; (99c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x198>)
     918:	eb03 1352 	add.w	r3, r3, r2, lsr #5
     91c:	f002 021f 	and.w	r2, r2, #31
     920:	009b      	lsls	r3, r3, #2
     922:	fa01 f202 	lsl.w	r2, r1, r2
     926:	601a      	str	r2, [r3, #0]
}
     928:	b002      	add	sp, #8
     92a:	bd70      	pop	{r4, r5, r6, pc}
  if ( clock == CLK_24MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(1) | CCM_CSCMR2_CAN_CLK_PODF(0);
     92c:	6a13      	ldr	r3, [r2, #32]
  if ( _CAN1 ) _CAN1->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
     92e:	491c      	ldr	r1, [pc, #112]	; (9a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x19c>)
  if ( clock == CLK_24MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(1) | CCM_CSCMR2_CAN_CLK_PODF(0);
     930:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
     934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     938:	6213      	str	r3, [r2, #32]
  if ( _CAN1 ) _CAN1->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
     93a:	680b      	ldr	r3, [r1, #0]
     93c:	b1e3      	cbz	r3, 978 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x174>
     93e:	4a15      	ldr	r2, [pc, #84]	; (994 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
     940:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
     944:	681c      	ldr	r4, [r3, #0]
     946:	4618      	mov	r0, r3
     948:	6852      	ldr	r2, [r2, #4]
     94a:	f8d5 16cc 	ldr.w	r1, [r5, #1740]	; 0x6cc
     94e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
     952:	6863      	ldr	r3, [r4, #4]
     954:	0052      	lsls	r2, r2, #1
     956:	4798      	blx	r3
  if ( _CAN2 ) _CAN2->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
     958:	4b12      	ldr	r3, [pc, #72]	; (9a4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a0>)
     95a:	6818      	ldr	r0, [r3, #0]
     95c:	2800      	cmp	r0, #0
     95e:	f43f af62 	beq.w	826 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x22>
     962:	4a0c      	ldr	r2, [pc, #48]	; (994 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
     964:	6803      	ldr	r3, [r0, #0]
     966:	6852      	ldr	r2, [r2, #4]
     968:	f8d5 16cc 	ldr.w	r1, [r5, #1740]	; 0x6cc
     96c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
     970:	685b      	ldr	r3, [r3, #4]
     972:	0052      	lsls	r2, r2, #1
     974:	4798      	blx	r3
     976:	e756      	b.n	826 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x22>
     978:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
     97c:	e7ec      	b.n	958 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x154>
     97e:	bf00      	nop
     980:	0050183c 	.word	0x0050183c
     984:	400fc000 	.word	0x400fc000
     988:	20000c00 	.word	0x20000c00
     98c:	00000069 	.word	0x00000069
     990:	401f8000 	.word	0x401f8000
     994:	401d0000 	.word	0x401d0000
     998:	401f8400 	.word	0x401f8400
     99c:	38003840 	.word	0x38003840
     9a0:	20005e30 	.word	0x20005e30
     9a4:	20005e34 	.word	0x20005e34

000009a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     9a8:	b570      	push	{r4, r5, r6, lr}
  const uint8_t clocksrc[4] = {60, 24, 80, 0};
     9aa:	4b5e      	ldr	r3, [pc, #376]	; (b24 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x17c>)
FCTP_FUNC void FCTP_OPT::begin() {
     9ac:	b082      	sub	sp, #8
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
     9ae:	4a5e      	ldr	r2, [pc, #376]	; (b28 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x180>)
  const uint8_t clocksrc[4] = {60, 24, 80, 0};
     9b0:	9301      	str	r3, [sp, #4]
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
     9b2:	6a13      	ldr	r3, [r2, #32]
     9b4:	f3c3 2301 	ubfx	r3, r3, #8, #2
     9b8:	3308      	adds	r3, #8
     9ba:	446b      	add	r3, sp
     9bc:	f813 3c04 	ldrb.w	r3, [r3, #-4]
  if ( !getClock() ) setClock(CLK_24MHz); /* no clock enabled, enable osc clock */
     9c0:	2b00      	cmp	r3, #0
     9c2:	f000 8085 	beq.w	ad0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x128>
     9c6:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
    CCM_CCGR0 |= 0x3C0000;
     9ca:	4957      	ldr	r1, [pc, #348]	; (b28 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x180>)
    nvicIrq = IRQ_CAN2;
     9cc:	2025      	movs	r0, #37	; 0x25
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
     9ce:	4b57      	ldr	r3, [pc, #348]	; (b2c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x184>)
    busNumber = 2;
     9d0:	2402      	movs	r4, #2
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
     9d2:	4a57      	ldr	r2, [pc, #348]	; (b30 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x188>)
      IOMUXC_FLEXCAN2_RX_SELECT_INPUT = 0x01;
     9d4:	2601      	movs	r6, #1
    nvicIrq = IRQ_CAN2;
     9d6:	f8c5 06c8 	str.w	r0, [r5, #1736]	; 0x6c8
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 0x10; // pin 1 T4B1+B2
     9da:	2010      	movs	r0, #16
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
     9dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    CCM_CCGR0 |= 0x3C0000;
     9e0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 0x10; // pin 1 T4B1+B2
     9e2:	4b54      	ldr	r3, [pc, #336]	; (b34 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x18c>)
    CCM_CCGR0 |= 0x3C0000;
     9e4:	f442 1270 	orr.w	r2, r2, #3932160	; 0x3c0000
     9e8:	668a      	str	r2, [r1, #104]	; 0x68
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02 = 0x10B0; // pin 1 T4B1+B2
     9ea:	f241 01b0 	movw	r1, #4272	; 0x10b0
    busNumber = 2;
     9ee:	f885 46d1 	strb.w	r4, [r5, #1745]	; 0x6d1
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     9f2:	4a51      	ldr	r2, [pc, #324]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
      IOMUXC_FLEXCAN2_RX_SELECT_INPUT = 0x01;
     9f4:	4c51      	ldr	r4, [pc, #324]	; (b3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x194>)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 0x10; // pin 1 T4B1+B2
     9f6:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02 = 0x10B0; // pin 1 T4B1+B2
     9fa:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
      IOMUXC_FLEXCAN2_RX_SELECT_INPUT = 0x01;
     9fe:	6526      	str	r6, [r4, #80]	; 0x50
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03 = 0x10; // pin 0 T4B1+B2
     a00:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03 = 0x10B0; // pin 0 T4B1+B2
     a04:	f8c3 12b8 	str.w	r1, [r3, #696]	; 0x2b8
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     a08:	6813      	ldr	r3, [r2, #0]
     a0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     a0e:	6013      	str	r3, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     a10:	6813      	ldr	r3, [r2, #0]
     a12:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     a16:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     a18:	6813      	ldr	r3, [r2, #0]
     a1a:	01dc      	lsls	r4, r3, #7
     a1c:	d5fc      	bpl.n	a18 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x70>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     a1e:	6853      	ldr	r3, [r2, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     a20:	4945      	ldr	r1, [pc, #276]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     a22:	f043 0308 	orr.w	r3, r3, #8
     a26:	6053      	str	r3, [r2, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     a28:	6813      	ldr	r3, [r2, #0]
     a2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     a2e:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     a30:	680b      	ldr	r3, [r1, #0]
     a32:	02d8      	lsls	r0, r3, #11
     a34:	d4fc      	bmi.n	a30 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x88>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     a36:	680b      	ldr	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     a38:	4a3f      	ldr	r2, [pc, #252]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     a3e:	600b      	str	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     a40:	6813      	ldr	r3, [r2, #0]
     a42:	0199      	lsls	r1, r3, #6
     a44:	d4fc      	bmi.n	a40 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x98>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     a46:	4c3c      	ldr	r4, [pc, #240]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
     a48:	6823      	ldr	r3, [r4, #0]
     a4a:	01da      	lsls	r2, r3, #7
     a4c:	d5fc      	bpl.n	a48 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xa0>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     a4e:	6823      	ldr	r3, [r4, #0]
     a50:	2000      	movs	r0, #0
     a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     a56:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     a58:	6823      	ldr	r3, [r4, #0]
     a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     a5e:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     a60:	6823      	ldr	r3, [r4, #0]
     a62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     a66:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     a68:	6823      	ldr	r3, [r4, #0]
     a6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     a6e:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     a70:	6823      	ldr	r3, [r4, #0]
     a72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     a76:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     a78:	6823      	ldr	r3, [r4, #0]
     a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     a7e:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     a80:	6823      	ldr	r3, [r4, #0]
     a82:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     a86:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     a88:	6b63      	ldr	r3, [r4, #52]	; 0x34
     a8a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     a8e:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     a90:	6823      	ldr	r3, [r4, #0]
     a92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     a96:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     a98:	6823      	ldr	r3, [r4, #0]
     a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     a9e:	6023      	str	r3, [r4, #0]
     aa0:	f7ff fcc6 	bl	430 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     aa4:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     aa6:	4a24      	ldr	r2, [pc, #144]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     aac:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     aae:	6813      	ldr	r3, [r2, #0]
     ab0:	01db      	lsls	r3, r3, #7
     ab2:	d4fc      	bmi.n	aae <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x106>
  NVIC_ENABLE_IRQ(nvicIrq);
     ab4:	f8d5 26c8 	ldr.w	r2, [r5, #1736]	; 0x6c8
     ab8:	2101      	movs	r1, #1
     aba:	4b21      	ldr	r3, [pc, #132]	; (b40 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x198>)
     abc:	eb03 1352 	add.w	r3, r3, r2, lsr #5
     ac0:	f002 021f 	and.w	r2, r2, #31
     ac4:	009b      	lsls	r3, r3, #2
     ac6:	fa01 f202 	lsl.w	r2, r1, r2
     aca:	601a      	str	r2, [r3, #0]
}
     acc:	b002      	add	sp, #8
     ace:	bd70      	pop	{r4, r5, r6, pc}
  if ( clock == CLK_24MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(1) | CCM_CSCMR2_CAN_CLK_PODF(0);
     ad0:	6a13      	ldr	r3, [r2, #32]
  if ( _CAN1 ) _CAN1->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
     ad2:	491c      	ldr	r1, [pc, #112]	; (b44 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x19c>)
  if ( clock == CLK_24MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(1) | CCM_CSCMR2_CAN_CLK_PODF(0);
     ad4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
     ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     adc:	6213      	str	r3, [r2, #32]
  if ( _CAN1 ) _CAN1->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
     ade:	680b      	ldr	r3, [r1, #0]
     ae0:	b1e3      	cbz	r3, b1c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x174>
     ae2:	4a15      	ldr	r2, [pc, #84]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
     ae4:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
     ae8:	681c      	ldr	r4, [r3, #0]
     aea:	4618      	mov	r0, r3
     aec:	6852      	ldr	r2, [r2, #4]
     aee:	f8d5 16cc 	ldr.w	r1, [r5, #1740]	; 0x6cc
     af2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
     af6:	6863      	ldr	r3, [r4, #4]
     af8:	0052      	lsls	r2, r2, #1
     afa:	4798      	blx	r3
  if ( _CAN2 ) _CAN2->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
     afc:	4b12      	ldr	r3, [pc, #72]	; (b48 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a0>)
     afe:	6818      	ldr	r0, [r3, #0]
     b00:	2800      	cmp	r0, #0
     b02:	f43f af62 	beq.w	9ca <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x22>
     b06:	4a0c      	ldr	r2, [pc, #48]	; (b38 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
     b08:	6803      	ldr	r3, [r0, #0]
     b0a:	6852      	ldr	r2, [r2, #4]
     b0c:	f8d5 16cc 	ldr.w	r1, [r5, #1740]	; 0x6cc
     b10:	f3c2 02c0 	ubfx	r2, r2, #3, #1
     b14:	685b      	ldr	r3, [r3, #4]
     b16:	0052      	lsls	r2, r2, #1
     b18:	4798      	blx	r3
     b1a:	e756      	b.n	9ca <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x22>
     b1c:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
     b20:	e7ec      	b.n	afc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x154>
     b22:	bf00      	nop
     b24:	0050183c 	.word	0x0050183c
     b28:	400fc000 	.word	0x400fc000
     b2c:	20000c00 	.word	0x20000c00
     b30:	0000007d 	.word	0x0000007d
     b34:	401f8000 	.word	0x401f8000
     b38:	401d4000 	.word	0x401d4000
     b3c:	401f8400 	.word	0x401f8400
     b40:	38003840 	.word	0x38003840
     b44:	20005e30 	.word	0x20005e30
     b48:	20005e34 	.word	0x20005e34

00000b4c <setup>:
void setup(void) {
     b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(LED_BUILTIN, OUTPUT);
     b50:	2101      	movs	r1, #1
     b52:	200d      	movs	r0, #13
     b54:	f003 f8ac 	bl	3cb0 <pinMode>
  digitalWrite(LED_BUILTIN, HIGH);
     b58:	2101      	movs	r1, #1
     b5a:	200d      	movs	r0, #13
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     b5c:	4c36      	ldr	r4, [pc, #216]	; (c38 <setup+0xec>)
     b5e:	f003 f87d 	bl	3c5c <digitalWrite>
  Can1.begin();
     b62:	4836      	ldr	r0, [pc, #216]	; (c3c <setup+0xf0>)
     b64:	f7ff fe4e 	bl	804 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can1.setBaudRate(250000);
     b68:	2200      	movs	r2, #0
     b6a:	4935      	ldr	r1, [pc, #212]	; (c40 <setup+0xf4>)
     b6c:	4833      	ldr	r0, [pc, #204]	; (c3c <setup+0xf0>)
     b6e:	f7ff fa8f 	bl	90 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
     b72:	6823      	ldr	r3, [r4, #0]
     b74:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     b78:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     b7a:	6823      	ldr	r3, [r4, #0]
     b7c:	01df      	lsls	r7, r3, #7
     b7e:	d5fc      	bpl.n	b7a <setup+0x2e>
     b80:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
     b82:	6825      	ldr	r5, [r4, #0]
     b84:	f7ff fd22 	bl	5cc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
     b88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     b8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ( fifo_was_cleared ) enableFIFO();
     b8c:	00ae      	lsls	r6, r5, #2
  FLEXCANb_IFLAG2(_bus) = value >> 32;
     b8e:	62e2      	str	r2, [r4, #44]	; 0x2c
  FLEXCANb_IFLAG1(_bus) = value;
     b90:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
     b92:	6823      	ldr	r3, [r4, #0]
     b94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     b98:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
     b9a:	6823      	ldr	r3, [r4, #0]
     b9c:	f043 030f 	orr.w	r3, r3, #15
     ba0:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
     ba2:	f100 84ed 	bmi.w	1580 <setup+0xa34>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     ba6:	4c24      	ldr	r4, [pc, #144]	; (c38 <setup+0xec>)
     ba8:	6823      	ldr	r3, [r4, #0]
     baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     bae:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     bb0:	6823      	ldr	r3, [r4, #0]
     bb2:	01dd      	lsls	r5, r3, #7
     bb4:	d4fc      	bmi.n	bb0 <setup+0x64>
  Can1.enableFIFO();
     bb6:	2001      	movs	r0, #1
     bb8:	f7ff fd08 	bl	5cc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
     bbc:	6823      	ldr	r3, [r4, #0]
     bbe:	0098      	lsls	r0, r3, #2
     bc0:	d50a      	bpl.n	bd8 <setup+0x8c>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
     bc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bc4:	0699      	lsls	r1, r3, #26
     bc6:	d407      	bmi.n	bd8 <setup+0x8c>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
     bc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     bce:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
     bd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     bd2:	f043 0320 	orr.w	r3, r3, #32
     bd6:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     bd8:	4d17      	ldr	r5, [pc, #92]	; (c38 <setup+0xec>)
  }
  _mbHandlers[mb_num] = handler;
}

FCTP_FUNC void FCTP_OPT::onReceive(_MB_ptr handler) {
  _mainHandler = handler;
     bda:	4a1a      	ldr	r2, [pc, #104]	; (c44 <setup+0xf8>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     bdc:	682b      	ldr	r3, [r5, #0]
  _mainHandler = handler;
     bde:	491a      	ldr	r1, [pc, #104]	; (c48 <setup+0xfc>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     be0:	f013 5900 	ands.w	r9, r3, #536870912	; 0x20000000
  _mainHandler = handler;
     be4:	f8c2 16c4 	str.w	r1, [r2, #1732]	; 0x6c4
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     be8:	f040 8444 	bne.w	1474 <setup+0x928>
     bec:	211a      	movs	r1, #26
     bee:	4817      	ldr	r0, [pc, #92]	; (c4c <setup+0x100>)
     bf0:	f004 fa34 	bl	505c <usb_serial_write>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
     bf4:	464c      	mov	r4, r9
     bf6:	682b      	ldr	r3, [r5, #0]
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
     bf8:	4e15      	ldr	r6, [pc, #84]	; (c50 <setup+0x104>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
     bfa:	4d16      	ldr	r5, [pc, #88]	; (c54 <setup+0x108>)
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
     bfc:	4f16      	ldr	r7, [pc, #88]	; (c58 <setup+0x10c>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
     bfe:	eb04 0805 	add.w	r8, r4, r5
     c02:	ea4f 1808 	mov.w	r8, r8, lsl #4
     c06:	f8d8 3000 	ldr.w	r3, [r8]
     c0a:	f3c3 6303 	ubfx	r3, r3, #24, #4
     c0e:	2b0e      	cmp	r3, #14
     c10:	f200 80b1 	bhi.w	d76 <setup+0x22a>
     c14:	e8df f013 	tbh	[pc, r3, lsl #1]
     c18:	02870299 	.word	0x02870299
     c1c:	00af0275 	.word	0x00af0275
     c20:	00af025a 	.word	0x00af025a
     c24:	00af0248 	.word	0x00af0248
     c28:	02240236 	.word	0x02240236
     c2c:	00af0212 	.word	0x00af0212
     c30:	00af0022 	.word	0x00af0022
     c34:	0200      	.short	0x0200
     c36:	bf00      	nop
     c38:	401d0000 	.word	0x401d0000
     c3c:	20001088 	.word	0x20001088
     c40:	0003d090 	.word	0x0003d090
     c44:	20003088 	.word	0x20003088
     c48:	000024fd 	.word	0x000024fd
     c4c:	20000890 	.word	0x20000890
     c50:	401d008c 	.word	0x401d008c
     c54:	0401d008 	.word	0x0401d008
     c58:	bfe2ff80 	.word	0xbfe2ff80
     c5c:	2104      	movs	r1, #4
     c5e:	4881      	ldr	r0, [pc, #516]	; (e64 <setup+0x318>)
     c60:	f004 f9fc 	bl	505c <usb_serial_write>
	// Print a string
	size_t print(const char s[])			{ return write(s); }
	// Print a string
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     c64:	2300      	movs	r3, #0
     c66:	4649      	mov	r1, r9
     c68:	220a      	movs	r2, #10
     c6a:	487f      	ldr	r0, [pc, #508]	; (e68 <setup+0x31c>)
     c6c:	f002 ff8e 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     c70:	211d      	movs	r1, #29
     c72:	487e      	ldr	r0, [pc, #504]	; (e6c <setup+0x320>)
     c74:	f004 f9f2 	bl	505c <usb_serial_write>
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
     c78:	f8d8 3000 	ldr.w	r3, [r8]
     c7c:	2110      	movs	r1, #16
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
     c7e:	029b      	lsls	r3, r3, #10
     c80:	f140 848f 	bpl.w	15a2 <setup+0xa56>
     c84:	487a      	ldr	r0, [pc, #488]	; (e70 <setup+0x324>)
     c86:	f004 f9e9 	bl	505c <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
     c8a:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
     c8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
     c92:	44b8      	add	r8, r7
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
     c94:	f023 4a60 	bic.w	sl, r3, #3758096384	; 0xe0000000
     c98:	2107      	movs	r1, #7
     c9a:	4876      	ldr	r0, [pc, #472]	; (e74 <setup+0x328>)
     c9c:	f004 f9de 	bl	505c <usb_serial_write>
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	// Print a number in any number base (eg, BIN, HEX, OCT)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     ca0:	2300      	movs	r3, #0
     ca2:	2210      	movs	r2, #16
     ca4:	4651      	mov	r1, sl
     ca6:	4870      	ldr	r0, [pc, #448]	; (e68 <setup+0x31c>)
     ca8:	f002 ff70 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     cac:	2101      	movs	r1, #1
     cae:	4872      	ldr	r0, [pc, #456]	; (e78 <setup+0x32c>)
     cb0:	f004 f9d4 	bl	505c <usb_serial_write>
     cb4:	210a      	movs	r1, #10
     cb6:	4871      	ldr	r0, [pc, #452]	; (e7c <setup+0x330>)
     cb8:	f004 f9d0 	bl	505c <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     cbc:	2300      	movs	r3, #0
     cbe:	2210      	movs	r2, #16
     cc0:	ea4f 6119 	mov.w	r1, r9, lsr #24
     cc4:	4868      	ldr	r0, [pc, #416]	; (e68 <setup+0x31c>)
     cc6:	f002 ff61 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     cca:	2101      	movs	r1, #1
     ccc:	486c      	ldr	r0, [pc, #432]	; (e80 <setup+0x334>)
     cce:	f004 f9c5 	bl	505c <usb_serial_write>
     cd2:	2300      	movs	r3, #0
     cd4:	2210      	movs	r2, #16
     cd6:	f3c9 4107 	ubfx	r1, r9, #16, #8
     cda:	4863      	ldr	r0, [pc, #396]	; (e68 <setup+0x31c>)
     cdc:	f002 ff56 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ce0:	2101      	movs	r1, #1
     ce2:	4867      	ldr	r0, [pc, #412]	; (e80 <setup+0x334>)
     ce4:	f004 f9ba 	bl	505c <usb_serial_write>
     ce8:	2300      	movs	r3, #0
     cea:	2210      	movs	r2, #16
     cec:	f3c9 2107 	ubfx	r1, r9, #8, #8
     cf0:	485d      	ldr	r0, [pc, #372]	; (e68 <setup+0x31c>)
     cf2:	f002 ff4b 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     cf6:	2101      	movs	r1, #1
     cf8:	4861      	ldr	r0, [pc, #388]	; (e80 <setup+0x334>)
     cfa:	f004 f9af 	bl	505c <usb_serial_write>
     cfe:	2300      	movs	r3, #0
     d00:	2210      	movs	r2, #16
     d02:	fa5f f189 	uxtb.w	r1, r9
     d06:	4858      	ldr	r0, [pc, #352]	; (e68 <setup+0x31c>)
     d08:	f002 ff40 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
     d0c:	f858 8006 	ldr.w	r8, [r8, r6]
     d10:	2101      	movs	r1, #1
     d12:	485b      	ldr	r0, [pc, #364]	; (e80 <setup+0x334>)
     d14:	f004 f9a2 	bl	505c <usb_serial_write>
     d18:	2300      	movs	r3, #0
     d1a:	2210      	movs	r2, #16
     d1c:	ea4f 6118 	mov.w	r1, r8, lsr #24
     d20:	4851      	ldr	r0, [pc, #324]	; (e68 <setup+0x31c>)
     d22:	f002 ff33 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     d26:	2101      	movs	r1, #1
     d28:	4855      	ldr	r0, [pc, #340]	; (e80 <setup+0x334>)
     d2a:	f004 f997 	bl	505c <usb_serial_write>
     d2e:	2300      	movs	r3, #0
     d30:	2210      	movs	r2, #16
     d32:	f3c8 4107 	ubfx	r1, r8, #16, #8
     d36:	484c      	ldr	r0, [pc, #304]	; (e68 <setup+0x31c>)
     d38:	f002 ff28 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     d3c:	2101      	movs	r1, #1
     d3e:	4850      	ldr	r0, [pc, #320]	; (e80 <setup+0x334>)
     d40:	f004 f98c 	bl	505c <usb_serial_write>
     d44:	2300      	movs	r3, #0
     d46:	2210      	movs	r2, #16
     d48:	f3c8 2107 	ubfx	r1, r8, #8, #8
     d4c:	4846      	ldr	r0, [pc, #280]	; (e68 <setup+0x31c>)
     d4e:	f002 ff1d 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     d52:	2101      	movs	r1, #1
     d54:	484a      	ldr	r0, [pc, #296]	; (e80 <setup+0x334>)
     d56:	f004 f981 	bl	505c <usb_serial_write>
     d5a:	2300      	movs	r3, #0
     d5c:	fa5f f188 	uxtb.w	r1, r8
     d60:	2210      	movs	r2, #16
     d62:	4841      	ldr	r0, [pc, #260]	; (e68 <setup+0x31c>)
     d64:	f002 ff12 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     d68:	2101      	movs	r1, #1
     d6a:	4843      	ldr	r0, [pc, #268]	; (e78 <setup+0x32c>)
     d6c:	f004 f976 	bl	505c <usb_serial_write>
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     d70:	483d      	ldr	r0, [pc, #244]	; (e68 <setup+0x31c>)
     d72:	f002 fefd 	bl	3b70 <Print::println()>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
     d76:	4b43      	ldr	r3, [pc, #268]	; (e84 <setup+0x338>)
     d78:	3401      	adds	r4, #1
     d7a:	681b      	ldr	r3, [r3, #0]
     d7c:	b2e4      	uxtb	r4, r4
     d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     d82:	46a1      	mov	r9, r4
     d84:	3301      	adds	r3, #1
     d86:	429c      	cmp	r4, r3
     d88:	f4ff af39 	bcc.w	bfe <setup+0xb2>
  Can2.begin();
     d8c:	483e      	ldr	r0, [pc, #248]	; (e88 <setup+0x33c>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     d8e:	4c3f      	ldr	r4, [pc, #252]	; (e8c <setup+0x340>)
     d90:	f7ff fe0a 	bl	9a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can2.setBaudRate(250000);
     d94:	2200      	movs	r2, #0
     d96:	493e      	ldr	r1, [pc, #248]	; (e90 <setup+0x344>)
     d98:	483b      	ldr	r0, [pc, #236]	; (e88 <setup+0x33c>)
     d9a:	f7ff fa37 	bl	20c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
     d9e:	6823      	ldr	r3, [r4, #0]
     da0:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     da4:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     da6:	6823      	ldr	r3, [r4, #0]
     da8:	01df      	lsls	r7, r3, #7
     daa:	d5fc      	bpl.n	da6 <setup+0x25a>
     dac:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
     dae:	6825      	ldr	r5, [r4, #0]
     db0:	f7ff fb3e 	bl	430 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
     db4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ( fifo_was_cleared ) enableFIFO();
     db8:	00ae      	lsls	r6, r5, #2
  FLEXCANb_IFLAG2(_bus) = value >> 32;
     dba:	62e2      	str	r2, [r4, #44]	; 0x2c
  FLEXCANb_IFLAG1(_bus) = value;
     dbc:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
     dbe:	6823      	ldr	r3, [r4, #0]
     dc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     dc4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
     dc6:	6823      	ldr	r3, [r4, #0]
     dc8:	f043 030f 	orr.w	r3, r3, #15
     dcc:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
     dce:	f100 83d3 	bmi.w	1578 <setup+0xa2c>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     dd2:	4c2e      	ldr	r4, [pc, #184]	; (e8c <setup+0x340>)
     dd4:	6823      	ldr	r3, [r4, #0]
     dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     dda:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     ddc:	6823      	ldr	r3, [r4, #0]
     dde:	01dd      	lsls	r5, r3, #7
     de0:	d4fc      	bmi.n	ddc <setup+0x290>
  Can2.enableFIFO();
     de2:	2001      	movs	r0, #1
     de4:	f7ff fb24 	bl	430 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
     de8:	6823      	ldr	r3, [r4, #0]
     dea:	0098      	lsls	r0, r3, #2
     dec:	d50a      	bpl.n	e04 <setup+0x2b8>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
     dee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     df0:	0699      	lsls	r1, r3, #26
     df2:	d407      	bmi.n	e04 <setup+0x2b8>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
     df4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
     dfa:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
     dfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     dfe:	f043 0320 	orr.w	r3, r3, #32
     e02:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     e04:	4d21      	ldr	r5, [pc, #132]	; (e8c <setup+0x340>)
  _mainHandler = handler;
     e06:	4a23      	ldr	r2, [pc, #140]	; (e94 <setup+0x348>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     e08:	682b      	ldr	r3, [r5, #0]
  _mainHandler = handler;
     e0a:	4923      	ldr	r1, [pc, #140]	; (e98 <setup+0x34c>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     e0c:	f013 5900 	ands.w	r9, r3, #536870912	; 0x20000000
  _mainHandler = handler;
     e10:	f8c2 16c4 	str.w	r1, [r2, #1732]	; 0x6c4
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
     e14:	f040 8287 	bne.w	1326 <setup+0x7da>
     e18:	211a      	movs	r1, #26
     e1a:	4820      	ldr	r0, [pc, #128]	; (e9c <setup+0x350>)
     e1c:	f004 f91e 	bl	505c <usb_serial_write>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
     e20:	464c      	mov	r4, r9
     e22:	682b      	ldr	r3, [r5, #0]
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
     e24:	4e1e      	ldr	r6, [pc, #120]	; (ea0 <setup+0x354>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
     e26:	4d1f      	ldr	r5, [pc, #124]	; (ea4 <setup+0x358>)
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
     e28:	4f1f      	ldr	r7, [pc, #124]	; (ea8 <setup+0x35c>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
     e2a:	eb04 0805 	add.w	r8, r4, r5
     e2e:	ea4f 1808 	mov.w	r8, r8, lsl #4
     e32:	f8d8 3000 	ldr.w	r3, [r8]
     e36:	f3c3 6303 	ubfx	r3, r3, #24, #4
     e3a:	2b0e      	cmp	r3, #14
     e3c:	f200 80c4 	bhi.w	fc8 <setup+0x47c>
     e40:	e8df f013 	tbh	[pc, r3, lsl #1]
     e44:	024d025f 	.word	0x024d025f
     e48:	00c2023b 	.word	0x00c2023b
     e4c:	00c20220 	.word	0x00c20220
     e50:	00c2020e 	.word	0x00c2020e
     e54:	01b901fc 	.word	0x01b901fc
     e58:	00c201a7 	.word	0x00c201a7
     e5c:	00c20034 	.word	0x00c20034
     e60:	0195      	.short	0x0195
     e62:	bf00      	nop
     e64:	20000760 	.word	0x20000760
     e68:	20000a58 	.word	0x20000a58
     e6c:	20000820 	.word	0x20000820
     e70:	20000840 	.word	0x20000840
     e74:	20000868 	.word	0x20000868
     e78:	2000079c 	.word	0x2000079c
     e7c:	20000870 	.word	0x20000870
     e80:	20000304 	.word	0x20000304
     e84:	401d0000 	.word	0x401d0000
     e88:	2000375c 	.word	0x2000375c
     e8c:	401d4000 	.word	0x401d4000
     e90:	0003d090 	.word	0x0003d090
     e94:	2000575c 	.word	0x2000575c
     e98:	00002359 	.word	0x00002359
     e9c:	20000890 	.word	0x20000890
     ea0:	401d408c 	.word	0x401d408c
     ea4:	0401d408 	.word	0x0401d408
     ea8:	bfe2bf80 	.word	0xbfe2bf80
     eac:	2104      	movs	r1, #4
     eae:	48cb      	ldr	r0, [pc, #812]	; (11dc <setup+0x690>)
     eb0:	f004 f8d4 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     eb4:	2300      	movs	r3, #0
     eb6:	4649      	mov	r1, r9
     eb8:	220a      	movs	r2, #10
     eba:	48c9      	ldr	r0, [pc, #804]	; (11e0 <setup+0x694>)
     ebc:	f002 fe66 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ec0:	211d      	movs	r1, #29
     ec2:	48c8      	ldr	r0, [pc, #800]	; (11e4 <setup+0x698>)
     ec4:	f004 f8ca 	bl	505c <usb_serial_write>
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
     ec8:	f8d8 3000 	ldr.w	r3, [r8]
     ecc:	2110      	movs	r1, #16
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
     ece:	029b      	lsls	r3, r3, #10
     ed0:	f140 835b 	bpl.w	158a <setup+0xa3e>
     ed4:	48c4      	ldr	r0, [pc, #784]	; (11e8 <setup+0x69c>)
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
     ed6:	eb08 0a07 	add.w	sl, r8, r7
     eda:	f004 f8bf 	bl	505c <usb_serial_write>
     ede:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
     ee2:	f8d8 3004 	ldr.w	r3, [r8, #4]
     ee6:	f023 4860 	bic.w	r8, r3, #3758096384	; 0xe0000000
     eea:	2107      	movs	r1, #7
     eec:	48bf      	ldr	r0, [pc, #764]	; (11ec <setup+0x6a0>)
     eee:	f004 f8b5 	bl	505c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     ef2:	2300      	movs	r3, #0
     ef4:	2210      	movs	r2, #16
     ef6:	4641      	mov	r1, r8
     ef8:	48b9      	ldr	r0, [pc, #740]	; (11e0 <setup+0x694>)
     efa:	f002 fe47 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     efe:	2101      	movs	r1, #1
     f00:	48bb      	ldr	r0, [pc, #748]	; (11f0 <setup+0x6a4>)
     f02:	f004 f8ab 	bl	505c <usb_serial_write>
     f06:	210a      	movs	r1, #10
     f08:	48ba      	ldr	r0, [pc, #744]	; (11f4 <setup+0x6a8>)
     f0a:	f004 f8a7 	bl	505c <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     f0e:	2300      	movs	r3, #0
     f10:	2210      	movs	r2, #16
     f12:	ea4f 6119 	mov.w	r1, r9, lsr #24
     f16:	48b2      	ldr	r0, [pc, #712]	; (11e0 <setup+0x694>)
     f18:	f002 fe38 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f1c:	2101      	movs	r1, #1
     f1e:	48b6      	ldr	r0, [pc, #728]	; (11f8 <setup+0x6ac>)
     f20:	f004 f89c 	bl	505c <usb_serial_write>
     f24:	2300      	movs	r3, #0
     f26:	2210      	movs	r2, #16
     f28:	f3c9 4107 	ubfx	r1, r9, #16, #8
     f2c:	48ac      	ldr	r0, [pc, #688]	; (11e0 <setup+0x694>)
     f2e:	f002 fe2d 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f32:	2101      	movs	r1, #1
     f34:	48b0      	ldr	r0, [pc, #704]	; (11f8 <setup+0x6ac>)
     f36:	f004 f891 	bl	505c <usb_serial_write>
     f3a:	2300      	movs	r3, #0
     f3c:	2210      	movs	r2, #16
     f3e:	f3c9 2107 	ubfx	r1, r9, #8, #8
     f42:	48a7      	ldr	r0, [pc, #668]	; (11e0 <setup+0x694>)
     f44:	f002 fe22 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f48:	2101      	movs	r1, #1
     f4a:	48ab      	ldr	r0, [pc, #684]	; (11f8 <setup+0x6ac>)
     f4c:	f004 f886 	bl	505c <usb_serial_write>
     f50:	2300      	movs	r3, #0
     f52:	2210      	movs	r2, #16
     f54:	fa5f f189 	uxtb.w	r1, r9
     f58:	48a1      	ldr	r0, [pc, #644]	; (11e0 <setup+0x694>)
     f5a:	f002 fe17 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
     f5e:	f85a 8006 	ldr.w	r8, [sl, r6]
     f62:	2101      	movs	r1, #1
     f64:	48a4      	ldr	r0, [pc, #656]	; (11f8 <setup+0x6ac>)
     f66:	f004 f879 	bl	505c <usb_serial_write>
     f6a:	2300      	movs	r3, #0
     f6c:	2210      	movs	r2, #16
     f6e:	ea4f 6118 	mov.w	r1, r8, lsr #24
     f72:	489b      	ldr	r0, [pc, #620]	; (11e0 <setup+0x694>)
     f74:	f002 fe0a 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f78:	2101      	movs	r1, #1
     f7a:	489f      	ldr	r0, [pc, #636]	; (11f8 <setup+0x6ac>)
     f7c:	f004 f86e 	bl	505c <usb_serial_write>
     f80:	2300      	movs	r3, #0
     f82:	2210      	movs	r2, #16
     f84:	f3c8 4107 	ubfx	r1, r8, #16, #8
     f88:	4895      	ldr	r0, [pc, #596]	; (11e0 <setup+0x694>)
     f8a:	f002 fdff 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     f8e:	2101      	movs	r1, #1
     f90:	4899      	ldr	r0, [pc, #612]	; (11f8 <setup+0x6ac>)
     f92:	f004 f863 	bl	505c <usb_serial_write>
     f96:	2300      	movs	r3, #0
     f98:	2210      	movs	r2, #16
     f9a:	f3c8 2107 	ubfx	r1, r8, #8, #8
     f9e:	4890      	ldr	r0, [pc, #576]	; (11e0 <setup+0x694>)
     fa0:	f002 fdf4 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     fa4:	2101      	movs	r1, #1
     fa6:	4894      	ldr	r0, [pc, #592]	; (11f8 <setup+0x6ac>)
     fa8:	f004 f858 	bl	505c <usb_serial_write>
     fac:	2300      	movs	r3, #0
     fae:	fa5f f188 	uxtb.w	r1, r8
     fb2:	2210      	movs	r2, #16
     fb4:	488a      	ldr	r0, [pc, #552]	; (11e0 <setup+0x694>)
     fb6:	f002 fde9 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     fba:	2101      	movs	r1, #1
     fbc:	488c      	ldr	r0, [pc, #560]	; (11f0 <setup+0x6a4>)
     fbe:	f004 f84d 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     fc2:	4887      	ldr	r0, [pc, #540]	; (11e0 <setup+0x694>)
     fc4:	f002 fdd4 	bl	3b70 <Print::println()>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
     fc8:	4b8c      	ldr	r3, [pc, #560]	; (11fc <setup+0x6b0>)
     fca:	3401      	adds	r4, #1
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	b2e4      	uxtb	r4, r4
     fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     fd4:	46a1      	mov	r9, r4
     fd6:	3301      	adds	r3, #1
     fd8:	429c      	cmp	r4, r3
     fda:	f4ff af26 	bcc.w	e2a <setup+0x2de>
  pinMode(GREEN_LED,OUTPUT);
     fde:	2101      	movs	r1, #1
     fe0:	2015      	movs	r0, #21
     fe2:	f002 fe65 	bl	3cb0 <pinMode>
  pinMode(RED_LED,OUTPUT);
     fe6:	2101      	movs	r1, #1
     fe8:	2003      	movs	r0, #3
  GREEN_LED_state = HIGH;
     fea:	4c85      	ldr	r4, [pc, #532]	; (1200 <setup+0x6b4>)
  pinMode(RED_LED,OUTPUT);
     fec:	f002 fe60 	bl	3cb0 <pinMode>
  pinMode(YELLOW_LED,OUTPUT);
     ff0:	2101      	movs	r1, #1
     ff2:	2014      	movs	r0, #20
     ff4:	f002 fe5c 	bl	3cb0 <pinMode>
  pinMode(BLUE_LED,OUTPUT);
     ff8:	2101      	movs	r1, #1
     ffa:	2002      	movs	r0, #2
     ffc:	f002 fe58 	bl	3cb0 <pinMode>
  GREEN_LED_state = HIGH;
    1000:	2301      	movs	r3, #1
  YELLOW_LED_state = HIGH;
    1002:	4880      	ldr	r0, [pc, #512]	; (1204 <setup+0x6b8>)
  RED_LED_state = HIGH;
    1004:	4980      	ldr	r1, [pc, #512]	; (1208 <setup+0x6bc>)
  BLUE_LED_state = HIGH;
    1006:	4a81      	ldr	r2, [pc, #516]	; (120c <setup+0x6c0>)
  GREEN_LED_state = HIGH;
    1008:	7023      	strb	r3, [r4, #0]
  YELLOW_LED_state = HIGH;
    100a:	7003      	strb	r3, [r0, #0]
  RED_LED_state = HIGH;
    100c:	700b      	strb	r3, [r1, #0]
  BLUE_LED_state = HIGH;
    100e:	7013      	strb	r3, [r2, #0]
}
    1010:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  check_led_timers();
    1014:	f7ff bba8 	b.w	768 <check_led_timers()>
    1018:	2104      	movs	r1, #4
    101a:	4870      	ldr	r0, [pc, #448]	; (11dc <setup+0x690>)
    101c:	f004 f81e 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1020:	4649      	mov	r1, r9
    1022:	2300      	movs	r3, #0
    1024:	220a      	movs	r2, #10
    1026:	486e      	ldr	r0, [pc, #440]	; (11e0 <setup+0x694>)
    1028:	f002 fdb0 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    102c:	2111      	movs	r1, #17
    102e:	4878      	ldr	r0, [pc, #480]	; (1210 <setup+0x6c4>)
    1030:	f004 f814 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1034:	486a      	ldr	r0, [pc, #424]	; (11e0 <setup+0x694>)
    1036:	f002 fd9b 	bl	3b70 <Print::println()>
    103a:	e69c      	b.n	d76 <setup+0x22a>
    103c:	2104      	movs	r1, #4
    103e:	4867      	ldr	r0, [pc, #412]	; (11dc <setup+0x690>)
    1040:	f004 f80c 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1044:	4649      	mov	r1, r9
    1046:	2300      	movs	r3, #0
    1048:	220a      	movs	r2, #10
    104a:	4865      	ldr	r0, [pc, #404]	; (11e0 <setup+0x694>)
    104c:	f002 fd9e 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1050:	2111      	movs	r1, #17
    1052:	4870      	ldr	r0, [pc, #448]	; (1214 <setup+0x6c8>)
    1054:	f004 f802 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1058:	4861      	ldr	r0, [pc, #388]	; (11e0 <setup+0x694>)
    105a:	f002 fd89 	bl	3b70 <Print::println()>
    105e:	e68a      	b.n	d76 <setup+0x22a>
    1060:	2104      	movs	r1, #4
    1062:	485e      	ldr	r0, [pc, #376]	; (11dc <setup+0x690>)
    1064:	f003 fffa 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1068:	4649      	mov	r1, r9
    106a:	2300      	movs	r3, #0
    106c:	220a      	movs	r2, #10
    106e:	485c      	ldr	r0, [pc, #368]	; (11e0 <setup+0x694>)
    1070:	f002 fd8c 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1074:	210f      	movs	r1, #15
    1076:	4868      	ldr	r0, [pc, #416]	; (1218 <setup+0x6cc>)
    1078:	f003 fff0 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    107c:	4858      	ldr	r0, [pc, #352]	; (11e0 <setup+0x694>)
    107e:	f002 fd77 	bl	3b70 <Print::println()>
    1082:	e678      	b.n	d76 <setup+0x22a>
    1084:	2104      	movs	r1, #4
    1086:	4855      	ldr	r0, [pc, #340]	; (11dc <setup+0x690>)
    1088:	f003 ffe8 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    108c:	4649      	mov	r1, r9
    108e:	2300      	movs	r3, #0
    1090:	220a      	movs	r2, #10
    1092:	4853      	ldr	r0, [pc, #332]	; (11e0 <setup+0x694>)
    1094:	f002 fd7a 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1098:	2112      	movs	r1, #18
    109a:	4860      	ldr	r0, [pc, #384]	; (121c <setup+0x6d0>)
    109c:	f003 ffde 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    10a0:	484f      	ldr	r0, [pc, #316]	; (11e0 <setup+0x694>)
    10a2:	f002 fd65 	bl	3b70 <Print::println()>
    10a6:	e666      	b.n	d76 <setup+0x22a>
    10a8:	2104      	movs	r1, #4
    10aa:	484c      	ldr	r0, [pc, #304]	; (11dc <setup+0x690>)
    10ac:	f003 ffd6 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    10b0:	4649      	mov	r1, r9
    10b2:	2300      	movs	r3, #0
    10b4:	220a      	movs	r2, #10
    10b6:	484a      	ldr	r0, [pc, #296]	; (11e0 <setup+0x694>)
    10b8:	f002 fd68 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    10bc:	2111      	movs	r1, #17
    10be:	4858      	ldr	r0, [pc, #352]	; (1220 <setup+0x6d4>)
    10c0:	f003 ffcc 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    10c4:	4846      	ldr	r0, [pc, #280]	; (11e0 <setup+0x694>)
    10c6:	f002 fd53 	bl	3b70 <Print::println()>
    10ca:	e654      	b.n	d76 <setup+0x22a>
    10cc:	2104      	movs	r1, #4
    10ce:	4843      	ldr	r0, [pc, #268]	; (11dc <setup+0x690>)
    10d0:	f003 ffc4 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    10d4:	220a      	movs	r2, #10
    10d6:	4649      	mov	r1, r9
    10d8:	2300      	movs	r3, #0
    10da:	4841      	ldr	r0, [pc, #260]	; (11e0 <setup+0x694>)
    10dc:	f002 fd56 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    10e0:	210f      	movs	r1, #15
    10e2:	4850      	ldr	r0, [pc, #320]	; (1224 <setup+0x6d8>)
    10e4:	f003 ffba 	bl	505c <usb_serial_write>
          (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    10e8:	f8d8 3000 	ldr.w	r3, [r8]
    10ec:	2111      	movs	r1, #17
    10ee:	029a      	lsls	r2, r3, #10
    10f0:	bf4c      	ite	mi
    10f2:	484d      	ldrmi	r0, [pc, #308]	; (1228 <setup+0x6dc>)
    10f4:	484d      	ldrpl	r0, [pc, #308]	; (122c <setup+0x6e0>)
    10f6:	f003 ffb1 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    10fa:	4839      	ldr	r0, [pc, #228]	; (11e0 <setup+0x694>)
    10fc:	f002 fd38 	bl	3b70 <Print::println()>
    1100:	e639      	b.n	d76 <setup+0x22a>
    1102:	2104      	movs	r1, #4
    1104:	4835      	ldr	r0, [pc, #212]	; (11dc <setup+0x690>)
    1106:	f003 ffa9 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    110a:	4649      	mov	r1, r9
    110c:	2300      	movs	r3, #0
    110e:	220a      	movs	r2, #10
    1110:	4833      	ldr	r0, [pc, #204]	; (11e0 <setup+0x694>)
    1112:	f002 fd3b 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1116:	210e      	movs	r1, #14
    1118:	4845      	ldr	r0, [pc, #276]	; (1230 <setup+0x6e4>)
    111a:	f003 ff9f 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    111e:	4830      	ldr	r0, [pc, #192]	; (11e0 <setup+0x694>)
    1120:	f002 fd26 	bl	3b70 <Print::println()>
    1124:	e627      	b.n	d76 <setup+0x22a>
    1126:	2104      	movs	r1, #4
    1128:	482c      	ldr	r0, [pc, #176]	; (11dc <setup+0x690>)
    112a:	f003 ff97 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    112e:	4649      	mov	r1, r9
    1130:	2300      	movs	r3, #0
    1132:	220a      	movs	r2, #10
    1134:	482a      	ldr	r0, [pc, #168]	; (11e0 <setup+0x694>)
    1136:	f002 fd29 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    113a:	210e      	movs	r1, #14
    113c:	483d      	ldr	r0, [pc, #244]	; (1234 <setup+0x6e8>)
    113e:	f003 ff8d 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1142:	4827      	ldr	r0, [pc, #156]	; (11e0 <setup+0x694>)
    1144:	f002 fd14 	bl	3b70 <Print::println()>
    1148:	e615      	b.n	d76 <setup+0x22a>
    114a:	2104      	movs	r1, #4
    114c:	4823      	ldr	r0, [pc, #140]	; (11dc <setup+0x690>)
    114e:	f003 ff85 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1152:	4649      	mov	r1, r9
    1154:	2300      	movs	r3, #0
    1156:	220a      	movs	r2, #10
    1158:	4821      	ldr	r0, [pc, #132]	; (11e0 <setup+0x694>)
    115a:	f002 fd17 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    115e:	2112      	movs	r1, #18
    1160:	4835      	ldr	r0, [pc, #212]	; (1238 <setup+0x6ec>)
    1162:	f003 ff7b 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1166:	481e      	ldr	r0, [pc, #120]	; (11e0 <setup+0x694>)
    1168:	f002 fd02 	bl	3b70 <Print::println()>
    116c:	e603      	b.n	d76 <setup+0x22a>
    116e:	2104      	movs	r1, #4
    1170:	481a      	ldr	r0, [pc, #104]	; (11dc <setup+0x690>)
    1172:	f003 ff73 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1176:	4649      	mov	r1, r9
    1178:	2300      	movs	r3, #0
    117a:	220a      	movs	r2, #10
    117c:	4818      	ldr	r0, [pc, #96]	; (11e0 <setup+0x694>)
    117e:	f002 fd05 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1182:	2111      	movs	r1, #17
    1184:	4822      	ldr	r0, [pc, #136]	; (1210 <setup+0x6c4>)
    1186:	f003 ff69 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    118a:	4815      	ldr	r0, [pc, #84]	; (11e0 <setup+0x694>)
    118c:	f002 fcf0 	bl	3b70 <Print::println()>
    1190:	e71a      	b.n	fc8 <setup+0x47c>
    1192:	2104      	movs	r1, #4
    1194:	4811      	ldr	r0, [pc, #68]	; (11dc <setup+0x690>)
    1196:	f003 ff61 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    119a:	4649      	mov	r1, r9
    119c:	2300      	movs	r3, #0
    119e:	220a      	movs	r2, #10
    11a0:	480f      	ldr	r0, [pc, #60]	; (11e0 <setup+0x694>)
    11a2:	f002 fcf3 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    11a6:	2111      	movs	r1, #17
    11a8:	481a      	ldr	r0, [pc, #104]	; (1214 <setup+0x6c8>)
    11aa:	f003 ff57 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    11ae:	480c      	ldr	r0, [pc, #48]	; (11e0 <setup+0x694>)
    11b0:	f002 fcde 	bl	3b70 <Print::println()>
    11b4:	e708      	b.n	fc8 <setup+0x47c>
    11b6:	2104      	movs	r1, #4
    11b8:	4808      	ldr	r0, [pc, #32]	; (11dc <setup+0x690>)
    11ba:	f003 ff4f 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    11be:	4649      	mov	r1, r9
    11c0:	2300      	movs	r3, #0
    11c2:	220a      	movs	r2, #10
    11c4:	4806      	ldr	r0, [pc, #24]	; (11e0 <setup+0x694>)
    11c6:	f002 fce1 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    11ca:	210f      	movs	r1, #15
    11cc:	4812      	ldr	r0, [pc, #72]	; (1218 <setup+0x6cc>)
    11ce:	f003 ff45 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    11d2:	4803      	ldr	r0, [pc, #12]	; (11e0 <setup+0x694>)
    11d4:	f002 fccc 	bl	3b70 <Print::println()>
    11d8:	e6f6      	b.n	fc8 <setup+0x47c>
    11da:	bf00      	nop
    11dc:	20000760 	.word	0x20000760
    11e0:	20000a58 	.word	0x20000a58
    11e4:	20000820 	.word	0x20000820
    11e8:	20000840 	.word	0x20000840
    11ec:	20000868 	.word	0x20000868
    11f0:	2000079c 	.word	0x2000079c
    11f4:	20000870 	.word	0x20000870
    11f8:	20000304 	.word	0x20000304
    11fc:	401d4000 	.word	0x401d4000
    1200:	2000605b 	.word	0x2000605b
    1204:	2000605d 	.word	0x2000605d
    1208:	2000605c 	.word	0x2000605c
    120c:	2000605a 	.word	0x2000605a
    1210:	2000087c 	.word	0x2000087c
    1214:	200007d8 	.word	0x200007d8
    1218:	20000810 	.word	0x20000810
    121c:	200007fc 	.word	0x200007fc
    1220:	200007c4 	.word	0x200007c4
    1224:	2000077c 	.word	0x2000077c
    1228:	2000078c 	.word	0x2000078c
    122c:	200007a0 	.word	0x200007a0
    1230:	200007b4 	.word	0x200007b4
    1234:	200007ec 	.word	0x200007ec
    1238:	20000768 	.word	0x20000768
    123c:	2104      	movs	r1, #4
    123e:	487b      	ldr	r0, [pc, #492]	; (142c <setup+0x8e0>)
    1240:	f003 ff0c 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1244:	4649      	mov	r1, r9
    1246:	2300      	movs	r3, #0
    1248:	220a      	movs	r2, #10
    124a:	4879      	ldr	r0, [pc, #484]	; (1430 <setup+0x8e4>)
    124c:	f002 fc9e 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1250:	2112      	movs	r1, #18
    1252:	4878      	ldr	r0, [pc, #480]	; (1434 <setup+0x8e8>)
    1254:	f003 ff02 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1258:	4875      	ldr	r0, [pc, #468]	; (1430 <setup+0x8e4>)
    125a:	f002 fc89 	bl	3b70 <Print::println()>
    125e:	e6b3      	b.n	fc8 <setup+0x47c>
    1260:	2104      	movs	r1, #4
    1262:	4872      	ldr	r0, [pc, #456]	; (142c <setup+0x8e0>)
    1264:	f003 fefa 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1268:	4649      	mov	r1, r9
    126a:	2300      	movs	r3, #0
    126c:	220a      	movs	r2, #10
    126e:	4870      	ldr	r0, [pc, #448]	; (1430 <setup+0x8e4>)
    1270:	f002 fc8c 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1274:	2111      	movs	r1, #17
    1276:	4870      	ldr	r0, [pc, #448]	; (1438 <setup+0x8ec>)
    1278:	f003 fef0 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    127c:	486c      	ldr	r0, [pc, #432]	; (1430 <setup+0x8e4>)
    127e:	f002 fc77 	bl	3b70 <Print::println()>
    1282:	e6a1      	b.n	fc8 <setup+0x47c>
    1284:	2104      	movs	r1, #4
    1286:	4869      	ldr	r0, [pc, #420]	; (142c <setup+0x8e0>)
    1288:	f003 fee8 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    128c:	220a      	movs	r2, #10
    128e:	4649      	mov	r1, r9
    1290:	2300      	movs	r3, #0
    1292:	4867      	ldr	r0, [pc, #412]	; (1430 <setup+0x8e4>)
    1294:	f002 fc7a 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1298:	210f      	movs	r1, #15
    129a:	4868      	ldr	r0, [pc, #416]	; (143c <setup+0x8f0>)
    129c:	f003 fede 	bl	505c <usb_serial_write>
    12a0:	f8d8 3000 	ldr.w	r3, [r8]
    12a4:	2111      	movs	r1, #17
    12a6:	029a      	lsls	r2, r3, #10
    12a8:	bf4c      	ite	mi
    12aa:	4865      	ldrmi	r0, [pc, #404]	; (1440 <setup+0x8f4>)
    12ac:	4865      	ldrpl	r0, [pc, #404]	; (1444 <setup+0x8f8>)
    12ae:	f003 fed5 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    12b2:	485f      	ldr	r0, [pc, #380]	; (1430 <setup+0x8e4>)
    12b4:	f002 fc5c 	bl	3b70 <Print::println()>
    12b8:	e686      	b.n	fc8 <setup+0x47c>
    12ba:	2104      	movs	r1, #4
    12bc:	485b      	ldr	r0, [pc, #364]	; (142c <setup+0x8e0>)
    12be:	f003 fecd 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    12c2:	4649      	mov	r1, r9
    12c4:	2300      	movs	r3, #0
    12c6:	220a      	movs	r2, #10
    12c8:	4859      	ldr	r0, [pc, #356]	; (1430 <setup+0x8e4>)
    12ca:	f002 fc5f 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    12ce:	210e      	movs	r1, #14
    12d0:	485d      	ldr	r0, [pc, #372]	; (1448 <setup+0x8fc>)
    12d2:	f003 fec3 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    12d6:	4856      	ldr	r0, [pc, #344]	; (1430 <setup+0x8e4>)
    12d8:	f002 fc4a 	bl	3b70 <Print::println()>
    12dc:	e674      	b.n	fc8 <setup+0x47c>
    12de:	2104      	movs	r1, #4
    12e0:	4852      	ldr	r0, [pc, #328]	; (142c <setup+0x8e0>)
    12e2:	f003 febb 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    12e6:	4649      	mov	r1, r9
    12e8:	2300      	movs	r3, #0
    12ea:	220a      	movs	r2, #10
    12ec:	4850      	ldr	r0, [pc, #320]	; (1430 <setup+0x8e4>)
    12ee:	f002 fc4d 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    12f2:	210e      	movs	r1, #14
    12f4:	4855      	ldr	r0, [pc, #340]	; (144c <setup+0x900>)
    12f6:	f003 feb1 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    12fa:	484d      	ldr	r0, [pc, #308]	; (1430 <setup+0x8e4>)
    12fc:	f002 fc38 	bl	3b70 <Print::println()>
    1300:	e662      	b.n	fc8 <setup+0x47c>
    1302:	2104      	movs	r1, #4
    1304:	4849      	ldr	r0, [pc, #292]	; (142c <setup+0x8e0>)
    1306:	f003 fea9 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    130a:	4649      	mov	r1, r9
    130c:	2300      	movs	r3, #0
    130e:	220a      	movs	r2, #10
    1310:	4847      	ldr	r0, [pc, #284]	; (1430 <setup+0x8e4>)
    1312:	f002 fc3b 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1316:	2112      	movs	r1, #18
    1318:	484d      	ldr	r0, [pc, #308]	; (1450 <setup+0x904>)
    131a:	f003 fe9f 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    131e:	4844      	ldr	r0, [pc, #272]	; (1430 <setup+0x8e4>)
    1320:	f002 fc26 	bl	3b70 <Print::println()>
    1324:	e650      	b.n	fc8 <setup+0x47c>
    1326:	2111      	movs	r1, #17
    1328:	484a      	ldr	r0, [pc, #296]	; (1454 <setup+0x908>)
    132a:	f003 fe97 	bl	505c <usb_serial_write>
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    132e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1330:	069a      	lsls	r2, r3, #26
    1332:	f100 8429 	bmi.w	1b88 <setup+0x103c>
    1336:	2112      	movs	r1, #18
    1338:	4847      	ldr	r0, [pc, #284]	; (1458 <setup+0x90c>)
    133a:	f003 fe8f 	bl	505c <usb_serial_write>
    133e:	483c      	ldr	r0, [pc, #240]	; (1430 <setup+0x8e4>)
    1340:	f002 fc16 	bl	3b70 <Print::println()>
    1344:	2116      	movs	r1, #22
    1346:	4845      	ldr	r0, [pc, #276]	; (145c <setup+0x910>)
    1348:	f003 fe88 	bl	505c <usb_serial_write>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    134c:	4a44      	ldr	r2, [pc, #272]	; (1460 <setup+0x914>)
    134e:	6814      	ldr	r4, [r2, #0]
    1350:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    1352:	6813      	ldr	r3, [r2, #0]
    1354:	6b52      	ldr	r2, [r2, #52]	; 0x34
    1356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    135a:	f3c2 6203 	ubfx	r2, r2, #24, #4
    135e:	3301      	adds	r3, #1
    1360:	3204      	adds	r2, #4
    1362:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    1366:	f0c0 8418 	bcc.w	1b9a <setup+0x104e>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    136a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    136e:	f3c1 6103 	ubfx	r1, r1, #24, #4
    1372:	3c05      	subs	r4, #5
    1374:	3101      	adds	r1, #1
    1376:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    137a:	b2e5      	uxtb	r5, r4
    137c:	4e38      	ldr	r6, [pc, #224]	; (1460 <setup+0x914>)
	size_t print(int n)				{ return print((long)n); }
    137e:	482c      	ldr	r0, [pc, #176]	; (1430 <setup+0x8e4>)
    1380:	6831      	ldr	r1, [r6, #0]
    1382:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    1386:	3101      	adds	r1, #1
    1388:	1b49      	subs	r1, r1, r5
    138a:	b2c9      	uxtb	r1, r1
    138c:	2920      	cmp	r1, #32
    138e:	bfa8      	it	ge
    1390:	2120      	movge	r1, #32
    1392:	f002 fbe1 	bl	3b58 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
    1396:	4826      	ldr	r0, [pc, #152]	; (1430 <setup+0x8e4>)
    1398:	f002 fbea 	bl	3b70 <Print::println()>
    139c:	2116      	movs	r1, #22
    139e:	4831      	ldr	r0, [pc, #196]	; (1464 <setup+0x918>)
    13a0:	f003 fe5c 	bl	505c <usb_serial_write>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    13a4:	6833      	ldr	r3, [r6, #0]
    13a6:	6b72      	ldr	r2, [r6, #52]	; 0x34
    13a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    13ac:	f3c2 6203 	ubfx	r2, r2, #24, #4
    13b0:	3301      	adds	r3, #1
    13b2:	3204      	adds	r2, #4
    13b4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    13b8:	d201      	bcs.n	13be <setup+0x872>
    13ba:	2400      	movs	r4, #0
    13bc:	4625      	mov	r5, r4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    13be:	2300      	movs	r3, #0
    13c0:	4621      	mov	r1, r4
    13c2:	220a      	movs	r2, #10
    13c4:	481a      	ldr	r0, [pc, #104]	; (1430 <setup+0x8e4>)
    13c6:	f002 fbe1 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned long n)			{ return print(n) + println(); }
    13ca:	4819      	ldr	r0, [pc, #100]	; (1430 <setup+0x8e4>)
    13cc:	f002 fbd0 	bl	3b70 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    13d0:	4b23      	ldr	r3, [pc, #140]	; (1460 <setup+0x914>)
    13d2:	681c      	ldr	r4, [r3, #0]
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    13da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    13de:	3401      	adds	r4, #1
    13e0:	3301      	adds	r3, #1
    13e2:	1b64      	subs	r4, r4, r5
    13e4:	b2e4      	uxtb	r4, r4
    13e6:	42a3      	cmp	r3, r4
    13e8:	f67f adf9 	bls.w	fde <setup+0x492>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    13ec:	4d1e      	ldr	r5, [pc, #120]	; (1468 <setup+0x91c>)
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    13ee:	4e1f      	ldr	r6, [pc, #124]	; (146c <setup+0x920>)
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    13f0:	4f1f      	ldr	r7, [pc, #124]	; (1470 <setup+0x924>)
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    13f2:	eb04 0805 	add.w	r8, r4, r5
    13f6:	ea4f 1808 	mov.w	r8, r8, lsl #4
    13fa:	f8d8 3000 	ldr.w	r3, [r8]
    13fe:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1402:	2b0e      	cmp	r3, #14
    1404:	f200 82df 	bhi.w	19c6 <setup+0xe7a>
    1408:	e8df f013 	tbh	[pc, r3, lsl #1]
    140c:	033a034c 	.word	0x033a034c
    1410:	02dd0328 	.word	0x02dd0328
    1414:	02dd030d 	.word	0x02dd030d
    1418:	02dd039a 	.word	0x02dd039a
    141c:	03ac035e 	.word	0x03ac035e
    1420:	02dd02fb 	.word	0x02dd02fb
    1424:	02dd0250 	.word	0x02dd0250
    1428:	02e9      	.short	0x02e9
    142a:	bf00      	nop
    142c:	20000760 	.word	0x20000760
    1430:	20000a58 	.word	0x20000a58
    1434:	200007fc 	.word	0x200007fc
    1438:	200007c4 	.word	0x200007c4
    143c:	2000077c 	.word	0x2000077c
    1440:	2000078c 	.word	0x2000078c
    1444:	200007a0 	.word	0x200007a0
    1448:	200007b4 	.word	0x200007b4
    144c:	200007ec 	.word	0x200007ec
    1450:	20000768 	.word	0x20000768
    1454:	200006f4 	.word	0x200006f4
    1458:	2000071c 	.word	0x2000071c
    145c:	20000730 	.word	0x20000730
    1460:	401d4000 	.word	0x401d4000
    1464:	20000748 	.word	0x20000748
    1468:	0401d408 	.word	0x0401d408
    146c:	401d408c 	.word	0x401d408c
    1470:	bfe2bf80 	.word	0xbfe2bf80
    1474:	2111      	movs	r1, #17
    1476:	48bd      	ldr	r0, [pc, #756]	; (176c <setup+0xc20>)
    1478:	f003 fdf0 	bl	505c <usb_serial_write>
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    147c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    147e:	069a      	lsls	r2, r3, #26
    1480:	f100 820c 	bmi.w	189c <setup+0xd50>
    1484:	2112      	movs	r1, #18
    1486:	48ba      	ldr	r0, [pc, #744]	; (1770 <setup+0xc24>)
    1488:	f003 fde8 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    148c:	48b9      	ldr	r0, [pc, #740]	; (1774 <setup+0xc28>)
    148e:	f002 fb6f 	bl	3b70 <Print::println()>
    1492:	2116      	movs	r1, #22
    1494:	48b8      	ldr	r0, [pc, #736]	; (1778 <setup+0xc2c>)
    1496:	f003 fde1 	bl	505c <usb_serial_write>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    149a:	4ab8      	ldr	r2, [pc, #736]	; (177c <setup+0xc30>)
    149c:	6814      	ldr	r4, [r2, #0]
    149e:	6b51      	ldr	r1, [r2, #52]	; 0x34
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    14a0:	6813      	ldr	r3, [r2, #0]
    14a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
    14a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    14a8:	f3c2 6203 	ubfx	r2, r2, #24, #4
    14ac:	3301      	adds	r3, #1
    14ae:	3204      	adds	r2, #4
    14b0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    14b4:	f0c0 8375 	bcc.w	1ba2 <setup+0x1056>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    14b8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    14bc:	f3c1 6103 	ubfx	r1, r1, #24, #4
    14c0:	3c05      	subs	r4, #5
    14c2:	3101      	adds	r1, #1
    14c4:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    14c8:	b2e5      	uxtb	r5, r4
    14ca:	4eac      	ldr	r6, [pc, #688]	; (177c <setup+0xc30>)
	size_t print(int n)				{ return print((long)n); }
    14cc:	48a9      	ldr	r0, [pc, #676]	; (1774 <setup+0xc28>)
    14ce:	6831      	ldr	r1, [r6, #0]
    14d0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    14d4:	3101      	adds	r1, #1
    14d6:	1b49      	subs	r1, r1, r5
    14d8:	b2c9      	uxtb	r1, r1
    14da:	2920      	cmp	r1, #32
    14dc:	bfa8      	it	ge
    14de:	2120      	movge	r1, #32
    14e0:	f002 fb3a 	bl	3b58 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    14e4:	48a3      	ldr	r0, [pc, #652]	; (1774 <setup+0xc28>)
    14e6:	f002 fb43 	bl	3b70 <Print::println()>
    14ea:	2116      	movs	r1, #22
    14ec:	48a4      	ldr	r0, [pc, #656]	; (1780 <setup+0xc34>)
    14ee:	f003 fdb5 	bl	505c <usb_serial_write>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    14f2:	6833      	ldr	r3, [r6, #0]
    14f4:	6b72      	ldr	r2, [r6, #52]	; 0x34
    14f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    14fa:	f3c2 6203 	ubfx	r2, r2, #24, #4
    14fe:	3301      	adds	r3, #1
    1500:	3204      	adds	r2, #4
    1502:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    1506:	d201      	bcs.n	150c <setup+0x9c0>
    1508:	2400      	movs	r4, #0
    150a:	4625      	mov	r5, r4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    150c:	2300      	movs	r3, #0
    150e:	4621      	mov	r1, r4
    1510:	220a      	movs	r2, #10
    1512:	4898      	ldr	r0, [pc, #608]	; (1774 <setup+0xc28>)
    1514:	f002 fb3a 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1518:	4896      	ldr	r0, [pc, #600]	; (1774 <setup+0xc28>)
    151a:	f002 fb29 	bl	3b70 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    151e:	4b97      	ldr	r3, [pc, #604]	; (177c <setup+0xc30>)
    1520:	681c      	ldr	r4, [r3, #0]
    1522:	681b      	ldr	r3, [r3, #0]
    1524:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    1528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    152c:	3401      	adds	r4, #1
    152e:	3301      	adds	r3, #1
    1530:	1b64      	subs	r4, r4, r5
    1532:	b2e4      	uxtb	r4, r4
    1534:	42a3      	cmp	r3, r4
    1536:	f67f ac29 	bls.w	d8c <setup+0x240>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    153a:	4d92      	ldr	r5, [pc, #584]	; (1784 <setup+0xc38>)
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    153c:	4e92      	ldr	r6, [pc, #584]	; (1788 <setup+0xc3c>)
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    153e:	4f93      	ldr	r7, [pc, #588]	; (178c <setup+0xc40>)
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    1540:	eb04 0805 	add.w	r8, r4, r5
    1544:	ea4f 1808 	mov.w	r8, r8, lsl #4
    1548:	f8d8 3000 	ldr.w	r3, [r8]
    154c:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1550:	2b0e      	cmp	r3, #14
    1552:	f200 80bf 	bhi.w	16d4 <setup+0xb88>
    1556:	e8df f013 	tbh	[pc, r3, lsl #1]
    155a:	0159      	.short	0x0159
    155c:	01350147 	.word	0x01350147
    1560:	00ed00bd 	.word	0x00ed00bd
    1564:	017d00bd 	.word	0x017d00bd
    1568:	016b00bd 	.word	0x016b00bd
    156c:	00db018f 	.word	0x00db018f
    1570:	003000bd 	.word	0x003000bd
    1574:	00c900bd 	.word	0x00c900bd
  if ( fifo_was_cleared ) enableFIFO();
    1578:	2001      	movs	r0, #1
    157a:	f7fe ff59 	bl	430 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
    157e:	e428      	b.n	dd2 <setup+0x286>
    1580:	2001      	movs	r0, #1
    1582:	f7ff f823 	bl	5cc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
    1586:	f7ff bb0e 	b.w	ba6 <setup+0x5a>
    158a:	4881      	ldr	r0, [pc, #516]	; (1790 <setup+0xc44>)
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    158c:	eb08 0a07 	add.w	sl, r8, r7
    1590:	f003 fd64 	bl	505c <usb_serial_write>
    1594:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1598:	f8d8 3004 	ldr.w	r3, [r8, #4]
          if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    159c:	f3c3 488a 	ubfx	r8, r3, #18, #11
    15a0:	e4a3      	b.n	eea <setup+0x39e>
    15a2:	487b      	ldr	r0, [pc, #492]	; (1790 <setup+0xc44>)
    15a4:	f003 fd5a 	bl	505c <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    15a8:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    15ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    15b0:	44b8      	add	r8, r7
          if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    15b2:	f3c3 4a8a 	ubfx	sl, r3, #18, #11
    15b6:	f7ff bb6f 	b.w	c98 <setup+0x14c>
    15ba:	2104      	movs	r1, #4
    15bc:	4875      	ldr	r0, [pc, #468]	; (1794 <setup+0xc48>)
    15be:	f003 fd4d 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    15c2:	2300      	movs	r3, #0
    15c4:	220a      	movs	r2, #10
    15c6:	4621      	mov	r1, r4
    15c8:	486a      	ldr	r0, [pc, #424]	; (1774 <setup+0xc28>)
    15ca:	f002 fadf 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    15ce:	211d      	movs	r1, #29
    15d0:	4871      	ldr	r0, [pc, #452]	; (1798 <setup+0xc4c>)
    15d2:	f003 fd43 	bl	505c <usb_serial_write>
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    15d6:	f8d8 3000 	ldr.w	r3, [r8]
    15da:	2110      	movs	r1, #16
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    15dc:	0298      	lsls	r0, r3, #10
    15de:	f140 82ee 	bpl.w	1bbe <setup+0x1072>
    15e2:	486e      	ldr	r0, [pc, #440]	; (179c <setup+0xc50>)
    15e4:	f003 fd3a 	bl	505c <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    15e8:	f8d8 9008 	ldr.w	r9, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    15ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    15f0:	44b8      	add	r8, r7
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    15f2:	f023 4a60 	bic.w	sl, r3, #3758096384	; 0xe0000000
    15f6:	2107      	movs	r1, #7
    15f8:	4869      	ldr	r0, [pc, #420]	; (17a0 <setup+0xc54>)
    15fa:	f003 fd2f 	bl	505c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    15fe:	2300      	movs	r3, #0
    1600:	2210      	movs	r2, #16
    1602:	4651      	mov	r1, sl
    1604:	485b      	ldr	r0, [pc, #364]	; (1774 <setup+0xc28>)
    1606:	f002 fac1 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    160a:	2101      	movs	r1, #1
    160c:	4865      	ldr	r0, [pc, #404]	; (17a4 <setup+0xc58>)
    160e:	f003 fd25 	bl	505c <usb_serial_write>
    1612:	210a      	movs	r1, #10
    1614:	4864      	ldr	r0, [pc, #400]	; (17a8 <setup+0xc5c>)
    1616:	f003 fd21 	bl	505c <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    161a:	2300      	movs	r3, #0
    161c:	2210      	movs	r2, #16
    161e:	ea4f 6119 	mov.w	r1, r9, lsr #24
    1622:	4854      	ldr	r0, [pc, #336]	; (1774 <setup+0xc28>)
    1624:	f002 fab2 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1628:	2101      	movs	r1, #1
    162a:	4860      	ldr	r0, [pc, #384]	; (17ac <setup+0xc60>)
    162c:	f003 fd16 	bl	505c <usb_serial_write>
    1630:	2300      	movs	r3, #0
    1632:	2210      	movs	r2, #16
    1634:	f3c9 4107 	ubfx	r1, r9, #16, #8
    1638:	484e      	ldr	r0, [pc, #312]	; (1774 <setup+0xc28>)
    163a:	f002 faa7 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    163e:	2101      	movs	r1, #1
    1640:	485a      	ldr	r0, [pc, #360]	; (17ac <setup+0xc60>)
    1642:	f003 fd0b 	bl	505c <usb_serial_write>
    1646:	2300      	movs	r3, #0
    1648:	2210      	movs	r2, #16
    164a:	f3c9 2107 	ubfx	r1, r9, #8, #8
    164e:	4849      	ldr	r0, [pc, #292]	; (1774 <setup+0xc28>)
    1650:	f002 fa9c 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1654:	2101      	movs	r1, #1
    1656:	4855      	ldr	r0, [pc, #340]	; (17ac <setup+0xc60>)
    1658:	f003 fd00 	bl	505c <usb_serial_write>
    165c:	2300      	movs	r3, #0
    165e:	2210      	movs	r2, #16
    1660:	fa5f f189 	uxtb.w	r1, r9
    1664:	4843      	ldr	r0, [pc, #268]	; (1774 <setup+0xc28>)
    1666:	f002 fa91 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    166a:	f858 8006 	ldr.w	r8, [r8, r6]
    166e:	2101      	movs	r1, #1
    1670:	484e      	ldr	r0, [pc, #312]	; (17ac <setup+0xc60>)
    1672:	f003 fcf3 	bl	505c <usb_serial_write>
    1676:	2300      	movs	r3, #0
    1678:	2210      	movs	r2, #16
    167a:	ea4f 6118 	mov.w	r1, r8, lsr #24
    167e:	483d      	ldr	r0, [pc, #244]	; (1774 <setup+0xc28>)
    1680:	f002 fa84 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1684:	2101      	movs	r1, #1
    1686:	4849      	ldr	r0, [pc, #292]	; (17ac <setup+0xc60>)
    1688:	f003 fce8 	bl	505c <usb_serial_write>
    168c:	2300      	movs	r3, #0
    168e:	2210      	movs	r2, #16
    1690:	f3c8 4107 	ubfx	r1, r8, #16, #8
    1694:	4837      	ldr	r0, [pc, #220]	; (1774 <setup+0xc28>)
    1696:	f002 fa79 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    169a:	2101      	movs	r1, #1
    169c:	4843      	ldr	r0, [pc, #268]	; (17ac <setup+0xc60>)
    169e:	f003 fcdd 	bl	505c <usb_serial_write>
    16a2:	2300      	movs	r3, #0
    16a4:	2210      	movs	r2, #16
    16a6:	f3c8 2107 	ubfx	r1, r8, #8, #8
    16aa:	4832      	ldr	r0, [pc, #200]	; (1774 <setup+0xc28>)
    16ac:	f002 fa6e 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    16b0:	2101      	movs	r1, #1
    16b2:	483e      	ldr	r0, [pc, #248]	; (17ac <setup+0xc60>)
    16b4:	f003 fcd2 	bl	505c <usb_serial_write>
    16b8:	2300      	movs	r3, #0
    16ba:	fa5f f188 	uxtb.w	r1, r8
    16be:	2210      	movs	r2, #16
    16c0:	482c      	ldr	r0, [pc, #176]	; (1774 <setup+0xc28>)
    16c2:	f002 fa63 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    16c6:	2101      	movs	r1, #1
    16c8:	4836      	ldr	r0, [pc, #216]	; (17a4 <setup+0xc58>)
    16ca:	f003 fcc7 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    16ce:	4829      	ldr	r0, [pc, #164]	; (1774 <setup+0xc28>)
    16d0:	f002 fa4e 	bl	3b70 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    16d4:	4b29      	ldr	r3, [pc, #164]	; (177c <setup+0xc30>)
    16d6:	3401      	adds	r4, #1
    16d8:	681b      	ldr	r3, [r3, #0]
    16da:	b2e4      	uxtb	r4, r4
    16dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    16e0:	3301      	adds	r3, #1
    16e2:	429c      	cmp	r4, r3
    16e4:	f4ff af2c 	bcc.w	1540 <setup+0x9f4>
    16e8:	f7ff bb50 	b.w	d8c <setup+0x240>
    16ec:	2104      	movs	r1, #4
    16ee:	4829      	ldr	r0, [pc, #164]	; (1794 <setup+0xc48>)
    16f0:	f003 fcb4 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    16f4:	2300      	movs	r3, #0
    16f6:	220a      	movs	r2, #10
    16f8:	4621      	mov	r1, r4
    16fa:	481e      	ldr	r0, [pc, #120]	; (1774 <setup+0xc28>)
    16fc:	f002 fa46 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1700:	2111      	movs	r1, #17
    1702:	482b      	ldr	r0, [pc, #172]	; (17b0 <setup+0xc64>)
    1704:	f003 fcaa 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1708:	481a      	ldr	r0, [pc, #104]	; (1774 <setup+0xc28>)
    170a:	f002 fa31 	bl	3b70 <Print::println()>
    170e:	e7e1      	b.n	16d4 <setup+0xb88>
    1710:	2104      	movs	r1, #4
    1712:	4820      	ldr	r0, [pc, #128]	; (1794 <setup+0xc48>)
    1714:	f003 fca2 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1718:	2300      	movs	r3, #0
    171a:	220a      	movs	r2, #10
    171c:	4621      	mov	r1, r4
    171e:	4815      	ldr	r0, [pc, #84]	; (1774 <setup+0xc28>)
    1720:	f002 fa34 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1724:	2111      	movs	r1, #17
    1726:	4823      	ldr	r0, [pc, #140]	; (17b4 <setup+0xc68>)
    1728:	f003 fc98 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    172c:	4811      	ldr	r0, [pc, #68]	; (1774 <setup+0xc28>)
    172e:	f002 fa1f 	bl	3b70 <Print::println()>
    1732:	e7cf      	b.n	16d4 <setup+0xb88>
    1734:	2104      	movs	r1, #4
    1736:	4817      	ldr	r0, [pc, #92]	; (1794 <setup+0xc48>)
    1738:	f003 fc90 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    173c:	220a      	movs	r2, #10
    173e:	2300      	movs	r3, #0
    1740:	4621      	mov	r1, r4
    1742:	480c      	ldr	r0, [pc, #48]	; (1774 <setup+0xc28>)
    1744:	f002 fa22 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1748:	210f      	movs	r1, #15
    174a:	481b      	ldr	r0, [pc, #108]	; (17b8 <setup+0xc6c>)
    174c:	f003 fc86 	bl	505c <usb_serial_write>
            (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    1750:	f8d8 3000 	ldr.w	r3, [r8]
    1754:	2111      	movs	r1, #17
    1756:	029b      	lsls	r3, r3, #10
    1758:	bf4c      	ite	mi
    175a:	4818      	ldrmi	r0, [pc, #96]	; (17bc <setup+0xc70>)
    175c:	4818      	ldrpl	r0, [pc, #96]	; (17c0 <setup+0xc74>)
    175e:	f003 fc7d 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1762:	4804      	ldr	r0, [pc, #16]	; (1774 <setup+0xc28>)
    1764:	f002 fa04 	bl	3b70 <Print::println()>
    1768:	e7b4      	b.n	16d4 <setup+0xb88>
    176a:	bf00      	nop
    176c:	200006f4 	.word	0x200006f4
    1770:	2000071c 	.word	0x2000071c
    1774:	20000a58 	.word	0x20000a58
    1778:	20000730 	.word	0x20000730
    177c:	401d0000 	.word	0x401d0000
    1780:	20000748 	.word	0x20000748
    1784:	0401d008 	.word	0x0401d008
    1788:	401d008c 	.word	0x401d008c
    178c:	bfe2ff80 	.word	0xbfe2ff80
    1790:	20000854 	.word	0x20000854
    1794:	20000760 	.word	0x20000760
    1798:	20000820 	.word	0x20000820
    179c:	20000840 	.word	0x20000840
    17a0:	20000868 	.word	0x20000868
    17a4:	2000079c 	.word	0x2000079c
    17a8:	20000870 	.word	0x20000870
    17ac:	20000304 	.word	0x20000304
    17b0:	2000087c 	.word	0x2000087c
    17b4:	200007d8 	.word	0x200007d8
    17b8:	2000077c 	.word	0x2000077c
    17bc:	2000078c 	.word	0x2000078c
    17c0:	200007a0 	.word	0x200007a0
    17c4:	2104      	movs	r1, #4
    17c6:	48c9      	ldr	r0, [pc, #804]	; (1aec <setup+0xfa0>)
    17c8:	f003 fc48 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    17cc:	2300      	movs	r3, #0
    17ce:	220a      	movs	r2, #10
    17d0:	4621      	mov	r1, r4
    17d2:	48c7      	ldr	r0, [pc, #796]	; (1af0 <setup+0xfa4>)
    17d4:	f002 f9da 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    17d8:	210e      	movs	r1, #14
    17da:	48c6      	ldr	r0, [pc, #792]	; (1af4 <setup+0xfa8>)
    17dc:	f003 fc3e 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    17e0:	48c3      	ldr	r0, [pc, #780]	; (1af0 <setup+0xfa4>)
    17e2:	f002 f9c5 	bl	3b70 <Print::println()>
    17e6:	e775      	b.n	16d4 <setup+0xb88>
    17e8:	2104      	movs	r1, #4
    17ea:	48c0      	ldr	r0, [pc, #768]	; (1aec <setup+0xfa0>)
    17ec:	f003 fc36 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    17f0:	2300      	movs	r3, #0
    17f2:	220a      	movs	r2, #10
    17f4:	4621      	mov	r1, r4
    17f6:	48be      	ldr	r0, [pc, #760]	; (1af0 <setup+0xfa4>)
    17f8:	f002 f9c8 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    17fc:	210e      	movs	r1, #14
    17fe:	48be      	ldr	r0, [pc, #760]	; (1af8 <setup+0xfac>)
    1800:	f003 fc2c 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1804:	48ba      	ldr	r0, [pc, #744]	; (1af0 <setup+0xfa4>)
    1806:	f002 f9b3 	bl	3b70 <Print::println()>
    180a:	e763      	b.n	16d4 <setup+0xb88>
    180c:	2104      	movs	r1, #4
    180e:	48b7      	ldr	r0, [pc, #732]	; (1aec <setup+0xfa0>)
    1810:	f003 fc24 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1814:	2300      	movs	r3, #0
    1816:	220a      	movs	r2, #10
    1818:	4621      	mov	r1, r4
    181a:	48b5      	ldr	r0, [pc, #724]	; (1af0 <setup+0xfa4>)
    181c:	f002 f9b6 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1820:	2112      	movs	r1, #18
    1822:	48b6      	ldr	r0, [pc, #728]	; (1afc <setup+0xfb0>)
    1824:	f003 fc1a 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1828:	48b1      	ldr	r0, [pc, #708]	; (1af0 <setup+0xfa4>)
    182a:	f002 f9a1 	bl	3b70 <Print::println()>
    182e:	e751      	b.n	16d4 <setup+0xb88>
    1830:	2104      	movs	r1, #4
    1832:	48ae      	ldr	r0, [pc, #696]	; (1aec <setup+0xfa0>)
    1834:	f003 fc12 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1838:	2300      	movs	r3, #0
    183a:	220a      	movs	r2, #10
    183c:	4621      	mov	r1, r4
    183e:	48ac      	ldr	r0, [pc, #688]	; (1af0 <setup+0xfa4>)
    1840:	f002 f9a4 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1844:	2112      	movs	r1, #18
    1846:	48ae      	ldr	r0, [pc, #696]	; (1b00 <setup+0xfb4>)
    1848:	f003 fc08 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    184c:	48a8      	ldr	r0, [pc, #672]	; (1af0 <setup+0xfa4>)
    184e:	f002 f98f 	bl	3b70 <Print::println()>
    1852:	e73f      	b.n	16d4 <setup+0xb88>
    1854:	2104      	movs	r1, #4
    1856:	48a5      	ldr	r0, [pc, #660]	; (1aec <setup+0xfa0>)
    1858:	f003 fc00 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    185c:	2300      	movs	r3, #0
    185e:	220a      	movs	r2, #10
    1860:	4621      	mov	r1, r4
    1862:	48a3      	ldr	r0, [pc, #652]	; (1af0 <setup+0xfa4>)
    1864:	f002 f992 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1868:	2111      	movs	r1, #17
    186a:	48a6      	ldr	r0, [pc, #664]	; (1b04 <setup+0xfb8>)
    186c:	f003 fbf6 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1870:	489f      	ldr	r0, [pc, #636]	; (1af0 <setup+0xfa4>)
    1872:	f002 f97d 	bl	3b70 <Print::println()>
    1876:	e72d      	b.n	16d4 <setup+0xb88>
    1878:	2104      	movs	r1, #4
    187a:	489c      	ldr	r0, [pc, #624]	; (1aec <setup+0xfa0>)
    187c:	f003 fbee 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1880:	2300      	movs	r3, #0
    1882:	220a      	movs	r2, #10
    1884:	4621      	mov	r1, r4
    1886:	489a      	ldr	r0, [pc, #616]	; (1af0 <setup+0xfa4>)
    1888:	f002 f980 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    188c:	210f      	movs	r1, #15
    188e:	489e      	ldr	r0, [pc, #632]	; (1b08 <setup+0xfbc>)
    1890:	f003 fbe4 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1894:	4896      	ldr	r0, [pc, #600]	; (1af0 <setup+0xfa4>)
    1896:	f002 f96b 	bl	3b70 <Print::println()>
    189a:	e71b      	b.n	16d4 <setup+0xb88>
    189c:	2111      	movs	r1, #17
    189e:	489b      	ldr	r0, [pc, #620]	; (1b0c <setup+0xfc0>)
    18a0:	f003 fbdc 	bl	505c <usb_serial_write>
    18a4:	4892      	ldr	r0, [pc, #584]	; (1af0 <setup+0xfa4>)
    18a6:	f002 f963 	bl	3b70 <Print::println()>
    18aa:	e5f2      	b.n	1492 <setup+0x946>
    18ac:	2104      	movs	r1, #4
    18ae:	488f      	ldr	r0, [pc, #572]	; (1aec <setup+0xfa0>)
    18b0:	f003 fbd4 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    18b4:	2300      	movs	r3, #0
    18b6:	220a      	movs	r2, #10
    18b8:	4621      	mov	r1, r4
    18ba:	488d      	ldr	r0, [pc, #564]	; (1af0 <setup+0xfa4>)
    18bc:	f002 f966 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18c0:	211d      	movs	r1, #29
    18c2:	4893      	ldr	r0, [pc, #588]	; (1b10 <setup+0xfc4>)
    18c4:	f003 fbca 	bl	505c <usb_serial_write>
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    18c8:	f8d8 3000 	ldr.w	r3, [r8]
    18cc:	2110      	movs	r1, #16
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    18ce:	0298      	lsls	r0, r3, #10
    18d0:	f140 816a 	bpl.w	1ba8 <setup+0x105c>
    18d4:	488f      	ldr	r0, [pc, #572]	; (1b14 <setup+0xfc8>)
    18d6:	f003 fbc1 	bl	505c <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    18da:	f8d8 9008 	ldr.w	r9, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    18de:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    18e2:	44b8      	add	r8, r7
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    18e4:	f023 4a60 	bic.w	sl, r3, #3758096384	; 0xe0000000
    18e8:	2107      	movs	r1, #7
    18ea:	488b      	ldr	r0, [pc, #556]	; (1b18 <setup+0xfcc>)
    18ec:	f003 fbb6 	bl	505c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    18f0:	2300      	movs	r3, #0
    18f2:	2210      	movs	r2, #16
    18f4:	4651      	mov	r1, sl
    18f6:	487e      	ldr	r0, [pc, #504]	; (1af0 <setup+0xfa4>)
    18f8:	f002 f948 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18fc:	2101      	movs	r1, #1
    18fe:	4887      	ldr	r0, [pc, #540]	; (1b1c <setup+0xfd0>)
    1900:	f003 fbac 	bl	505c <usb_serial_write>
    1904:	210a      	movs	r1, #10
    1906:	4886      	ldr	r0, [pc, #536]	; (1b20 <setup+0xfd4>)
    1908:	f003 fba8 	bl	505c <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    190c:	2300      	movs	r3, #0
    190e:	2210      	movs	r2, #16
    1910:	ea4f 6119 	mov.w	r1, r9, lsr #24
    1914:	4876      	ldr	r0, [pc, #472]	; (1af0 <setup+0xfa4>)
    1916:	f002 f939 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    191a:	2101      	movs	r1, #1
    191c:	4881      	ldr	r0, [pc, #516]	; (1b24 <setup+0xfd8>)
    191e:	f003 fb9d 	bl	505c <usb_serial_write>
    1922:	2300      	movs	r3, #0
    1924:	2210      	movs	r2, #16
    1926:	f3c9 4107 	ubfx	r1, r9, #16, #8
    192a:	4871      	ldr	r0, [pc, #452]	; (1af0 <setup+0xfa4>)
    192c:	f002 f92e 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1930:	2101      	movs	r1, #1
    1932:	487c      	ldr	r0, [pc, #496]	; (1b24 <setup+0xfd8>)
    1934:	f003 fb92 	bl	505c <usb_serial_write>
    1938:	2300      	movs	r3, #0
    193a:	2210      	movs	r2, #16
    193c:	f3c9 2107 	ubfx	r1, r9, #8, #8
    1940:	486b      	ldr	r0, [pc, #428]	; (1af0 <setup+0xfa4>)
    1942:	f002 f923 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1946:	2101      	movs	r1, #1
    1948:	4876      	ldr	r0, [pc, #472]	; (1b24 <setup+0xfd8>)
    194a:	f003 fb87 	bl	505c <usb_serial_write>
    194e:	2300      	movs	r3, #0
    1950:	2210      	movs	r2, #16
    1952:	fa5f f189 	uxtb.w	r1, r9
    1956:	4866      	ldr	r0, [pc, #408]	; (1af0 <setup+0xfa4>)
    1958:	f002 f918 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    195c:	f858 8006 	ldr.w	r8, [r8, r6]
    1960:	2101      	movs	r1, #1
    1962:	4870      	ldr	r0, [pc, #448]	; (1b24 <setup+0xfd8>)
    1964:	f003 fb7a 	bl	505c <usb_serial_write>
    1968:	2300      	movs	r3, #0
    196a:	2210      	movs	r2, #16
    196c:	ea4f 6118 	mov.w	r1, r8, lsr #24
    1970:	485f      	ldr	r0, [pc, #380]	; (1af0 <setup+0xfa4>)
    1972:	f002 f90b 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1976:	2101      	movs	r1, #1
    1978:	486a      	ldr	r0, [pc, #424]	; (1b24 <setup+0xfd8>)
    197a:	f003 fb6f 	bl	505c <usb_serial_write>
    197e:	2300      	movs	r3, #0
    1980:	2210      	movs	r2, #16
    1982:	f3c8 4107 	ubfx	r1, r8, #16, #8
    1986:	485a      	ldr	r0, [pc, #360]	; (1af0 <setup+0xfa4>)
    1988:	f002 f900 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    198c:	2101      	movs	r1, #1
    198e:	4865      	ldr	r0, [pc, #404]	; (1b24 <setup+0xfd8>)
    1990:	f003 fb64 	bl	505c <usb_serial_write>
    1994:	2300      	movs	r3, #0
    1996:	2210      	movs	r2, #16
    1998:	f3c8 2107 	ubfx	r1, r8, #8, #8
    199c:	4854      	ldr	r0, [pc, #336]	; (1af0 <setup+0xfa4>)
    199e:	f002 f8f5 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19a2:	2101      	movs	r1, #1
    19a4:	485f      	ldr	r0, [pc, #380]	; (1b24 <setup+0xfd8>)
    19a6:	f003 fb59 	bl	505c <usb_serial_write>
    19aa:	2300      	movs	r3, #0
    19ac:	fa5f f188 	uxtb.w	r1, r8
    19b0:	2210      	movs	r2, #16
    19b2:	484f      	ldr	r0, [pc, #316]	; (1af0 <setup+0xfa4>)
    19b4:	f002 f8ea 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19b8:	2101      	movs	r1, #1
    19ba:	4858      	ldr	r0, [pc, #352]	; (1b1c <setup+0xfd0>)
    19bc:	f003 fb4e 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    19c0:	484b      	ldr	r0, [pc, #300]	; (1af0 <setup+0xfa4>)
    19c2:	f002 f8d5 	bl	3b70 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    19c6:	4b58      	ldr	r3, [pc, #352]	; (1b28 <setup+0xfdc>)
    19c8:	3401      	adds	r4, #1
    19ca:	681b      	ldr	r3, [r3, #0]
    19cc:	b2e4      	uxtb	r4, r4
    19ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    19d2:	3301      	adds	r3, #1
    19d4:	429c      	cmp	r4, r3
    19d6:	f4ff ad0c 	bcc.w	13f2 <setup+0x8a6>
    19da:	f7ff bb00 	b.w	fde <setup+0x492>
    19de:	2104      	movs	r1, #4
    19e0:	4842      	ldr	r0, [pc, #264]	; (1aec <setup+0xfa0>)
    19e2:	f003 fb3b 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    19e6:	2300      	movs	r3, #0
    19e8:	220a      	movs	r2, #10
    19ea:	4621      	mov	r1, r4
    19ec:	4840      	ldr	r0, [pc, #256]	; (1af0 <setup+0xfa4>)
    19ee:	f002 f8cd 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    19f2:	2111      	movs	r1, #17
    19f4:	484d      	ldr	r0, [pc, #308]	; (1b2c <setup+0xfe0>)
    19f6:	f003 fb31 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    19fa:	483d      	ldr	r0, [pc, #244]	; (1af0 <setup+0xfa4>)
    19fc:	f002 f8b8 	bl	3b70 <Print::println()>
    1a00:	e7e1      	b.n	19c6 <setup+0xe7a>
    1a02:	2104      	movs	r1, #4
    1a04:	4839      	ldr	r0, [pc, #228]	; (1aec <setup+0xfa0>)
    1a06:	f003 fb29 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a0a:	2300      	movs	r3, #0
    1a0c:	220a      	movs	r2, #10
    1a0e:	4621      	mov	r1, r4
    1a10:	4837      	ldr	r0, [pc, #220]	; (1af0 <setup+0xfa4>)
    1a12:	f002 f8bb 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a16:	2111      	movs	r1, #17
    1a18:	4845      	ldr	r0, [pc, #276]	; (1b30 <setup+0xfe4>)
    1a1a:	f003 fb1f 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a1e:	4834      	ldr	r0, [pc, #208]	; (1af0 <setup+0xfa4>)
    1a20:	f002 f8a6 	bl	3b70 <Print::println()>
    1a24:	e7cf      	b.n	19c6 <setup+0xe7a>
    1a26:	2104      	movs	r1, #4
    1a28:	4830      	ldr	r0, [pc, #192]	; (1aec <setup+0xfa0>)
    1a2a:	f003 fb17 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a2e:	220a      	movs	r2, #10
    1a30:	2300      	movs	r3, #0
    1a32:	4621      	mov	r1, r4
    1a34:	482e      	ldr	r0, [pc, #184]	; (1af0 <setup+0xfa4>)
    1a36:	f002 f8a9 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a3a:	210f      	movs	r1, #15
    1a3c:	483d      	ldr	r0, [pc, #244]	; (1b34 <setup+0xfe8>)
    1a3e:	f003 fb0d 	bl	505c <usb_serial_write>
            (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    1a42:	f8d8 3000 	ldr.w	r3, [r8]
    1a46:	2111      	movs	r1, #17
    1a48:	029b      	lsls	r3, r3, #10
    1a4a:	bf4c      	ite	mi
    1a4c:	483a      	ldrmi	r0, [pc, #232]	; (1b38 <setup+0xfec>)
    1a4e:	483b      	ldrpl	r0, [pc, #236]	; (1b3c <setup+0xff0>)
    1a50:	f003 fb04 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a54:	4826      	ldr	r0, [pc, #152]	; (1af0 <setup+0xfa4>)
    1a56:	f002 f88b 	bl	3b70 <Print::println()>
    1a5a:	e7b4      	b.n	19c6 <setup+0xe7a>
    1a5c:	2104      	movs	r1, #4
    1a5e:	4823      	ldr	r0, [pc, #140]	; (1aec <setup+0xfa0>)
    1a60:	f003 fafc 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a64:	2300      	movs	r3, #0
    1a66:	220a      	movs	r2, #10
    1a68:	4621      	mov	r1, r4
    1a6a:	4821      	ldr	r0, [pc, #132]	; (1af0 <setup+0xfa4>)
    1a6c:	f002 f88e 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a70:	210e      	movs	r1, #14
    1a72:	4820      	ldr	r0, [pc, #128]	; (1af4 <setup+0xfa8>)
    1a74:	f003 faf2 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a78:	481d      	ldr	r0, [pc, #116]	; (1af0 <setup+0xfa4>)
    1a7a:	f002 f879 	bl	3b70 <Print::println()>
    1a7e:	e7a2      	b.n	19c6 <setup+0xe7a>
    1a80:	2104      	movs	r1, #4
    1a82:	481a      	ldr	r0, [pc, #104]	; (1aec <setup+0xfa0>)
    1a84:	f003 faea 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a88:	2300      	movs	r3, #0
    1a8a:	220a      	movs	r2, #10
    1a8c:	4621      	mov	r1, r4
    1a8e:	4818      	ldr	r0, [pc, #96]	; (1af0 <setup+0xfa4>)
    1a90:	f002 f87c 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a94:	210e      	movs	r1, #14
    1a96:	4818      	ldr	r0, [pc, #96]	; (1af8 <setup+0xfac>)
    1a98:	f003 fae0 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1a9c:	4814      	ldr	r0, [pc, #80]	; (1af0 <setup+0xfa4>)
    1a9e:	f002 f867 	bl	3b70 <Print::println()>
    1aa2:	e790      	b.n	19c6 <setup+0xe7a>
    1aa4:	2104      	movs	r1, #4
    1aa6:	4811      	ldr	r0, [pc, #68]	; (1aec <setup+0xfa0>)
    1aa8:	f003 fad8 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1aac:	2300      	movs	r3, #0
    1aae:	220a      	movs	r2, #10
    1ab0:	4621      	mov	r1, r4
    1ab2:	480f      	ldr	r0, [pc, #60]	; (1af0 <setup+0xfa4>)
    1ab4:	f002 f86a 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ab8:	2112      	movs	r1, #18
    1aba:	4810      	ldr	r0, [pc, #64]	; (1afc <setup+0xfb0>)
    1abc:	f003 face 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ac0:	480b      	ldr	r0, [pc, #44]	; (1af0 <setup+0xfa4>)
    1ac2:	f002 f855 	bl	3b70 <Print::println()>
    1ac6:	e77e      	b.n	19c6 <setup+0xe7a>
    1ac8:	2104      	movs	r1, #4
    1aca:	4808      	ldr	r0, [pc, #32]	; (1aec <setup+0xfa0>)
    1acc:	f003 fac6 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1ad0:	2300      	movs	r3, #0
    1ad2:	220a      	movs	r2, #10
    1ad4:	4621      	mov	r1, r4
    1ad6:	4806      	ldr	r0, [pc, #24]	; (1af0 <setup+0xfa4>)
    1ad8:	f002 f858 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1adc:	2112      	movs	r1, #18
    1ade:	4808      	ldr	r0, [pc, #32]	; (1b00 <setup+0xfb4>)
    1ae0:	f003 fabc 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1ae4:	4802      	ldr	r0, [pc, #8]	; (1af0 <setup+0xfa4>)
    1ae6:	f002 f843 	bl	3b70 <Print::println()>
    1aea:	e76c      	b.n	19c6 <setup+0xe7a>
    1aec:	20000760 	.word	0x20000760
    1af0:	20000a58 	.word	0x20000a58
    1af4:	200007b4 	.word	0x200007b4
    1af8:	200007ec 	.word	0x200007ec
    1afc:	20000768 	.word	0x20000768
    1b00:	200007fc 	.word	0x200007fc
    1b04:	200007c4 	.word	0x200007c4
    1b08:	20000810 	.word	0x20000810
    1b0c:	20000708 	.word	0x20000708
    1b10:	20000820 	.word	0x20000820
    1b14:	20000840 	.word	0x20000840
    1b18:	20000868 	.word	0x20000868
    1b1c:	2000079c 	.word	0x2000079c
    1b20:	20000870 	.word	0x20000870
    1b24:	20000304 	.word	0x20000304
    1b28:	401d4000 	.word	0x401d4000
    1b2c:	2000087c 	.word	0x2000087c
    1b30:	200007d8 	.word	0x200007d8
    1b34:	2000077c 	.word	0x2000077c
    1b38:	2000078c 	.word	0x2000078c
    1b3c:	200007a0 	.word	0x200007a0
    1b40:	2104      	movs	r1, #4
    1b42:	4824      	ldr	r0, [pc, #144]	; (1bd4 <setup+0x1088>)
    1b44:	f003 fa8a 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1b48:	2300      	movs	r3, #0
    1b4a:	220a      	movs	r2, #10
    1b4c:	4621      	mov	r1, r4
    1b4e:	4822      	ldr	r0, [pc, #136]	; (1bd8 <setup+0x108c>)
    1b50:	f002 f81c 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b54:	2111      	movs	r1, #17
    1b56:	4821      	ldr	r0, [pc, #132]	; (1bdc <setup+0x1090>)
    1b58:	f003 fa80 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1b5c:	481e      	ldr	r0, [pc, #120]	; (1bd8 <setup+0x108c>)
    1b5e:	f002 f807 	bl	3b70 <Print::println()>
    1b62:	e730      	b.n	19c6 <setup+0xe7a>
    1b64:	2104      	movs	r1, #4
    1b66:	481b      	ldr	r0, [pc, #108]	; (1bd4 <setup+0x1088>)
    1b68:	f003 fa78 	bl	505c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1b6c:	2300      	movs	r3, #0
    1b6e:	220a      	movs	r2, #10
    1b70:	4621      	mov	r1, r4
    1b72:	4819      	ldr	r0, [pc, #100]	; (1bd8 <setup+0x108c>)
    1b74:	f002 f80a 	bl	3b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b78:	210f      	movs	r1, #15
    1b7a:	4819      	ldr	r0, [pc, #100]	; (1be0 <setup+0x1094>)
    1b7c:	f003 fa6e 	bl	505c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1b80:	4815      	ldr	r0, [pc, #84]	; (1bd8 <setup+0x108c>)
    1b82:	f001 fff5 	bl	3b70 <Print::println()>
    1b86:	e71e      	b.n	19c6 <setup+0xe7a>
    1b88:	2111      	movs	r1, #17
    1b8a:	4816      	ldr	r0, [pc, #88]	; (1be4 <setup+0x1098>)
    1b8c:	f003 fa66 	bl	505c <usb_serial_write>
    1b90:	4811      	ldr	r0, [pc, #68]	; (1bd8 <setup+0x108c>)
    1b92:	f001 ffed 	bl	3b70 <Print::println()>
    1b96:	f7ff bbd5 	b.w	1344 <setup+0x7f8>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    1b9a:	2400      	movs	r4, #0
    1b9c:	4625      	mov	r5, r4
    1b9e:	f7ff bbed 	b.w	137c <setup+0x830>
    1ba2:	2400      	movs	r4, #0
    1ba4:	4625      	mov	r5, r4
    1ba6:	e490      	b.n	14ca <setup+0x97e>
    1ba8:	480f      	ldr	r0, [pc, #60]	; (1be8 <setup+0x109c>)
    1baa:	f003 fa57 	bl	505c <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1bae:	f8d8 9008 	ldr.w	r9, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1bb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1bb6:	44b8      	add	r8, r7
            if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    1bb8:	f3c3 4a8a 	ubfx	sl, r3, #18, #11
    1bbc:	e694      	b.n	18e8 <setup+0xd9c>
    1bbe:	480a      	ldr	r0, [pc, #40]	; (1be8 <setup+0x109c>)
    1bc0:	f003 fa4c 	bl	505c <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1bc4:	f8d8 9008 	ldr.w	r9, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1bc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1bcc:	44b8      	add	r8, r7
            if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    1bce:	f3c3 4a8a 	ubfx	sl, r3, #18, #11
    1bd2:	e510      	b.n	15f6 <setup+0xaaa>
    1bd4:	20000760 	.word	0x20000760
    1bd8:	20000a58 	.word	0x20000a58
    1bdc:	200007c4 	.word	0x200007c4
    1be0:	20000810 	.word	0x20000810
    1be4:	20000708 	.word	0x20000708
    1be8:	20000854 	.word	0x20000854

00001bec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1bec:	291f      	cmp	r1, #31
    1bee:	481c      	ldr	r0, [pc, #112]	; (1c60 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    1bf0:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1bf2:	d823      	bhi.n	1c3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    1bf4:	2301      	movs	r3, #1
    1bf6:	6b04      	ldr	r4, [r0, #48]	; 0x30
    1bf8:	408b      	lsls	r3, r1
    1bfa:	4323      	orrs	r3, r4
    1bfc:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1bfe:	4b19      	ldr	r3, [pc, #100]	; (1c64 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1c00:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c04:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1c06:	440b      	add	r3, r1
    1c08:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1c0a:	601c      	str	r4, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c0c:	b1f8      	cbz	r0, 1c4e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
  if ( msg.flags.remote ) code |= (1UL << 20);
    1c0e:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c10:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1c12:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c14:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.extended ) code |= (3UL << 21);
    1c18:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c1c:	6058      	str	r0, [r3, #4]
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    1c1e:	68d0      	ldr	r0, [r2, #12]
}
    1c20:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c24:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    1c26:	6098      	str	r0, [r3, #8]
    1c28:	6910      	ldr	r0, [r2, #16]
    1c2a:	ba00      	rev	r0, r0
    1c2c:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    1c2e:	7ad2      	ldrb	r2, [r2, #11]
    1c30:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    1c34:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    1c38:	601a      	str	r2, [r3, #0]
}
    1c3a:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    1c3c:	f1a1 0c20 	sub.w	ip, r1, #32
    1c40:	2301      	movs	r3, #1
    1c42:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    1c44:	fa03 f30c 	lsl.w	r3, r3, ip
    1c48:	4323      	orrs	r3, r4
    1c4a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    1c4c:	e7d7      	b.n	1bfe <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c4e:	6814      	ldr	r4, [r2, #0]
    1c50:	4805      	ldr	r0, [pc, #20]	; (1c68 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    1c52:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c54:	ea00 4084 	and.w	r0, r0, r4, lsl #18
  if ( msg.flags.remote ) code |= (1UL << 20);
    1c58:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c5a:	6058      	str	r0, [r3, #4]
    1c5c:	e7df      	b.n	1c1e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    1c5e:	bf00      	nop
    1c60:	401d4000 	.word	0x401d4000
    1c64:	0401d408 	.word	0x0401d408
    1c68:	1ffc0000 	.word	0x1ffc0000

00001c6c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1c6c:	291f      	cmp	r1, #31
    1c6e:	481c      	ldr	r0, [pc, #112]	; (1ce0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    1c70:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1c72:	d823      	bhi.n	1cbc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    1c74:	2301      	movs	r3, #1
    1c76:	6b04      	ldr	r4, [r0, #48]	; 0x30
    1c78:	408b      	lsls	r3, r1
    1c7a:	4323      	orrs	r3, r4
    1c7c:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1c7e:	4b19      	ldr	r3, [pc, #100]	; (1ce4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1c80:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c84:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1c86:	440b      	add	r3, r1
    1c88:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1c8a:	601c      	str	r4, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c8c:	b1f8      	cbz	r0, 1cce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
  if ( msg.flags.remote ) code |= (1UL << 20);
    1c8e:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c90:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1c92:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c94:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.extended ) code |= (3UL << 21);
    1c98:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1c9c:	6058      	str	r0, [r3, #4]
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    1c9e:	68d0      	ldr	r0, [r2, #12]
}
    1ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ca4:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    1ca6:	6098      	str	r0, [r3, #8]
    1ca8:	6910      	ldr	r0, [r2, #16]
    1caa:	ba00      	rev	r0, r0
    1cac:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    1cae:	7ad2      	ldrb	r2, [r2, #11]
    1cb0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    1cb4:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    1cb8:	601a      	str	r2, [r3, #0]
}
    1cba:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    1cbc:	f1a1 0c20 	sub.w	ip, r1, #32
    1cc0:	2301      	movs	r3, #1
    1cc2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    1cc4:	fa03 f30c 	lsl.w	r3, r3, ip
    1cc8:	4323      	orrs	r3, r4
    1cca:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    1ccc:	e7d7      	b.n	1c7e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1cce:	6814      	ldr	r4, [r2, #0]
    1cd0:	4805      	ldr	r0, [pc, #20]	; (1ce8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    1cd2:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1cd4:	ea00 4084 	and.w	r0, r0, r4, lsl #18
  if ( msg.flags.remote ) code |= (1UL << 20);
    1cd8:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1cda:	6058      	str	r0, [r3, #4]
    1cdc:	e7df      	b.n	1c9e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    1cde:	bf00      	nop
    1ce0:	401d0000 	.word	0x401d0000
    1ce4:	0401d008 	.word	0x0401d008
    1ce8:	1ffc0000 	.word	0x1ffc0000

00001cec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
}
#endif


FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
  if ( mb_num == FIFO ) {
    1cec:	780b      	ldrb	r3, [r1, #0]
    1cee:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    1cf0:	b510      	push	{r4, lr}
    1cf2:	4604      	mov	r4, r0
    1cf4:	b082      	sub	sp, #8
    1cf6:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    1cf8:	d013      	beq.n	1d22 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    if ( _mainHandler ) _mainHandler(msg);
    return;
  }
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    1cfa:	f503 6317 	add.w	r3, r3, #2416	; 0x970
    1cfe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1d02:	685b      	ldr	r3, [r3, #4]
    1d04:	b113      	cbz	r3, 1d0c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    1d06:	9201      	str	r2, [sp, #4]
    1d08:	4798      	blx	r3
    1d0a:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    1d0c:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1d10:	f8d4 36c4 	ldr.w	r3, [r4, #1732]	; 0x6c4
    1d14:	b11b      	cbz	r3, 1d1e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    1d16:	b002      	add	sp, #8
    1d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    1d1c:	4718      	bx	r3
}
    1d1e:	b002      	add	sp, #8
    1d20:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    1d22:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1d26:	f8d4 35c4 	ldr.w	r3, [r4, #1476]	; 0x5c4
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d0f0      	beq.n	1d10 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    1d2e:	9201      	str	r2, [sp, #4]
    1d30:	4798      	blx	r3
    1d32:	9801      	ldr	r0, [sp, #4]
    1d34:	e7ec      	b.n	1d10 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    1d36:	bf00      	nop

00001d38 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    1d3c:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1d40:	b08f      	sub	sp, #60	; 0x3c
    1d42:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    1d44:	f897 35c0 	ldrb.w	r3, [r7, #1472]	; 0x5c0
    1d48:	b913      	cbnz	r3, 1d50 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    1d4a:	2301      	movs	r3, #1
    1d4c:	f887 35c0 	strb.w	r3, [r7, #1472]	; 0x5c0
        T readBytes(T *buffer, uint16_t length);
        void flush() { clear(); }
        void clear() { head = tail = _available = 0; }
        void print(const char *p);
        void println(const char *p);
        uint16_t size() { return _available; }
    1d50:	8923      	ldrh	r3, [r4, #8]
    1d52:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    1d54:	2b00      	cmp	r3, #0
    1d56:	d157      	bne.n	1e08 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xd0>
  NVIC_DISABLE_IRQ(nvicIrq);
    1d58:	f8d7 26c8 	ldr.w	r2, [r7, #1736]	; 0x6c8
    1d5c:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    1d60:	4b72      	ldr	r3, [pc, #456]	; (1f2c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1f4>)
    1d62:	f002 011f 	and.w	r1, r2, #31
    1d66:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    1d6a:	2201      	movs	r2, #1
    1d6c:	009b      	lsls	r3, r3, #2
    1d6e:	408a      	lsls	r2, r1
    1d70:	601a      	str	r2, [r3, #0]
    1d72:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    1d76:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    1d78:	b383      	cbz	r3, 1ddc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>


template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::peek_front(T *buffer, uint16_t length, uint32_t entry) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1d7a:	f8b6 3b0a 	ldrh.w	r3, [r6, #2826]	; 0xb0a
    1d7e:	221a      	movs	r2, #26
    1d80:	ad08      	add	r5, sp, #32
    memmove(&frame, buf, sizeof(frame));
    1d82:	f10d 0c08 	add.w	ip, sp, #8
    1d86:	f003 030f 	and.w	r3, r3, #15
    1d8a:	46ae      	mov	lr, r5
    1d8c:	fb02 4303 	mla	r3, r2, r3, r4
    1d90:	f641 3222 	movw	r2, #6946	; 0x1b22
    1d94:	eb03 0802 	add.w	r8, r3, r2
    1d98:	5898      	ldr	r0, [r3, r2]
    1d9a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    1d9e:	f8d8 2008 	ldr.w	r2, [r8, #8]
    1da2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    1da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1da8:	f8d8 0010 	ldr.w	r0, [r8, #16]
    1dac:	f8d8 1014 	ldr.w	r1, [r8, #20]
    1db0:	c503      	stmia	r5!, {r0, r1}
    1db2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1db6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1dba:	e89e 0003 	ldmia.w	lr, {r0, r1}
    1dbe:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    1dc2:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    1dc6:	1c4b      	adds	r3, r1, #1
    1dc8:	d054      	beq.n	1e74 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x13c>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1dca:	4b59      	ldr	r3, [pc, #356]	; (1f30 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1f8>)
    1dcc:	440b      	add	r3, r1
    1dce:	011b      	lsls	r3, r3, #4
    1dd0:	681b      	ldr	r3, [r3, #0]
    1dd2:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1dd6:	2b08      	cmp	r3, #8
    1dd8:	f000 808b 	beq.w	1ef2 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1ba>
  NVIC_ENABLE_IRQ(nvicIrq);
    1ddc:	f8d7 26c8 	ldr.w	r2, [r7, #1736]	; 0x6c8
    1de0:	4b54      	ldr	r3, [pc, #336]	; (1f34 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1fc>)
    1de2:	f002 011f 	and.w	r1, r2, #31
    1de6:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    1dea:	2201      	movs	r2, #1
    1dec:	009b      	lsls	r3, r3, #2
    1dee:	408a      	lsls	r2, r1
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    1df0:	2100      	movs	r1, #0
  NVIC_ENABLE_IRQ(nvicIrq);
    1df2:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    1df4:	8923      	ldrh	r3, [r4, #8]
    1df6:	f8b6 0b0e 	ldrh.w	r0, [r6, #2830]	; 0xb0e
    1dfa:	b29b      	uxth	r3, r3
    1dfc:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    1dfe:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    1e02:	b00f      	add	sp, #60	; 0x3c
    1e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1e08:	88a6      	ldrh	r6, [r4, #4]
    1e0a:	231a      	movs	r3, #26
    head = ((head + 1)&(2*_size-1));
    1e0c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1e10:	ad08      	add	r5, sp, #32
    1e12:	b2f6      	uxtb	r6, r6
    head = ((head + 1)&(2*_size-1));
    1e14:	f10c 0c01 	add.w	ip, ip, #1
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1e18:	fb03 4606 	mla	r6, r3, r6, r4
    head = ((head + 1)&(2*_size-1));
    1e1c:	f3cc 0c08 	ubfx	ip, ip, #0, #9
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1e20:	f8d6 010c 	ldr.w	r0, [r6, #268]	; 0x10c
    1e24:	f8d6 1110 	ldr.w	r1, [r6, #272]	; 0x110
    1e28:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
    1e2c:	f8d6 2114 	ldr.w	r2, [r6, #276]	; 0x114
    1e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1e32:	f8d6 011c 	ldr.w	r0, [r6, #284]	; 0x11c
    1e36:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
    head = ((head + 1)&(2*_size-1));
    1e3a:	f8a4 c004 	strh.w	ip, [r4, #4]
    if ( _available ) _available--;
    1e3e:	8923      	ldrh	r3, [r4, #8]
    1e40:	b29b      	uxth	r3, r3
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1e42:	c503      	stmia	r5!, {r0, r1}
    if ( _available ) _available--;
    1e44:	b11b      	cbz	r3, 1e4e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x116>
    1e46:	8923      	ldrh	r3, [r4, #8]
    1e48:	3b01      	subs	r3, #1
    1e4a:	b29b      	uxth	r3, r3
    1e4c:	8123      	strh	r3, [r4, #8]
    memmove(&frame, buf, sizeof(frame));
    1e4e:	ad08      	add	r5, sp, #32
    1e50:	ae02      	add	r6, sp, #8
    1e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1e54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1e56:	e895 0003 	ldmia.w	r5, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    1e5a:	aa02      	add	r2, sp, #8
    memmove(&frame, buf, sizeof(frame));
    1e5c:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    1e60:	f89d 301c 	ldrb.w	r3, [sp, #28]
    1e64:	f10d 0107 	add.w	r1, sp, #7
    1e68:	4620      	mov	r0, r4
    1e6a:	f88d 3007 	strb.w	r3, [sp, #7]
    1e6e:	f7ff ff3d 	bl	1cec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    1e72:	e771      	b.n	1d58 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1e74:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1f38 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x200>
    1e78:	f8d8 5000 	ldr.w	r5, [r8]
    1e7c:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    1e80:	d050      	beq.n	1f24 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1ec>
    1e82:	f7fe fa8d 	bl	3a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1e86:	f8d8 3000 	ldr.w	r3, [r8]
    1e8a:	4605      	mov	r5, r0
    1e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1e90:	3301      	adds	r3, #1
    1e92:	4283      	cmp	r3, r0
    1e94:	d9a2      	bls.n	1ddc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1e96:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1f30 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1f8>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1e9a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1f38 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x200>
    1e9e:	e008      	b.n	1eb2 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x17a>
    1ea0:	f8d8 3000 	ldr.w	r3, [r8]
    1ea4:	3501      	adds	r5, #1
    1ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1eaa:	b2ed      	uxtb	r5, r5
    1eac:	3301      	adds	r3, #1
    1eae:	429d      	cmp	r5, r3
    1eb0:	d294      	bcs.n	1ddc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1eb2:	eb05 0309 	add.w	r3, r5, r9
    1eb6:	011b      	lsls	r3, r3, #4
    1eb8:	681b      	ldr	r3, [r3, #0]
    1eba:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1ebe:	2b08      	cmp	r3, #8
    1ec0:	d1ee      	bne.n	1ea0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x168>
          writeTxMailbox(i, frame);
    1ec2:	aa02      	add	r2, sp, #8
    1ec4:	4629      	mov	r1, r5
    1ec6:	4620      	mov	r0, r4
    1ec8:	f7ff fed0 	bl	1c6c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    1ecc:	f8b6 3b0a 	ldrh.w	r3, [r6, #2826]	; 0xb0a
    1ed0:	3301      	adds	r3, #1
    1ed2:	f003 031f 	and.w	r3, r3, #31
    1ed6:	f8a6 3b0a 	strh.w	r3, [r6, #2826]	; 0xb0a
    if ( _available ) _available--;
    1eda:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    1ede:	b29b      	uxth	r3, r3
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d0dd      	beq.n	1ea0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x168>
    1ee4:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    1ee8:	3b01      	subs	r3, #1
    1eea:	b29b      	uxth	r3, r3
    1eec:	f8a6 3b0e 	strh.w	r3, [r6, #2830]	; 0xb0e
    1ef0:	e7d6      	b.n	1ea0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x168>
      writeTxMailbox(frame.mb, frame);
    1ef2:	aa02      	add	r2, sp, #8
    1ef4:	b2c9      	uxtb	r1, r1
    1ef6:	4620      	mov	r0, r4
    1ef8:	f7ff feb8 	bl	1c6c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    1efc:	f8b6 3b0a 	ldrh.w	r3, [r6, #2826]	; 0xb0a
    1f00:	3301      	adds	r3, #1
    1f02:	f003 031f 	and.w	r3, r3, #31
    1f06:	f8a6 3b0a 	strh.w	r3, [r6, #2826]	; 0xb0a
    if ( _available ) _available--;
    1f0a:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    1f0e:	b29b      	uxth	r3, r3
    1f10:	2b00      	cmp	r3, #0
    1f12:	f43f af63 	beq.w	1ddc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
    1f16:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    1f1a:	3b01      	subs	r3, #1
    1f1c:	b29b      	uxth	r3, r3
    1f1e:	f8a6 3b0e 	strh.w	r3, [r6, #2830]	; 0xb0e
    1f22:	e75b      	b.n	1ddc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1f24:	f8d8 3000 	ldr.w	r3, [r8]
    1f28:	e7b5      	b.n	1e96 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x15e>
    1f2a:	bf00      	nop
    1f2c:	38003860 	.word	0x38003860
    1f30:	0401d008 	.word	0x0401d008
    1f34:	38003840 	.word	0x38003840
    1f38:	401d0000 	.word	0x401d0000

00001f3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
  if ( mb_num == FIFO ) {
    1f3c:	780b      	ldrb	r3, [r1, #0]
    1f3e:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    1f40:	b510      	push	{r4, lr}
    1f42:	4604      	mov	r4, r0
    1f44:	b082      	sub	sp, #8
    1f46:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    1f48:	d013      	beq.n	1f72 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    1f4a:	f503 6317 	add.w	r3, r3, #2416	; 0x970
    1f4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1f52:	685b      	ldr	r3, [r3, #4]
    1f54:	b113      	cbz	r3, 1f5c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    1f56:	9201      	str	r2, [sp, #4]
    1f58:	4798      	blx	r3
    1f5a:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    1f5c:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1f60:	f8d4 36c4 	ldr.w	r3, [r4, #1732]	; 0x6c4
    1f64:	b11b      	cbz	r3, 1f6e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    1f66:	b002      	add	sp, #8
    1f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    1f6c:	4718      	bx	r3
}
    1f6e:	b002      	add	sp, #8
    1f70:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    1f72:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1f76:	f8d4 35c4 	ldr.w	r3, [r4, #1476]	; 0x5c4
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	d0f0      	beq.n	1f60 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    1f7e:	9201      	str	r2, [sp, #4]
    1f80:	4798      	blx	r3
    1f82:	9801      	ldr	r0, [sp, #4]
    1f84:	e7ec      	b.n	1f60 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    1f86:	bf00      	nop

00001f88 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    1f8c:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1f90:	b08f      	sub	sp, #60	; 0x3c
    1f92:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    1f94:	f897 35c0 	ldrb.w	r3, [r7, #1472]	; 0x5c0
    1f98:	b913      	cbnz	r3, 1fa0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    1f9a:	2301      	movs	r3, #1
    1f9c:	f887 35c0 	strb.w	r3, [r7, #1472]	; 0x5c0
        uint16_t size() { return _available; }
    1fa0:	8923      	ldrh	r3, [r4, #8]
    1fa2:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d157      	bne.n	2058 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xd0>
  NVIC_DISABLE_IRQ(nvicIrq);
    1fa8:	f8d7 26c8 	ldr.w	r2, [r7, #1736]	; 0x6c8
    1fac:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    1fb0:	4b72      	ldr	r3, [pc, #456]	; (217c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1f4>)
    1fb2:	f002 011f 	and.w	r1, r2, #31
    1fb6:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    1fba:	2201      	movs	r2, #1
    1fbc:	009b      	lsls	r3, r3, #2
    1fbe:	408a      	lsls	r2, r1
    1fc0:	601a      	str	r2, [r3, #0]
    1fc2:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    1fc6:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    1fc8:	b383      	cbz	r3, 202c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1fca:	f8b6 3b0a 	ldrh.w	r3, [r6, #2826]	; 0xb0a
    1fce:	221a      	movs	r2, #26
    1fd0:	ad08      	add	r5, sp, #32
    memmove(&frame, buf, sizeof(frame));
    1fd2:	f10d 0c08 	add.w	ip, sp, #8
    1fd6:	f003 030f 	and.w	r3, r3, #15
    1fda:	46ae      	mov	lr, r5
    1fdc:	fb02 4303 	mla	r3, r2, r3, r4
    1fe0:	f641 3222 	movw	r2, #6946	; 0x1b22
    1fe4:	eb03 0802 	add.w	r8, r3, r2
    1fe8:	5898      	ldr	r0, [r3, r2]
    1fea:	f8d8 1004 	ldr.w	r1, [r8, #4]
    1fee:	f8d8 2008 	ldr.w	r2, [r8, #8]
    1ff2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    1ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1ff8:	f8d8 0010 	ldr.w	r0, [r8, #16]
    1ffc:	f8d8 1014 	ldr.w	r1, [r8, #20]
    2000:	c503      	stmia	r5!, {r0, r1}
    2002:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2006:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    200a:	e89e 0003 	ldmia.w	lr, {r0, r1}
    200e:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    2012:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    2016:	1c4b      	adds	r3, r1, #1
    2018:	d054      	beq.n	20c4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x13c>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    201a:	4b59      	ldr	r3, [pc, #356]	; (2180 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1f8>)
    201c:	440b      	add	r3, r1
    201e:	011b      	lsls	r3, r3, #4
    2020:	681b      	ldr	r3, [r3, #0]
    2022:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2026:	2b08      	cmp	r3, #8
    2028:	f000 808b 	beq.w	2142 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1ba>
  NVIC_ENABLE_IRQ(nvicIrq);
    202c:	f8d7 26c8 	ldr.w	r2, [r7, #1736]	; 0x6c8
    2030:	4b54      	ldr	r3, [pc, #336]	; (2184 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1fc>)
    2032:	f002 011f 	and.w	r1, r2, #31
    2036:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    203a:	2201      	movs	r2, #1
    203c:	009b      	lsls	r3, r3, #2
    203e:	408a      	lsls	r2, r1
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    2040:	2100      	movs	r1, #0
  NVIC_ENABLE_IRQ(nvicIrq);
    2042:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    2044:	8923      	ldrh	r3, [r4, #8]
    2046:	f8b6 0b0e 	ldrh.w	r0, [r6, #2830]	; 0xb0e
    204a:	b29b      	uxth	r3, r3
    204c:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    204e:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    2052:	b00f      	add	sp, #60	; 0x3c
    2054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2058:	88a6      	ldrh	r6, [r4, #4]
    205a:	231a      	movs	r3, #26
    head = ((head + 1)&(2*_size-1));
    205c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2060:	ad08      	add	r5, sp, #32
    2062:	b2f6      	uxtb	r6, r6
    head = ((head + 1)&(2*_size-1));
    2064:	f10c 0c01 	add.w	ip, ip, #1
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2068:	fb03 4606 	mla	r6, r3, r6, r4
    head = ((head + 1)&(2*_size-1));
    206c:	f3cc 0c08 	ubfx	ip, ip, #0, #9
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2070:	f8d6 010c 	ldr.w	r0, [r6, #268]	; 0x10c
    2074:	f8d6 1110 	ldr.w	r1, [r6, #272]	; 0x110
    2078:	f8d6 3118 	ldr.w	r3, [r6, #280]	; 0x118
    207c:	f8d6 2114 	ldr.w	r2, [r6, #276]	; 0x114
    2080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2082:	f8d6 011c 	ldr.w	r0, [r6, #284]	; 0x11c
    2086:	f8d6 1120 	ldr.w	r1, [r6, #288]	; 0x120
    head = ((head + 1)&(2*_size-1));
    208a:	f8a4 c004 	strh.w	ip, [r4, #4]
    if ( _available ) _available--;
    208e:	8923      	ldrh	r3, [r4, #8]
    2090:	b29b      	uxth	r3, r3
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2092:	c503      	stmia	r5!, {r0, r1}
    if ( _available ) _available--;
    2094:	b11b      	cbz	r3, 209e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x116>
    2096:	8923      	ldrh	r3, [r4, #8]
    2098:	3b01      	subs	r3, #1
    209a:	b29b      	uxth	r3, r3
    209c:	8123      	strh	r3, [r4, #8]
    memmove(&frame, buf, sizeof(frame));
    209e:	ad08      	add	r5, sp, #32
    20a0:	ae02      	add	r6, sp, #8
    20a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    20a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    20a6:	e895 0003 	ldmia.w	r5, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    20aa:	aa02      	add	r2, sp, #8
    memmove(&frame, buf, sizeof(frame));
    20ac:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    20b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
    20b4:	f10d 0107 	add.w	r1, sp, #7
    20b8:	4620      	mov	r0, r4
    20ba:	f88d 3007 	strb.w	r3, [sp, #7]
    20be:	f7ff ff3d 	bl	1f3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    20c2:	e771      	b.n	1fa8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    20c4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 2188 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x200>
    20c8:	f8d8 5000 	ldr.w	r5, [r8]
    20cc:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    20d0:	d050      	beq.n	2174 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1ec>
    20d2:	f7fe f989 	bl	3e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    20d6:	f8d8 3000 	ldr.w	r3, [r8]
    20da:	4605      	mov	r5, r0
    20dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    20e0:	3301      	adds	r3, #1
    20e2:	4283      	cmp	r3, r0
    20e4:	d9a2      	bls.n	202c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    20e6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2180 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1f8>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    20ea:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2188 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x200>
    20ee:	e008      	b.n	2102 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x17a>
    20f0:	f8d8 3000 	ldr.w	r3, [r8]
    20f4:	3501      	adds	r5, #1
    20f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    20fa:	b2ed      	uxtb	r5, r5
    20fc:	3301      	adds	r3, #1
    20fe:	429d      	cmp	r5, r3
    2100:	d294      	bcs.n	202c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2102:	eb05 0309 	add.w	r3, r5, r9
    2106:	011b      	lsls	r3, r3, #4
    2108:	681b      	ldr	r3, [r3, #0]
    210a:	f3c3 6303 	ubfx	r3, r3, #24, #4
    210e:	2b08      	cmp	r3, #8
    2110:	d1ee      	bne.n	20f0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x168>
          writeTxMailbox(i, frame);
    2112:	aa02      	add	r2, sp, #8
    2114:	4629      	mov	r1, r5
    2116:	4620      	mov	r0, r4
    2118:	f7ff fd68 	bl	1bec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    211c:	f8b6 3b0a 	ldrh.w	r3, [r6, #2826]	; 0xb0a
    2120:	3301      	adds	r3, #1
    2122:	f003 031f 	and.w	r3, r3, #31
    2126:	f8a6 3b0a 	strh.w	r3, [r6, #2826]	; 0xb0a
    if ( _available ) _available--;
    212a:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    212e:	b29b      	uxth	r3, r3
    2130:	2b00      	cmp	r3, #0
    2132:	d0dd      	beq.n	20f0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x168>
    2134:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    2138:	3b01      	subs	r3, #1
    213a:	b29b      	uxth	r3, r3
    213c:	f8a6 3b0e 	strh.w	r3, [r6, #2830]	; 0xb0e
    2140:	e7d6      	b.n	20f0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x168>
      writeTxMailbox(frame.mb, frame);
    2142:	aa02      	add	r2, sp, #8
    2144:	b2c9      	uxtb	r1, r1
    2146:	4620      	mov	r0, r4
    2148:	f7ff fd50 	bl	1bec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    214c:	f8b6 3b0a 	ldrh.w	r3, [r6, #2826]	; 0xb0a
    2150:	3301      	adds	r3, #1
    2152:	f003 031f 	and.w	r3, r3, #31
    2156:	f8a6 3b0a 	strh.w	r3, [r6, #2826]	; 0xb0a
    if ( _available ) _available--;
    215a:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    215e:	b29b      	uxth	r3, r3
    2160:	2b00      	cmp	r3, #0
    2162:	f43f af63 	beq.w	202c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
    2166:	f8b6 3b0e 	ldrh.w	r3, [r6, #2830]	; 0xb0e
    216a:	3b01      	subs	r3, #1
    216c:	b29b      	uxth	r3, r3
    216e:	f8a6 3b0e 	strh.w	r3, [r6, #2830]	; 0xb0e
    2172:	e75b      	b.n	202c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2174:	f8d8 3000 	ldr.w	r3, [r8]
    2178:	e7b5      	b.n	20e6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x15e>
    217a:	bf00      	nop
    217c:	38003860 	.word	0x38003860
    2180:	0401d408 	.word	0x0401d408
    2184:	38003840 	.word	0x38003840
    2188:	401d4000 	.word	0x401d4000

0000218c <loop>:

void loop() {
    218c:	b508      	push	{r3, lr}
  Can1.events(); // These calls write events to the network
    218e:	4805      	ldr	r0, [pc, #20]	; (21a4 <loop+0x18>)
    2190:	f7ff fdd2 	bl	1d38 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>
  Can2.events();
    2194:	4804      	ldr	r0, [pc, #16]	; (21a8 <loop+0x1c>)
    2196:	f7ff fef7 	bl	1f88 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>
  check_led_timers();
}
    219a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  check_led_timers();
    219e:	f7fe bae3 	b.w	768 <check_led_timers()>
    21a2:	bf00      	nop
    21a4:	20001088 	.word	0x20001088
    21a8:	2000375c 	.word	0x2000375c

000021ac <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    21ac:	8843      	ldrh	r3, [r0, #2]
    21ae:	f04f 0c1a 	mov.w	ip, #26
    21b2:	f003 030f 	and.w	r3, r3, #15
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    21b6:	b510      	push	{r4, lr}
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    21b8:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    21bc:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    21be:	2000      	movs	r0, #0
    21c0:	7598      	strb	r0, [r3, #22]
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    21c2:	8863      	ldrh	r3, [r4, #2]
    21c4:	f003 030f 	and.w	r3, r3, #15
    21c8:	fb0c 4303 	mla	r3, ip, r3, r4
    21cc:	75da      	strb	r2, [r3, #23]
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    21ce:	8860      	ldrh	r0, [r4, #2]
    21d0:	f000 000f 	and.w	r0, r0, #15
    21d4:	fb0c 4000 	mla	r0, ip, r0, r4
    21d8:	3018      	adds	r0, #24
    21da:	f003 fb15 	bl	5808 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    21de:	8862      	ldrh	r2, [r4, #2]
    21e0:	8823      	ldrh	r3, [r4, #0]
    21e2:	b292      	uxth	r2, r2
    21e4:	b29b      	uxth	r3, r3
    21e6:	f083 0310 	eor.w	r3, r3, #16
    21ea:	429a      	cmp	r2, r3
    21ec:	d104      	bne.n	21f8 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    21ee:	8823      	ldrh	r3, [r4, #0]
    21f0:	3301      	adds	r3, #1
    21f2:	f003 031f 	and.w	r3, r3, #31
    21f6:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    21f8:	8863      	ldrh	r3, [r4, #2]
    21fa:	3301      	adds	r3, #1
    21fc:	f003 031f 	and.w	r3, r3, #31
    2200:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    2202:	88a3      	ldrh	r3, [r4, #4]
    2204:	b29b      	uxth	r3, r3
    2206:	2b0f      	cmp	r3, #15
    2208:	d803      	bhi.n	2212 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    220a:	88a3      	ldrh	r3, [r4, #4]
    220c:	3301      	adds	r3, #1
    220e:	b29b      	uxth	r3, r3
    2210:	80a3      	strh	r3, [r4, #4]
}
    2212:	bd10      	pop	{r4, pc}

00002214 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
  if ( msg.seq ) {
    2214:	7d8b      	ldrb	r3, [r1, #22]
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    2216:	b5f0      	push	{r4, r5, r6, r7, lr}
    2218:	460d      	mov	r5, r1
    221a:	b08d      	sub	sp, #52	; 0x34
    221c:	4604      	mov	r4, r0
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    221e:	4e4b      	ldr	r6, [pc, #300]	; (234c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x138>)
  if ( msg.seq ) {
    2220:	2b00      	cmp	r3, #0
    2222:	d14c      	bne.n	22be <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xaa>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2224:	6833      	ldr	r3, [r6, #0]
    2226:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    222a:	d025      	beq.n	2278 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    222c:	f7fe f8b8 	bl	3a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2230:	6833      	ldr	r3, [r6, #0]
    2232:	4684      	mov	ip, r0
    2234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2238:	3301      	adds	r3, #1
    223a:	4298      	cmp	r0, r3
    223c:	d21e      	bcs.n	227c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    223e:	4944      	ldr	r1, [pc, #272]	; (2350 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2240:	4842      	ldr	r0, [pc, #264]	; (234c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x138>)
    2242:	e007      	b.n	2254 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    2244:	6803      	ldr	r3, [r0, #0]
    2246:	fa5f fc82 	uxtb.w	ip, r2
    224a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    224e:	3301      	adds	r3, #1
    2250:	459c      	cmp	ip, r3
    2252:	d213      	bcs.n	227c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2254:	eb0c 0301 	add.w	r3, ip, r1
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2258:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    225c:	011b      	lsls	r3, r3, #4
    225e:	681b      	ldr	r3, [r3, #0]
    2260:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2264:	2b08      	cmp	r3, #8
    2266:	d1ed      	bne.n	2244 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    2268:	4620      	mov	r0, r4
    226a:	462a      	mov	r2, r5
    226c:	4661      	mov	r1, ip
    226e:	f7ff fcfd 	bl	1c6c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    2272:	2001      	movs	r0, #1
}
    2274:	b00d      	add	sp, #52	; 0x34
    2276:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2278:	6833      	ldr	r3, [r6, #0]
    227a:	e7e0      	b.n	223e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    227c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    227e:	46ec      	mov	ip, sp
  memmove(buf, &msg, sizeof(msg));
    2280:	27ff      	movs	r7, #255	; 0xff
    2282:	466e      	mov	r6, sp
    2284:	f10d 0e18 	add.w	lr, sp, #24
  CAN_message_t msg_copy = msg;
    2288:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    228c:	e895 0003 	ldmia.w	r5, {r0, r1}
    2290:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    2294:	f88d 7014 	strb.w	r7, [sp, #20]
    2298:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    229a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    229e:	e89c 0003 	ldmia.w	ip, {r0, r1}
    22a2:	e88e 0003 	stmia.w	lr, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    22a6:	2218      	movs	r2, #24
    22a8:	f641 300a 	movw	r0, #6922	; 0x1b0a
    22ac:	eb0d 0102 	add.w	r1, sp, r2
    22b0:	4420      	add	r0, r4
    22b2:	f7ff ff7b 	bl	21ac <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    22b6:	f04f 30ff 	mov.w	r0, #4294967295
}
    22ba:	b00d      	add	sp, #52	; 0x34
    22bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    22be:	6830      	ldr	r0, [r6, #0]
    22c0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    22c4:	d040      	beq.n	2348 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x134>
    22c6:	f7fe f86b 	bl	3a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    22ca:	6833      	ldr	r3, [r6, #0]
    22cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    22d0:	3301      	adds	r3, #1
    22d2:	4283      	cmp	r3, r0
    22d4:	d927      	bls.n	2326 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x112>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    22d6:	491e      	ldr	r1, [pc, #120]	; (2350 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    22d8:	4e1c      	ldr	r6, [pc, #112]	; (234c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x138>)
    22da:	e005      	b.n	22e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd4>
    22dc:	6833      	ldr	r3, [r6, #0]
    22de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    22e2:	3301      	adds	r3, #1
    22e4:	4298      	cmp	r0, r3
    22e6:	d21e      	bcs.n	2326 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x112>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    22e8:	1843      	adds	r3, r0, r1
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    22ea:	1c42      	adds	r2, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    22ec:	4684      	mov	ip, r0
    22ee:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    22f0:	b2d0      	uxtb	r0, r2
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    22f2:	681a      	ldr	r2, [r3, #0]
    22f4:	0112      	lsls	r2, r2, #4
    22f6:	d5f1      	bpl.n	22dc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc8>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    22f8:	681b      	ldr	r3, [r3, #0]
    22fa:	f3c3 6303 	ubfx	r3, r3, #24, #4
    22fe:	2b08      	cmp	r3, #8
    2300:	d019      	beq.n	2336 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x122>
      CAN_message_t msg_copy = msg;
    2302:	466e      	mov	r6, sp
  memmove(buf, &msg, sizeof(msg));
    2304:	466f      	mov	r7, sp
    2306:	f10d 0e18 	add.w	lr, sp, #24
      CAN_message_t msg_copy = msg;
    230a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    230c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    230e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2312:	e886 0003 	stmia.w	r6, {r0, r1}
      msg_copy.mb = first_tx_mb;
    2316:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    231a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    231c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2320:	e896 0003 	ldmia.w	r6, {r0, r1}
    2324:	e7bd      	b.n	22a2 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x8e>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2326:	4b0b      	ldr	r3, [pc, #44]	; (2354 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  return -1;
    2328:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2332:	2b08      	cmp	r3, #8
    2334:	d1e5      	bne.n	2302 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xee>
      writeTxMailbox(first_tx_mb, msg);
    2336:	4620      	mov	r0, r4
    2338:	462a      	mov	r2, r5
    233a:	fa5f f18c 	uxtb.w	r1, ip
    233e:	f7ff fc95 	bl	1c6c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    2342:	2001      	movs	r0, #1
}
    2344:	b00d      	add	sp, #52	; 0x34
    2346:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2348:	6833      	ldr	r3, [r6, #0]
    234a:	e7c4      	b.n	22d6 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc2>
    234c:	401d0000 	.word	0x401d0000
    2350:	0401d008 	.word	0x0401d008
    2354:	401d0070 	.word	0x401d0070

00002358 <can2Sniff(CAN_message_t const&)>:
  BLUE_LED_state = !BLUE_LED_state;
    2358:	4a11      	ldr	r2, [pc, #68]	; (23a0 <can2Sniff(CAN_message_t const&)+0x48>)
  CAN_message_t new_msg = msg;
    235a:	4684      	mov	ip, r0
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    235c:	4911      	ldr	r1, [pc, #68]	; (23a4 <can2Sniff(CAN_message_t const&)+0x4c>)
  BLUE_LED_state = !BLUE_LED_state;
    235e:	7813      	ldrb	r3, [r2, #0]
void can2Sniff(const CAN_message_t &msg) {
    2360:	b510      	push	{r4, lr}
  BLUE_LED_state = !BLUE_LED_state;
    2362:	f083 0301 	eor.w	r3, r3, #1
    2366:	4c10      	ldr	r4, [pc, #64]	; (23a8 <can2Sniff(CAN_message_t const&)+0x50>)
void can2Sniff(const CAN_message_t &msg) {
    2368:	b086      	sub	sp, #24
  BLUE_LED_state = !BLUE_LED_state;
    236a:	7013      	strb	r3, [r2, #0]
    236c:	6823      	ldr	r3, [r4, #0]
  CAN_message_t new_msg = msg;
    236e:	46ee      	mov	lr, sp
    2370:	600b      	str	r3, [r1, #0]
    2372:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    2376:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    237a:	e89c 0003 	ldmia.w	ip, {r0, r1}
    237e:	e88e 0003 	stmia.w	lr, {r0, r1}
  Can1.write(new_msg);
    2382:	4669      	mov	r1, sp
    2384:	4809      	ldr	r0, [pc, #36]	; (23ac <can2Sniff(CAN_message_t const&)+0x54>)
    2386:	f7ff ff45 	bl	2214 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>
  RED_LED_state = !RED_LED_state;
    238a:	4a09      	ldr	r2, [pc, #36]	; (23b0 <can2Sniff(CAN_message_t const&)+0x58>)
    238c:	6820      	ldr	r0, [r4, #0]
    238e:	7813      	ldrb	r3, [r2, #0]
    2390:	4908      	ldr	r1, [pc, #32]	; (23b4 <can2Sniff(CAN_message_t const&)+0x5c>)
    2392:	f083 0301 	eor.w	r3, r3, #1
    2396:	6008      	str	r0, [r1, #0]
    2398:	7013      	strb	r3, [r2, #0]
}
    239a:	b006      	add	sp, #24
    239c:	bd10      	pop	{r4, pc}
    239e:	bf00      	nop
    23a0:	2000605a 	.word	0x2000605a
    23a4:	20005fa0 	.word	0x20005fa0
    23a8:	20006034 	.word	0x20006034
    23ac:	20001088 	.word	0x20001088
    23b0:	2000605c 	.word	0x2000605c
    23b4:	20005fe0 	.word	0x20005fe0

000023b8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
  if ( msg.seq ) {
    23b8:	7d8b      	ldrb	r3, [r1, #22]
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    23ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    23bc:	460d      	mov	r5, r1
    23be:	b08d      	sub	sp, #52	; 0x34
    23c0:	4604      	mov	r4, r0
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    23c2:	4e4b      	ldr	r6, [pc, #300]	; (24f0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x138>)
  if ( msg.seq ) {
    23c4:	2b00      	cmp	r3, #0
    23c6:	d14c      	bne.n	2462 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xaa>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    23c8:	6833      	ldr	r3, [r6, #0]
    23ca:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    23ce:	d025      	beq.n	241c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    23d0:	f7fe f80a 	bl	3e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    23d4:	6833      	ldr	r3, [r6, #0]
    23d6:	4684      	mov	ip, r0
    23d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    23dc:	3301      	adds	r3, #1
    23de:	4298      	cmp	r0, r3
    23e0:	d21e      	bcs.n	2420 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    23e2:	4944      	ldr	r1, [pc, #272]	; (24f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    23e4:	4842      	ldr	r0, [pc, #264]	; (24f0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x138>)
    23e6:	e007      	b.n	23f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    23e8:	6803      	ldr	r3, [r0, #0]
    23ea:	fa5f fc82 	uxtb.w	ip, r2
    23ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    23f2:	3301      	adds	r3, #1
    23f4:	459c      	cmp	ip, r3
    23f6:	d213      	bcs.n	2420 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    23f8:	eb0c 0301 	add.w	r3, ip, r1
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    23fc:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2400:	011b      	lsls	r3, r3, #4
    2402:	681b      	ldr	r3, [r3, #0]
    2404:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2408:	2b08      	cmp	r3, #8
    240a:	d1ed      	bne.n	23e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    240c:	4620      	mov	r0, r4
    240e:	462a      	mov	r2, r5
    2410:	4661      	mov	r1, ip
    2412:	f7ff fbeb 	bl	1bec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    2416:	2001      	movs	r0, #1
}
    2418:	b00d      	add	sp, #52	; 0x34
    241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    241c:	6833      	ldr	r3, [r6, #0]
    241e:	e7e0      	b.n	23e2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    2420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2422:	46ec      	mov	ip, sp
  memmove(buf, &msg, sizeof(msg));
    2424:	27ff      	movs	r7, #255	; 0xff
    2426:	466e      	mov	r6, sp
    2428:	f10d 0e18 	add.w	lr, sp, #24
  CAN_message_t msg_copy = msg;
    242c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2430:	e895 0003 	ldmia.w	r5, {r0, r1}
    2434:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    2438:	f88d 7014 	strb.w	r7, [sp, #20]
    243c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    243e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2442:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2446:	e88e 0003 	stmia.w	lr, {r0, r1}
    244a:	2218      	movs	r2, #24
    244c:	f641 300a 	movw	r0, #6922	; 0x1b0a
    2450:	eb0d 0102 	add.w	r1, sp, r2
    2454:	4420      	add	r0, r4
    2456:	f7ff fea9 	bl	21ac <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    245a:	f04f 30ff 	mov.w	r0, #4294967295
}
    245e:	b00d      	add	sp, #52	; 0x34
    2460:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2462:	6830      	ldr	r0, [r6, #0]
    2464:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    2468:	d040      	beq.n	24ec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x134>
    246a:	f7fd ffbd 	bl	3e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    246e:	6833      	ldr	r3, [r6, #0]
    2470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2474:	3301      	adds	r3, #1
    2476:	4283      	cmp	r3, r0
    2478:	d927      	bls.n	24ca <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x112>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    247a:	491e      	ldr	r1, [pc, #120]	; (24f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    247c:	4e1c      	ldr	r6, [pc, #112]	; (24f0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x138>)
    247e:	e005      	b.n	248c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd4>
    2480:	6833      	ldr	r3, [r6, #0]
    2482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2486:	3301      	adds	r3, #1
    2488:	4298      	cmp	r0, r3
    248a:	d21e      	bcs.n	24ca <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x112>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    248c:	1843      	adds	r3, r0, r1
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    248e:	1c42      	adds	r2, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2490:	4684      	mov	ip, r0
    2492:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2494:	b2d0      	uxtb	r0, r2
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    2496:	681a      	ldr	r2, [r3, #0]
    2498:	0112      	lsls	r2, r2, #4
    249a:	d5f1      	bpl.n	2480 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc8>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    249c:	681b      	ldr	r3, [r3, #0]
    249e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    24a2:	2b08      	cmp	r3, #8
    24a4:	d019      	beq.n	24da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x122>
      CAN_message_t msg_copy = msg;
    24a6:	466e      	mov	r6, sp
  memmove(buf, &msg, sizeof(msg));
    24a8:	466f      	mov	r7, sp
    24aa:	f10d 0e18 	add.w	lr, sp, #24
      CAN_message_t msg_copy = msg;
    24ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    24b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    24b2:	e895 0003 	ldmia.w	r5, {r0, r1}
    24b6:	e886 0003 	stmia.w	r6, {r0, r1}
      msg_copy.mb = first_tx_mb;
    24ba:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    24be:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    24c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    24c4:	e896 0003 	ldmia.w	r6, {r0, r1}
    24c8:	e7bd      	b.n	2446 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x8e>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    24ca:	4b0b      	ldr	r3, [pc, #44]	; (24f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  return -1;
    24cc:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    24d0:	681b      	ldr	r3, [r3, #0]
    24d2:	f3c3 6303 	ubfx	r3, r3, #24, #4
    24d6:	2b08      	cmp	r3, #8
    24d8:	d1e5      	bne.n	24a6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xee>
      writeTxMailbox(first_tx_mb, msg);
    24da:	4620      	mov	r0, r4
    24dc:	462a      	mov	r2, r5
    24de:	fa5f f18c 	uxtb.w	r1, ip
    24e2:	f7ff fb83 	bl	1bec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    24e6:	2001      	movs	r0, #1
}
    24e8:	b00d      	add	sp, #52	; 0x34
    24ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    24ec:	6833      	ldr	r3, [r6, #0]
    24ee:	e7c4      	b.n	247a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc2>
    24f0:	401d4000 	.word	0x401d4000
    24f4:	0401d408 	.word	0x0401d408
    24f8:	401d4070 	.word	0x401d4070

000024fc <can1Sniff(CAN_message_t const&)>:
  YELLOW_LED_state = !YELLOW_LED_state;
    24fc:	4a1c      	ldr	r2, [pc, #112]	; (2570 <can1Sniff(CAN_message_t const&)+0x74>)
  CAN_message_t new_msg = msg;
    24fe:	4684      	mov	ip, r0
    2500:	491c      	ldr	r1, [pc, #112]	; (2574 <can1Sniff(CAN_message_t const&)+0x78>)
  YELLOW_LED_state = !YELLOW_LED_state;
    2502:	7813      	ldrb	r3, [r2, #0]
void can1Sniff(const CAN_message_t &msg) {
    2504:	b570      	push	{r4, r5, r6, lr}
  YELLOW_LED_state = !YELLOW_LED_state;
    2506:	f083 0301 	eor.w	r3, r3, #1
    250a:	4d1b      	ldr	r5, [pc, #108]	; (2578 <can1Sniff(CAN_message_t const&)+0x7c>)
void can1Sniff(const CAN_message_t &msg) {
    250c:	b086      	sub	sp, #24
  if (pgn == 65265){ //0xFEF1
    250e:	f64f 66f1 	movw	r6, #65265	; 0xfef1
  YELLOW_LED_state = !YELLOW_LED_state;
    2512:	7013      	strb	r3, [r2, #0]
    2514:	682b      	ldr	r3, [r5, #0]
  CAN_message_t new_msg = msg;
    2516:	46ee      	mov	lr, sp
    2518:	600b      	str	r3, [r1, #0]
  unsigned long pgn = (msg.id & 0x00FFFF00) >> 8;
    251a:	6804      	ldr	r4, [r0, #0]
  CAN_message_t new_msg = msg;
    251c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  unsigned long pgn = (msg.id & 0x00FFFF00) >> 8;
    2520:	f3c4 240f 	ubfx	r4, r4, #8, #16
  CAN_message_t new_msg = msg;
    2524:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  if (pgn == 65265){ //0xFEF1
    2528:	42b4      	cmp	r4, r6
  CAN_message_t new_msg = msg;
    252a:	e89c 0003 	ldmia.w	ip, {r0, r1}
    252e:	e88e 0003 	stmia.w	lr, {r0, r1}
  if (pgn == 65265){ //0xFEF1
    2532:	d018      	beq.n	2566 <can1Sniff(CAN_message_t const&)+0x6a>
  else if (pgn == 65248){ // Look for another PGN
    2534:	f64f 63e0 	movw	r3, #65248	; 0xfee0
    2538:	429c      	cmp	r4, r3
    253a:	d00d      	beq.n	2558 <can1Sniff(CAN_message_t const&)+0x5c>
  Can2.write(new_msg);
    253c:	4669      	mov	r1, sp
    253e:	480f      	ldr	r0, [pc, #60]	; (257c <can1Sniff(CAN_message_t const&)+0x80>)
    2540:	f7ff ff3a 	bl	23b8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>
  GREEN_LED_state = !GREEN_LED_state;
    2544:	4a0e      	ldr	r2, [pc, #56]	; (2580 <can1Sniff(CAN_message_t const&)+0x84>)
    2546:	6828      	ldr	r0, [r5, #0]
    2548:	7813      	ldrb	r3, [r2, #0]
    254a:	490e      	ldr	r1, [pc, #56]	; (2584 <can1Sniff(CAN_message_t const&)+0x88>)
    254c:	f083 0301 	eor.w	r3, r3, #1
    2550:	6008      	str	r0, [r1, #0]
    2552:	7013      	strb	r3, [r2, #0]
}
    2554:	b006      	add	sp, #24
    2556:	bd70      	pop	{r4, r5, r6, pc}
    new_msg.buf[0]=0x00;
    2558:	2200      	movs	r2, #0
    new_msg.buf[3]=0x33;
    255a:	2333      	movs	r3, #51	; 0x33
    new_msg.buf[0]=0x00;
    255c:	f88d 200c 	strb.w	r2, [sp, #12]
    new_msg.buf[3]=0x33;
    2560:	f88d 300f 	strb.w	r3, [sp, #15]
    2564:	e7ea      	b.n	253c <can1Sniff(CAN_message_t const&)+0x40>
    new_msg.buf[4]=0x44;
    2566:	4a08      	ldr	r2, [pc, #32]	; (2588 <can1Sniff(CAN_message_t const&)+0x8c>)
    2568:	4b08      	ldr	r3, [pc, #32]	; (258c <can1Sniff(CAN_message_t const&)+0x90>)
    256a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    256e:	e7e5      	b.n	253c <can1Sniff(CAN_message_t const&)+0x40>
    2570:	2000605d 	.word	0x2000605d
    2574:	20006050 	.word	0x20006050
    2578:	20006034 	.word	0x20006034
    257c:	2000375c 	.word	0x2000375c
    2580:	2000605b 	.word	0x2000605b
    2584:	20005fc4 	.word	0x20005fc4
    2588:	33221100 	.word	0x33221100
    258c:	77665544 	.word	0x77665544

00002590 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( mb_num == FIFO ) fifo_filter_table[0][0] |= (1UL << 28); /* enable fifo enhancement */
  else mb_filter_table[mb_num][0] |= (1UL << 28); /* enable mb enhancement */
}

FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    2590:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    2594:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
    2598:	00db      	lsls	r3, r3, #3
    259a:	d569      	bpl.n	2670 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe0>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    259c:	4b37      	ldr	r3, [pc, #220]	; (267c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xec>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    259e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    25a2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    25a4:	f04f 0e00 	mov.w	lr, #0
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    }
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    25a8:	f641 49d4 	movw	r9, #7380	; 0x1cd4
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    25ac:	f641 47c4 	movw	r7, #7364	; 0x1cc4
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    25b0:	f3c6 6603 	ubfx	r6, r6, #24, #4
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    25b4:	f641 48c8 	movw	r8, #7368	; 0x1cc8
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    25b8:	00f6      	lsls	r6, r6, #3
    25ba:	3608      	adds	r6, #8
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    25bc:	e009      	b.n	25d2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x42>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    25be:	6813      	ldr	r3, [r2, #0]
    25c0:	0f5b      	lsrs	r3, r3, #29
    25c2:	2b05      	cmp	r3, #5
    25c4:	d034      	beq.n	2630 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xa0>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    25c6:	f10e 0e01 	add.w	lr, lr, #1
    25ca:	fa5f f38e 	uxtb.w	r3, lr
    25ce:	429e      	cmp	r6, r3
    25d0:	d950      	bls.n	2674 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    25d2:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    25d6:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
    25da:	f50c 52e6 	add.w	r2, ip, #7360	; 0x1cc0
    25de:	6813      	ldr	r3, [r2, #0]
    25e0:	0f5b      	lsrs	r3, r3, #29
    25e2:	2b01      	cmp	r3, #1
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    25e4:	6813      	ldr	r3, [r2, #0]
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    25e6:	d00d      	beq.n	2604 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x74>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    25e8:	0f5b      	lsrs	r3, r3, #29
    25ea:	2b02      	cmp	r3, #2
    25ec:	d1e7      	bne.n	25be <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2e>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    25ee:	f85c 3007 	ldr.w	r3, [ip, r7]
    25f2:	428b      	cmp	r3, r1
    25f4:	d8e7      	bhi.n	25c6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
    25f6:	f85c 3008 	ldr.w	r3, [ip, r8]
    25fa:	428b      	cmp	r3, r1
    25fc:	d3e3      	bcc.n	25c6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    25fe:	2001      	movs	r0, #1
      }
    }
  }
  return 0;
}
    2600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    2604:	f413 7f60 	tst.w	r3, #896	; 0x380
    2608:	d0dd      	beq.n	25c6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
    260a:	006d      	lsls	r5, r5, #1
    260c:	2300      	movs	r3, #0
    260e:	e004      	b.n	261a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x8a>
    2610:	6814      	ldr	r4, [r2, #0]
    2612:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    2616:	4563      	cmp	r3, ip
    2618:	d2d5      	bcs.n	25c6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
    261a:	3301      	adds	r3, #1
    261c:	eb05 0c03 	add.w	ip, r5, r3
    2620:	b2db      	uxtb	r3, r3
    2622:	f50c 6ce6 	add.w	ip, ip, #1840	; 0x730
    2626:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    262a:	428c      	cmp	r4, r1
    262c:	d1f0      	bne.n	2610 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x80>
    262e:	e7e6      	b.n	25fe <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2630:	6813      	ldr	r3, [r2, #0]
    2632:	f413 7f60 	tst.w	r3, #896	; 0x380
    2636:	d0c6      	beq.n	25c6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    2638:	44cc      	add	ip, r9
    263a:	006d      	lsls	r5, r5, #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    263c:	2401      	movs	r4, #1
    263e:	e005      	b.n	264c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbc>
    2640:	6813      	ldr	r3, [r2, #0]
    2642:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    2646:	3301      	adds	r3, #1
    2648:	429c      	cmp	r4, r3
    264a:	d2bc      	bcs.n	25c6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    264c:	192b      	adds	r3, r5, r4
    264e:	f8dc a000 	ldr.w	sl, [ip]
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2652:	3401      	adds	r4, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    2654:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
    2658:	ea0a 0a01 	and.w	sl, sl, r1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    265c:	b2e4      	uxtb	r4, r4
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    265e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    2662:	f8dc b000 	ldr.w	fp, [ip]
    2666:	ea03 030b 	and.w	r3, r3, fp
    266a:	459a      	cmp	sl, r3
    266c:	d1e8      	bne.n	2640 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb0>
    266e:	e7c6      	b.n	25fe <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    2670:	2001      	movs	r0, #1
}
    2672:	4770      	bx	lr
  return 0;
    2674:	2000      	movs	r0, #0
}
    2676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    267a:	bf00      	nop
    267c:	401d4000 	.word	0x401d4000

00002680 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:

FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    2680:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    2684:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    2686:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    268a:	f504 5efe 	add.w	lr, r4, #8128	; 0x1fc0
    268e:	f8de 3000 	ldr.w	r3, [lr]
    2692:	00db      	lsls	r3, r3, #3
    2694:	d528      	bpl.n	26e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    2696:	f8de 3000 	ldr.w	r3, [lr]
    269a:	0f5b      	lsrs	r3, r3, #29
    269c:	2b01      	cmp	r3, #1
    269e:	d00b      	beq.n	26b8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    26a0:	f8de 3000 	ldr.w	r3, [lr]
    26a4:	0f5b      	lsrs	r3, r3, #29
    26a6:	2b02      	cmp	r3, #2
    26a8:	d042      	beq.n	2730 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    26aa:	f8de 3000 	ldr.w	r3, [lr]
    26ae:	0f5b      	lsrs	r3, r3, #29
    26b0:	2b05      	cmp	r3, #5
    26b2:	d01b      	beq.n	26ec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    }
  }
  return 0;
    26b4:	2000      	movs	r0, #0
}
    26b6:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    26b8:	f8de 4000 	ldr.w	r4, [lr]
    26bc:	f414 7f60 	tst.w	r4, #896	; 0x380
    26c0:	d0f8      	beq.n	26b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    26c2:	2300      	movs	r3, #0
    26c4:	004d      	lsls	r5, r1, #1
    26c6:	e005      	b.n	26d4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    26c8:	f8de 1000 	ldr.w	r1, [lr]
    26cc:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    26d0:	4563      	cmp	r3, ip
    26d2:	d2ef      	bcs.n	26b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    26d4:	3301      	adds	r3, #1
    26d6:	eb05 0c03 	add.w	ip, r5, r3
    26da:	b2db      	uxtb	r3, r3
    26dc:	f50c 6cfe 	add.w	ip, ip, #2032	; 0x7f0
    26e0:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    26e4:	4294      	cmp	r4, r2
    26e6:	d1ef      	bne.n	26c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    26e8:	2001      	movs	r0, #1
}
    26ea:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    26ec:	f8de 5000 	ldr.w	r5, [lr]
    26f0:	f415 7f60 	tst.w	r5, #896	; 0x380
    26f4:	d0de      	beq.n	26b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    26f6:	f641 75d4 	movw	r5, #8148	; 0x1fd4
    26fa:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    26fc:	2301      	movs	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    26fe:	4425      	add	r5, r4
    2700:	e007      	b.n	2712 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2702:	f8de 4000 	ldr.w	r4, [lr]
    2706:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    270a:	f10c 0c01 	add.w	ip, ip, #1
    270e:	4563      	cmp	r3, ip
    2710:	d2d0      	bcs.n	26b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    2712:	682c      	ldr	r4, [r5, #0]
    2714:	ea04 0c02 	and.w	ip, r4, r2
    2718:	18cc      	adds	r4, r1, r3
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    271a:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    271c:	f504 64fe 	add.w	r4, r4, #2032	; 0x7f0
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2720:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    2722:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    2726:	682e      	ldr	r6, [r5, #0]
    2728:	4034      	ands	r4, r6
    272a:	45a4      	cmp	ip, r4
    272c:	d1e9      	bne.n	2702 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    272e:	e7db      	b.n	26e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    2730:	f641 73c4 	movw	r3, #8132	; 0x1fc4
    2734:	58e3      	ldr	r3, [r4, r3]
    2736:	4293      	cmp	r3, r2
    2738:	d8bc      	bhi.n	26b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    273a:	f641 73c8 	movw	r3, #8136	; 0x1fc8
    273e:	58e0      	ldr	r0, [r4, r3]
    2740:	4290      	cmp	r0, r2
    2742:	bf34      	ite	cc
    2744:	2000      	movcc	r0, #0
    2746:	2001      	movcs	r0, #1
}
    2748:	bd70      	pop	{r4, r5, r6, pc}
    274a:	bf00      	nop

0000274c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    274c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    2750:	f8d3 3cc0 	ldr.w	r3, [r3, #3264]	; 0xcc0
    2754:	00db      	lsls	r3, r3, #3
    2756:	d569      	bpl.n	282c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe0>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    2758:	4b37      	ldr	r3, [pc, #220]	; (2838 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xec>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    275a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    275e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    2760:	f04f 0e00 	mov.w	lr, #0
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    2764:	f641 49d4 	movw	r9, #7380	; 0x1cd4
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    2768:	f641 47c4 	movw	r7, #7364	; 0x1cc4
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    276c:	f3c6 6603 	ubfx	r6, r6, #24, #4
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    2770:	f641 48c8 	movw	r8, #7368	; 0x1cc8
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    2774:	00f6      	lsls	r6, r6, #3
    2776:	3608      	adds	r6, #8
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    2778:	e009      	b.n	278e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x42>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    277a:	6813      	ldr	r3, [r2, #0]
    277c:	0f5b      	lsrs	r3, r3, #29
    277e:	2b05      	cmp	r3, #5
    2780:	d034      	beq.n	27ec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xa0>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    2782:	f10e 0e01 	add.w	lr, lr, #1
    2786:	fa5f f38e 	uxtb.w	r3, lr
    278a:	429e      	cmp	r6, r3
    278c:	d950      	bls.n	2830 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    278e:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    2792:	eb00 0cc5 	add.w	ip, r0, r5, lsl #3
    2796:	f50c 52e6 	add.w	r2, ip, #7360	; 0x1cc0
    279a:	6813      	ldr	r3, [r2, #0]
    279c:	0f5b      	lsrs	r3, r3, #29
    279e:	2b01      	cmp	r3, #1
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    27a0:	6813      	ldr	r3, [r2, #0]
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    27a2:	d00d      	beq.n	27c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x74>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    27a4:	0f5b      	lsrs	r3, r3, #29
    27a6:	2b02      	cmp	r3, #2
    27a8:	d1e7      	bne.n	277a <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2e>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    27aa:	f85c 3007 	ldr.w	r3, [ip, r7]
    27ae:	428b      	cmp	r3, r1
    27b0:	d8e7      	bhi.n	2782 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
    27b2:	f85c 3008 	ldr.w	r3, [ip, r8]
    27b6:	428b      	cmp	r3, r1
    27b8:	d3e3      	bcc.n	2782 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    27ba:	2001      	movs	r0, #1
}
    27bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    27c0:	f413 7f60 	tst.w	r3, #896	; 0x380
    27c4:	d0dd      	beq.n	2782 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
    27c6:	006d      	lsls	r5, r5, #1
    27c8:	2300      	movs	r3, #0
    27ca:	e004      	b.n	27d6 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x8a>
    27cc:	6814      	ldr	r4, [r2, #0]
    27ce:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    27d2:	4563      	cmp	r3, ip
    27d4:	d2d5      	bcs.n	2782 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
    27d6:	3301      	adds	r3, #1
    27d8:	eb05 0c03 	add.w	ip, r5, r3
    27dc:	b2db      	uxtb	r3, r3
    27de:	f50c 6ce6 	add.w	ip, ip, #1840	; 0x730
    27e2:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    27e6:	428c      	cmp	r4, r1
    27e8:	d1f0      	bne.n	27cc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x80>
    27ea:	e7e6      	b.n	27ba <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    27ec:	6813      	ldr	r3, [r2, #0]
    27ee:	f413 7f60 	tst.w	r3, #896	; 0x380
    27f2:	d0c6      	beq.n	2782 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    27f4:	44cc      	add	ip, r9
    27f6:	006d      	lsls	r5, r5, #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    27f8:	2401      	movs	r4, #1
    27fa:	e005      	b.n	2808 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbc>
    27fc:	6813      	ldr	r3, [r2, #0]
    27fe:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    2802:	3301      	adds	r3, #1
    2804:	429c      	cmp	r4, r3
    2806:	d2bc      	bcs.n	2782 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x36>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    2808:	192b      	adds	r3, r5, r4
    280a:	f8dc a000 	ldr.w	sl, [ip]
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    280e:	3401      	adds	r4, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    2810:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
    2814:	ea0a 0a01 	and.w	sl, sl, r1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    2818:	b2e4      	uxtb	r4, r4
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    281a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    281e:	f8dc b000 	ldr.w	fp, [ip]
    2822:	ea03 030b 	and.w	r3, r3, fp
    2826:	459a      	cmp	sl, r3
    2828:	d1e8      	bne.n	27fc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb0>
    282a:	e7c6      	b.n	27ba <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    282c:	2001      	movs	r0, #1
}
    282e:	4770      	bx	lr
  return 0;
    2830:	2000      	movs	r0, #0
}
    2832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2836:	bf00      	nop
    2838:	401d0000 	.word	0x401d0000

0000283c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    283c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    2840:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    2842:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    2846:	f504 5efe 	add.w	lr, r4, #8128	; 0x1fc0
    284a:	f8de 3000 	ldr.w	r3, [lr]
    284e:	00db      	lsls	r3, r3, #3
    2850:	d528      	bpl.n	28a4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    2852:	f8de 3000 	ldr.w	r3, [lr]
    2856:	0f5b      	lsrs	r3, r3, #29
    2858:	2b01      	cmp	r3, #1
    285a:	d00b      	beq.n	2874 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    285c:	f8de 3000 	ldr.w	r3, [lr]
    2860:	0f5b      	lsrs	r3, r3, #29
    2862:	2b02      	cmp	r3, #2
    2864:	d042      	beq.n	28ec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    2866:	f8de 3000 	ldr.w	r3, [lr]
    286a:	0f5b      	lsrs	r3, r3, #29
    286c:	2b05      	cmp	r3, #5
    286e:	d01b      	beq.n	28a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
  return 0;
    2870:	2000      	movs	r0, #0
}
    2872:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    2874:	f8de 4000 	ldr.w	r4, [lr]
    2878:	f414 7f60 	tst.w	r4, #896	; 0x380
    287c:	d0f8      	beq.n	2870 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    287e:	2300      	movs	r3, #0
    2880:	004d      	lsls	r5, r1, #1
    2882:	e005      	b.n	2890 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    2884:	f8de 1000 	ldr.w	r1, [lr]
    2888:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    288c:	4563      	cmp	r3, ip
    288e:	d2ef      	bcs.n	2870 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    2890:	3301      	adds	r3, #1
    2892:	eb05 0c03 	add.w	ip, r5, r3
    2896:	b2db      	uxtb	r3, r3
    2898:	f50c 6cfe 	add.w	ip, ip, #2032	; 0x7f0
    289c:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    28a0:	4294      	cmp	r4, r2
    28a2:	d1ef      	bne.n	2884 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    28a4:	2001      	movs	r0, #1
}
    28a6:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    28a8:	f8de 5000 	ldr.w	r5, [lr]
    28ac:	f415 7f60 	tst.w	r5, #896	; 0x380
    28b0:	d0de      	beq.n	2870 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    28b2:	f641 75d4 	movw	r5, #8148	; 0x1fd4
    28b6:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    28b8:	2301      	movs	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    28ba:	4425      	add	r5, r4
    28bc:	e007      	b.n	28ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    28be:	f8de 4000 	ldr.w	r4, [lr]
    28c2:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    28c6:	f10c 0c01 	add.w	ip, ip, #1
    28ca:	4563      	cmp	r3, ip
    28cc:	d2d0      	bcs.n	2870 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    28ce:	682c      	ldr	r4, [r5, #0]
    28d0:	ea04 0c02 	and.w	ip, r4, r2
    28d4:	18cc      	adds	r4, r1, r3
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    28d6:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    28d8:	f504 64fe 	add.w	r4, r4, #2032	; 0x7f0
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    28dc:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    28de:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    28e2:	682e      	ldr	r6, [r5, #0]
    28e4:	4034      	ands	r4, r6
    28e6:	45a4      	cmp	ip, r4
    28e8:	d1e9      	bne.n	28be <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    28ea:	e7db      	b.n	28a4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    28ec:	f641 73c4 	movw	r3, #8132	; 0x1fc4
    28f0:	58e3      	ldr	r3, [r4, r3]
    28f2:	4293      	cmp	r3, r2
    28f4:	d8bc      	bhi.n	2870 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    28f6:	f641 73c8 	movw	r3, #8136	; 0x1fc8
    28fa:	58e0      	ldr	r0, [r4, r3]
    28fc:	4290      	cmp	r0, r2
    28fe:	bf34      	ite	cc
    2900:	2000      	movcc	r0, #0
    2902:	2001      	movcs	r0, #1
}
    2904:	bd70      	pop	{r4, r5, r6, pc}
    2906:	bf00      	nop

00002908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    2908:	8843      	ldrh	r3, [r0, #2]
    290a:	f04f 0c1a 	mov.w	ip, #26
    290e:	b2db      	uxtb	r3, r3
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    2910:	b510      	push	{r4, lr}
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    2912:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    2916:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    2918:	2000      	movs	r0, #0
    291a:	f883 0106 	strb.w	r0, [r3, #262]	; 0x106
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    291e:	8863      	ldrh	r3, [r4, #2]
    2920:	b2db      	uxtb	r3, r3
    2922:	fb0c 4303 	mla	r3, ip, r3, r4
    2926:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    292a:	8860      	ldrh	r0, [r4, #2]
    292c:	b2c0      	uxtb	r0, r0
    292e:	fb0c 4000 	mla	r0, ip, r0, r4
    2932:	f500 7084 	add.w	r0, r0, #264	; 0x108
    2936:	f002 ff67 	bl	5808 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    293a:	8862      	ldrh	r2, [r4, #2]
    293c:	8823      	ldrh	r3, [r4, #0]
    293e:	b292      	uxth	r2, r2
    2940:	b29b      	uxth	r3, r3
    2942:	f483 7380 	eor.w	r3, r3, #256	; 0x100
    2946:	429a      	cmp	r2, r3
    2948:	d104      	bne.n	2954 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    294a:	8823      	ldrh	r3, [r4, #0]
    294c:	3301      	adds	r3, #1
    294e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2952:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    2954:	8863      	ldrh	r3, [r4, #2]
    2956:	3301      	adds	r3, #1
    2958:	f3c3 0308 	ubfx	r3, r3, #0, #9
    295c:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    295e:	88a3      	ldrh	r3, [r4, #4]
    2960:	b29b      	uxth	r3, r3
    2962:	2bff      	cmp	r3, #255	; 0xff
    2964:	d803      	bhi.n	296e <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    2966:	88a3      	ldrh	r3, [r4, #4]
    2968:	3301      	adds	r3, #1
    296a:	b29b      	uxth	r3, r3
    296c:	80a3      	strh	r3, [r4, #4]
}
    296e:	bd10      	pop	{r4, pc}

00002970 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  mb_filter_table[mb_num][4] = id4; // id4
  mb_filter_table[mb_num][5] = id5; // id5
}

FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
  if ( !distribution ) return; /* distribution not enabled */
    2970:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    2974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2978:	b08f      	sub	sp, #60	; 0x3c
  if ( !distribution ) return; /* distribution not enabled */
    297a:	9300      	str	r3, [sp, #0]
    297c:	f893 35c1 	ldrb.w	r3, [r3, #1473]	; 0x5c1
    2980:	2b00      	cmp	r3, #0
    2982:	f000 80bb 	beq.w	2afc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
  CAN_message_t frame = msg;
    2986:	460f      	mov	r7, r1
    2988:	4604      	mov	r4, r0
    298a:	460d      	mov	r5, r1
    298c:	ae02      	add	r6, sp, #8

  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    298e:	f8df c378 	ldr.w	ip, [pc, #888]	; 2d08 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x398>
  CAN_message_t frame = msg;
    2992:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2994:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2996:	e897 0003 	ldmia.w	r7, {r0, r1}
    299a:	e886 0003 	stmia.w	r6, {r0, r1}
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    299e:	f8dc 3000 	ldr.w	r3, [ip]
    29a2:	009b      	lsls	r3, r3, #2
    29a4:	d56b      	bpl.n	2a7e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x10e>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    29a6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    29aa:	2600      	movs	r6, #0
    29ac:	f3c3 6303 	ubfx	r3, r3, #24, #4
    29b0:	46b2      	mov	sl, r6
    29b2:	00db      	lsls	r3, r3, #3
    29b4:	f103 0b08 	add.w	fp, r3, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    29b8:	e00e      	b.n	29d8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
            frame.mb = FIFO;
            struct2queueRx(frame);
          }
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    29ba:	0f5b      	lsrs	r3, r3, #29
    29bc:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    29be:	f8d9 3000 	ldr.w	r3, [r9]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    29c2:	f000 80c3 	beq.w	2b4c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1dc>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
          frame.mb = FIFO;
          struct2queueRx(frame);
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    29c6:	0f5b      	lsrs	r3, r3, #29
    29c8:	2b05      	cmp	r3, #5
    29ca:	f000 8131 	beq.w	2c30 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2c0>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    29ce:	3601      	adds	r6, #1
    29d0:	fa5f fa86 	uxtb.w	sl, r6
    29d4:	45d3      	cmp	fp, sl
    29d6:	d952      	bls.n	2a7e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x10e>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    29d8:	f995 3014 	ldrsb.w	r3, [r5, #20]
    29dc:	2b63      	cmp	r3, #99	; 0x63
    29de:	d04e      	beq.n	2a7e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x10e>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    29e0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    29e4:	eb04 08c7 	add.w	r8, r4, r7, lsl #3
    29e8:	f508 59e6 	add.w	r9, r8, #7360	; 0x1cc0
    29ec:	f8d9 3000 	ldr.w	r3, [r9]
    29f0:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    29f4:	d0eb      	beq.n	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    29f6:	f8d9 3000 	ldr.w	r3, [r9]
    29fa:	0f5b      	lsrs	r3, r3, #29
    29fc:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    29fe:	f8d9 3000 	ldr.w	r3, [r9]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2a02:	d1da      	bne.n	29ba <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4a>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2a04:	f3c3 4300 	ubfx	r3, r3, #16, #1
    2a08:	79ea      	ldrb	r2, [r5, #7]
    2a0a:	429a      	cmp	r2, r3
    2a0c:	d1df      	bne.n	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2a0e:	f8d9 3000 	ldr.w	r3, [r9]
    2a12:	f413 7f60 	tst.w	r3, #896	; 0x380
    2a16:	d0da      	beq.n	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
    2a18:	2300      	movs	r3, #0
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2a1a:	007f      	lsls	r7, r7, #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2a1c:	4698      	mov	r8, r3
    2a1e:	e007      	b.n	2a30 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xc0>
    2a20:	f8d9 3000 	ldr.w	r3, [r9]
    2a24:	fa5f f888 	uxtb.w	r8, r8
    2a28:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    2a2c:	4598      	cmp	r8, r3
    2a2e:	d2ce      	bcs.n	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2a30:	f108 0801 	add.w	r8, r8, #1
    2a34:	9a02      	ldr	r2, [sp, #8]
    2a36:	eb07 0308 	add.w	r3, r7, r8
    2a3a:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
    2a3e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    2a42:	429a      	cmp	r2, r3
    2a44:	d1ec      	bne.n	2a20 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb0>
  if ( !isEventsUsed ) {	
    2a46:	9b00      	ldr	r3, [sp, #0]
            frame.mb = FIFO;
    2a48:	f04f 0263 	mov.w	r2, #99	; 0x63
  if ( !isEventsUsed ) {	
    2a4c:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
            frame.mb = FIFO;
    2a50:	f88d 201c 	strb.w	r2, [sp, #28]
  if ( !isEventsUsed ) {	
    2a54:	2b00      	cmp	r3, #0
    2a56:	f000 8133 	beq.w	2cc0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x350>
  memmove(buf, &msg, sizeof(msg));
    2a5a:	f10d 0e08 	add.w	lr, sp, #8
    2a5e:	f10d 0c20 	add.w	ip, sp, #32
    2a62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2a66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2a6a:	e89e 0003 	ldmia.w	lr, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    2a6e:	2218      	movs	r2, #24
    2a70:	e88c 0003 	stmia.w	ip, {r0, r1}
    2a74:	a908      	add	r1, sp, #32
    2a76:	1d20      	adds	r0, r4, #4
    2a78:	f7ff ff46 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    2a7c:	e7d0      	b.n	2a20 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb0>
        }
      }
    } /* end of fifo scan */
  } /* end of fifo checking */

  frame.idhit = 0;
    2a7e:	2300      	movs	r3, #0
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2a80:	4fa1      	ldr	r7, [pc, #644]	; (2d08 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x398>)
  frame.idhit = 0;
    2a82:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2a86:	683e      	ldr	r6, [r7, #0]
    2a88:	f016 5600 	ands.w	r6, r6, #536870912	; 0x20000000
    2a8c:	d039      	beq.n	2b02 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x192>
    2a8e:	f7fd fc87 	bl	3a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>

  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2a92:	683b      	ldr	r3, [r7, #0]
    2a94:	4606      	mov	r6, r0
    2a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2a9a:	3301      	adds	r3, #1
    2a9c:	4283      	cmp	r3, r0
    2a9e:	d92d      	bls.n	2afc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
  rxBuffer.push_back(buf, sizeof(CAN_message_t));
    2aa0:	f104 0b04 	add.w	fp, r4, #4
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2aa4:	f8df a260 	ldr.w	sl, [pc, #608]	; 2d08 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x398>
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    2aa8:	f995 3014 	ldrsb.w	r3, [r5, #20]
    2aac:	42b3      	cmp	r3, r6
    2aae:	d01c      	beq.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    2ab0:	eb06 0846 	add.w	r8, r6, r6, lsl #1
    2ab4:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
    2ab8:	f502 57fe 	add.w	r7, r2, #8128	; 0x1fc0
    2abc:	683b      	ldr	r3, [r7, #0]
    2abe:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    2ac2:	d012      	beq.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    2ac4:	683b      	ldr	r3, [r7, #0]
    2ac6:	79e9      	ldrb	r1, [r5, #7]
    2ac8:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    2acc:	4299      	cmp	r1, r3
    2ace:	d10c      	bne.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2ad0:	683b      	ldr	r3, [r7, #0]
    2ad2:	0f5b      	lsrs	r3, r3, #29
    2ad4:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2ad6:	683b      	ldr	r3, [r7, #0]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2ad8:	d067      	beq.n	2baa <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x23a>
          frame.mb = i;
          struct2queueRx(frame);
        }
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    2ada:	0f5b      	lsrs	r3, r3, #29
    2adc:	2b02      	cmp	r3, #2
    2ade:	d012      	beq.n	2b06 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x196>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    2ae0:	683b      	ldr	r3, [r7, #0]
    2ae2:	0f5b      	lsrs	r3, r3, #29
    2ae4:	2b05      	cmp	r3, #5
    2ae6:	f000 8092 	beq.w	2c0e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x29e>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2aea:	f8da 3000 	ldr.w	r3, [sl]
    2aee:	3601      	adds	r6, #1
    2af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2af4:	b2f6      	uxtb	r6, r6
    2af6:	3301      	adds	r3, #1
    2af8:	429e      	cmp	r6, r3
    2afa:	d3d5      	bcc.n	2aa8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x138>
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
  } /* end of mb scan */
}
    2afc:	b00f      	add	sp, #60	; 0x3c
    2afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2b02:	683b      	ldr	r3, [r7, #0]
    2b04:	e7cc      	b.n	2aa0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x130>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    2b06:	f641 73c4 	movw	r3, #8132	; 0x1fc4
    2b0a:	58d1      	ldr	r1, [r2, r3]
    2b0c:	9b02      	ldr	r3, [sp, #8]
    2b0e:	428b      	cmp	r3, r1
    2b10:	d3eb      	bcc.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    2b12:	f641 71c8 	movw	r1, #8136	; 0x1fc8
    2b16:	5852      	ldr	r2, [r2, r1]
    2b18:	4293      	cmp	r3, r2
    2b1a:	d8e6      	bhi.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
  if ( !isEventsUsed ) {	
    2b1c:	9b00      	ldr	r3, [sp, #0]
        frame.mb = i;
    2b1e:	f88d 601c 	strb.w	r6, [sp, #28]
  if ( !isEventsUsed ) {	
    2b22:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
    2b26:	2b00      	cmp	r3, #0
    2b28:	f000 80dc 	beq.w	2ce4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x374>
  memmove(buf, &msg, sizeof(msg));
    2b2c:	f10d 0c08 	add.w	ip, sp, #8
    2b30:	af08      	add	r7, sp, #32
    2b32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    2b36:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    2b38:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2b3c:	2218      	movs	r2, #24
    2b3e:	e887 0003 	stmia.w	r7, {r0, r1}
    2b42:	a908      	add	r1, sp, #32
    2b44:	4658      	mov	r0, fp
    2b46:	f7ff fedf 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    2b4a:	e7ce      	b.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2b4c:	f3c3 4300 	ubfx	r3, r3, #16, #1
    2b50:	79ea      	ldrb	r2, [r5, #7]
    2b52:	429a      	cmp	r2, r3
    2b54:	f47f af3b 	bne.w	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    2b58:	f641 43c4 	movw	r3, #7364	; 0x1cc4
    2b5c:	f858 2003 	ldr.w	r2, [r8, r3]
    2b60:	9b02      	ldr	r3, [sp, #8]
    2b62:	4293      	cmp	r3, r2
    2b64:	f4ff af33 	bcc.w	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
    2b68:	f641 42c8 	movw	r2, #7368	; 0x1cc8
    2b6c:	f858 2002 	ldr.w	r2, [r8, r2]
    2b70:	4293      	cmp	r3, r2
    2b72:	f63f af2c 	bhi.w	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
          frame.mb = FIFO;
    2b76:	f04f 0363 	mov.w	r3, #99	; 0x63
    2b7a:	f88d 301c 	strb.w	r3, [sp, #28]
  if ( !isEventsUsed ) {	
    2b7e:	9b00      	ldr	r3, [sp, #0]
    2b80:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
    2b84:	2b00      	cmp	r3, #0
    2b86:	f000 80b5 	beq.w	2cf4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x384>
  memmove(buf, &msg, sizeof(msg));
    2b8a:	f10d 0c08 	add.w	ip, sp, #8
    2b8e:	af08      	add	r7, sp, #32
    2b90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    2b94:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    2b96:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2b9a:	2218      	movs	r2, #24
    2b9c:	e887 0003 	stmia.w	r7, {r0, r1}
    2ba0:	a908      	add	r1, sp, #32
    2ba2:	1d20      	adds	r0, r4, #4
    2ba4:	f7ff feb0 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    2ba8:	e711      	b.n	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2baa:	f413 7f60 	tst.w	r3, #896	; 0x380
    2bae:	d09c      	beq.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    2bb0:	2300      	movs	r3, #0
        if ( frame.id == mb_filter_table[i][p+1] ) {
    2bb2:	ea4f 0848 	mov.w	r8, r8, lsl #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2bb6:	4699      	mov	r9, r3
    2bb8:	e006      	b.n	2bc8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x258>
    2bba:	683b      	ldr	r3, [r7, #0]
    2bbc:	fa5f f989 	uxtb.w	r9, r9
    2bc0:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    2bc4:	4599      	cmp	r9, r3
    2bc6:	d290      	bcs.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    2bc8:	f109 0901 	add.w	r9, r9, #1
    2bcc:	9a02      	ldr	r2, [sp, #8]
    2bce:	eb08 0309 	add.w	r3, r8, r9
    2bd2:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
    2bd6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    2bda:	429a      	cmp	r2, r3
    2bdc:	d1ed      	bne.n	2bba <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x24a>
  if ( !isEventsUsed ) {	
    2bde:	9b00      	ldr	r3, [sp, #0]
          frame.mb = i;
    2be0:	f88d 601c 	strb.w	r6, [sp, #28]
  if ( !isEventsUsed ) {	
    2be4:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
    2be8:	b1d3      	cbz	r3, 2c20 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2b0>
  memmove(buf, &msg, sizeof(msg));
    2bea:	f10d 0e08 	add.w	lr, sp, #8
    2bee:	f10d 0c20 	add.w	ip, sp, #32
    2bf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2bf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2bfa:	e89e 0003 	ldmia.w	lr, {r0, r1}
    2bfe:	2218      	movs	r2, #24
    2c00:	e88c 0003 	stmia.w	ip, {r0, r1}
    2c04:	a908      	add	r1, sp, #32
    2c06:	4658      	mov	r0, fp
    2c08:	f7ff fe7e 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    2c0c:	e7d5      	b.n	2bba <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x24a>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    2c0e:	9a02      	ldr	r2, [sp, #8]
    2c10:	4631      	mov	r1, r6
    2c12:	4620      	mov	r0, r4
    2c14:	f7ff fe12 	bl	283c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    2c18:	2800      	cmp	r0, #0
    2c1a:	f43f af66 	beq.w	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    2c1e:	e77d      	b.n	2b1c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1ac>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    2c20:	aa02      	add	r2, sp, #8
    2c22:	a908      	add	r1, sp, #32
    2c24:	4620      	mov	r0, r4
    2c26:	f88d 6020 	strb.w	r6, [sp, #32]
    2c2a:	f7ff f85f 	bl	1cec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    2c2e:	e7c4      	b.n	2bba <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x24a>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    2c30:	f8d9 3000 	ldr.w	r3, [r9]
    2c34:	f413 7f60 	tst.w	r3, #896	; 0x380
    2c38:	f43f aec9 	beq.w	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2c3c:	f641 43d4 	movw	r3, #7380	; 0x1cd4
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    2c40:	9501      	str	r5, [sp, #4]
    2c42:	f04f 0901 	mov.w	r9, #1
    2c46:	4655      	mov	r5, sl
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2c48:	4443      	add	r3, r8
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    2c4a:	469a      	mov	sl, r3
    2c4c:	e00b      	b.n	2c66 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2f6>
    2c4e:	f508 53e6 	add.w	r3, r8, #7360	; 0x1cc0
    2c52:	f109 0901 	add.w	r9, r9, #1
    2c56:	681b      	ldr	r3, [r3, #0]
    2c58:	fa5f f989 	uxtb.w	r9, r9
    2c5c:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    2c60:	3301      	adds	r3, #1
    2c62:	4599      	cmp	r9, r3
    2c64:	d22a      	bcs.n	2cbc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x34c>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2c66:	eb09 0347 	add.w	r3, r9, r7, lsl #1
    2c6a:	f8da 2000 	ldr.w	r2, [sl]
    2c6e:	9902      	ldr	r1, [sp, #8]
    2c70:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
    2c74:	400a      	ands	r2, r1
    2c76:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    2c7a:	f8da 1000 	ldr.w	r1, [sl]
    2c7e:	400b      	ands	r3, r1
    2c80:	429a      	cmp	r2, r3
    2c82:	d1e4      	bne.n	2c4e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2de>
            frame.mb = FIFO;
    2c84:	f04f 0363 	mov.w	r3, #99	; 0x63
  memmove(buf, &msg, sizeof(msg));
    2c88:	f10d 0e08 	add.w	lr, sp, #8
    2c8c:	f10d 0c20 	add.w	ip, sp, #32
            frame.idhit = i;
    2c90:	f88d 500e 	strb.w	r5, [sp, #14]
            frame.mb = FIFO;
    2c94:	f88d 301c 	strb.w	r3, [sp, #28]
  if ( !isEventsUsed ) {	
    2c98:	9b00      	ldr	r3, [sp, #0]
    2c9a:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
    2c9e:	b1bb      	cbz	r3, 2cd0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x360>
  memmove(buf, &msg, sizeof(msg));
    2ca0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2ca4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2ca8:	e89e 0003 	ldmia.w	lr, {r0, r1}
    2cac:	2218      	movs	r2, #24
    2cae:	e88c 0003 	stmia.w	ip, {r0, r1}
    2cb2:	a908      	add	r1, sp, #32
    2cb4:	1d20      	adds	r0, r4, #4
    2cb6:	f7ff fe27 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    2cba:	e7c8      	b.n	2c4e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2de>
    2cbc:	9d01      	ldr	r5, [sp, #4]
    2cbe:	e686      	b.n	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    2cc0:	f88d 2020 	strb.w	r2, [sp, #32]
    2cc4:	a908      	add	r1, sp, #32
    2cc6:	aa02      	add	r2, sp, #8
    2cc8:	4620      	mov	r0, r4
    2cca:	f7ff f80f 	bl	1cec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    2cce:	e6a7      	b.n	2a20 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb0>
    2cd0:	f04f 0363 	mov.w	r3, #99	; 0x63
    2cd4:	4672      	mov	r2, lr
    2cd6:	4661      	mov	r1, ip
    2cd8:	4620      	mov	r0, r4
    2cda:	f88d 3020 	strb.w	r3, [sp, #32]
    2cde:	f7ff f805 	bl	1cec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    2ce2:	e7b4      	b.n	2c4e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2de>
    2ce4:	aa02      	add	r2, sp, #8
    2ce6:	a908      	add	r1, sp, #32
    2ce8:	4620      	mov	r0, r4
    2cea:	f88d 6020 	strb.w	r6, [sp, #32]
    2cee:	f7fe fffd 	bl	1cec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    2cf2:	e6fa      	b.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    2cf4:	f04f 0363 	mov.w	r3, #99	; 0x63
    2cf8:	aa02      	add	r2, sp, #8
    2cfa:	a908      	add	r1, sp, #32
    2cfc:	4620      	mov	r0, r4
    2cfe:	f88d 3020 	strb.w	r3, [sp, #32]
    2d02:	f7fe fff3 	bl	1cec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    2d06:	e662      	b.n	29ce <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
    2d08:	401d0000 	.word	0x401d0000

00002d0c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    2d10:	4db7      	ldr	r5, [pc, #732]	; (2ff0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e4>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2d12:	b099      	sub	sp, #100	; 0x64
  return (((uint64_t)FLEXCANb_IMASK2(_bus) << 32) | FLEXCANb_IMASK1(_bus));
    2d14:	4eb7      	ldr	r6, [pc, #732]	; (2ff4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e8>)
  CAN_message_t msg; // setup a temporary storage buffer
    2d16:	ac06      	add	r4, sp, #24
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2d18:	9001      	str	r0, [sp, #4]
  CAN_message_t msg; // setup a temporary storage buffer
    2d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2d1e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2d22:	e884 0003 	stmia.w	r4, {r0, r1}
  return (((uint64_t)FLEXCANb_IMASK2(_bus) << 32) | FLEXCANb_IMASK1(_bus));
    2d26:	6a75      	ldr	r5, [r6, #36]	; 0x24
    2d28:	f8d6 b028 	ldr.w	fp, [r6, #40]	; 0x28
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    2d2c:	6af7      	ldr	r7, [r6, #44]	; 0x2c
    2d2e:	6b31      	ldr	r1, [r6, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2d30:	6833      	ldr	r3, [r6, #0]
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    2d32:	9100      	str	r1, [sp, #0]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2d34:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
    2d38:	d103      	bne.n	2d42 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    2d3a:	6832      	ldr	r2, [r6, #0]
    2d3c:	0090      	lsls	r0, r2, #2
    2d3e:	f100 815d 	bmi.w	2ffc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2d42:	9b00      	ldr	r3, [sp, #0]
    2d44:	f043 0301 	orr.w	r3, r3, #1
    2d48:	2f00      	cmp	r7, #0
    2d4a:	f000 814d 	beq.w	2fe8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2dc>
    2d4e:	fab7 f387 	clz	r3, r7
    2d52:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2d56:	4ca7      	ldr	r4, [pc, #668]	; (2ff4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e8>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2d58:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2d5c:	6823      	ldr	r3, [r4, #0]
    2d5e:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    2d62:	f000 81db 	beq.w	311c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x410>
    2d66:	f7fd fb1b 	bl	3a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2d6a:	6823      	ldr	r3, [r4, #0]
    2d6c:	4684      	mov	ip, r0
    2d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2d72:	3301      	adds	r3, #1
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    2d74:	4283      	cmp	r3, r0
    2d76:	f240 80c6 	bls.w	2f06 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    2d7a:	4582      	cmp	sl, r0
    2d7c:	f240 80c3 	bls.w	2f06 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
        uint16_t size() { return _available; }
    2d80:	9b01      	ldr	r3, [sp, #4]
    2d82:	f10c 0601 	add.w	r6, ip, #1
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    2d86:	f8df 926c 	ldr.w	r9, [pc, #620]	; 2ff4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e8>
    2d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2d8e:	b2f4      	uxtb	r4, r6
    2d90:	9702      	str	r7, [sp, #8]
    2d92:	9303      	str	r3, [sp, #12]
    2d94:	465b      	mov	r3, fp
    2d96:	46d3      	mov	fp, sl
    2d98:	469a      	mov	sl, r3
    2d9a:	e019      	b.n	2dd0 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xc4>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    2d9c:	2804      	cmp	r0, #4
    2d9e:	f000 80bc 	beq.w	2f1a <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20e>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2da2:	2808      	cmp	r0, #8
    2da4:	f000 80f1 	beq.w	2f8a <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x27e>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2da8:	f8d9 3000 	ldr.w	r3, [r9]
    2dac:	fa5f fc86 	uxtb.w	ip, r6
    2db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2db4:	3301      	adds	r3, #1
    2db6:	45e3      	cmp	fp, ip
    2db8:	bf88      	it	hi
    2dba:	42a3      	cmphi	r3, r4
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    2dbc:	f104 0401 	add.w	r4, r4, #1
    2dc0:	bf94      	ite	ls
    2dc2:	2301      	movls	r3, #1
    2dc4:	2300      	movhi	r3, #0
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	f040 809d 	bne.w	2f06 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    2dcc:	f10c 0601 	add.w	r6, ip, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    2dd0:	f1cc 0120 	rsb	r1, ip, #32
    2dd4:	f1ac 0220 	sub.w	r2, ip, #32
    2dd8:	fa2a f30c 	lsr.w	r3, sl, ip
    2ddc:	fa05 f001 	lsl.w	r0, r5, r1
    2de0:	4303      	orrs	r3, r0
    2de2:	fa25 f002 	lsr.w	r0, r5, r2
    2de6:	4303      	orrs	r3, r0
    2de8:	07d8      	lsls	r0, r3, #31
    2dea:	d5dd      	bpl.n	2da8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    2dec:	9802      	ldr	r0, [sp, #8]
    2dee:	9b00      	ldr	r3, [sp, #0]
    2df0:	fa00 f101 	lsl.w	r1, r0, r1
    2df4:	fa23 f30c 	lsr.w	r3, r3, ip
    2df8:	430b      	orrs	r3, r1
    2dfa:	fa20 f102 	lsr.w	r1, r0, r2
    2dfe:	430b      	orrs	r3, r1
    2e00:	07d9      	lsls	r1, r3, #31
    2e02:	d5d1      	bpl.n	2da8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    2e04:	4b7c      	ldr	r3, [pc, #496]	; (2ff8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
    2e06:	4463      	add	r3, ip
    2e08:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    2e0a:	6819      	ldr	r1, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    2e0c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
    2e10:	f3c1 6003 	ubfx	r0, r1, #24, #4
    2e14:	f00e 0e0b 	and.w	lr, lr, #11
    2e18:	f1be 0f02 	cmp.w	lr, #2
    2e1c:	d1be      	bne.n	2d9c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x90>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2e1e:	f8d3 e004 	ldr.w	lr, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2e22:	f401 1800 	and.w	r8, r1, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2e26:	f02e 4e60 	bic.w	lr, lr, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2e2a:	f1b8 0f00 	cmp.w	r8, #0
    2e2e:	bf12      	itee	ne
    2e30:	2701      	movne	r7, #1
    2e32:	2700      	moveq	r7, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2e34:	ea4f 4e9e 	moveq.w	lr, lr, lsr #18
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    2e38:	2806      	cmp	r0, #6
      msg.flags.extended = (bool)(code & (1UL << 21));
    2e3a:	f88d 701f 	strb.w	r7, [sp, #31]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2e3e:	f8cd e018 	str.w	lr, [sp, #24]
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    2e42:	d102      	bne.n	2e4a <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x13e>
    2e44:	2001      	movs	r0, #1
    2e46:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
      msg.timestamp = code & 0xFFFF;
    2e4a:	f8ad 101c 	strh.w	r1, [sp, #28]
      msg.len = (code & 0xF0000) >> 16;
    2e4e:	f3c1 4103 	ubfx	r1, r1, #16, #4
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2e52:	f1b8 0f00 	cmp.w	r8, #0
      msg.mb = mb_num;
    2e56:	f88d c02c 	strb.w	ip, [sp, #44]	; 0x2c
      msg.len = (code & 0xF0000) >> 16;
    2e5a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
      msg.bus = busNumber;
    2e5e:	9901      	ldr	r1, [sp, #4]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2e60:	bf14      	ite	ne
    2e62:	f04f 608c 	movne.w	r0, #73400320	; 0x4600000
    2e66:	f04f 6080 	moveq.w	r0, #67108864	; 0x4000000
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2e6a:	f1bc 0f1f 	cmp.w	ip, #31
      msg.bus = busNumber;
    2e6e:	f501 5800 	add.w	r8, r1, #8192	; 0x2000
    2e72:	f898 16d1 	ldrb.w	r1, [r8, #1745]	; 0x6d1
    2e76:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2e7a:	6899      	ldr	r1, [r3, #8]
    2e7c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    2e80:	6899      	ldr	r1, [r3, #8]
    2e82:	ea4f 2111 	mov.w	r1, r1, lsr #8
    2e86:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    2e8a:	6899      	ldr	r1, [r3, #8]
    2e8c:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2e90:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    2e94:	6899      	ldr	r1, [r3, #8]
    2e96:	ea4f 6111 	mov.w	r1, r1, lsr #24
    2e9a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    2e9e:	68d9      	ldr	r1, [r3, #12]
    2ea0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    2ea4:	68d9      	ldr	r1, [r3, #12]
    2ea6:	ea4f 2111 	mov.w	r1, r1, lsr #8
    2eaa:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
    2eae:	68d9      	ldr	r1, [r3, #12]
    2eb0:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2eb4:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
    2eb8:	68d9      	ldr	r1, [r3, #12]
    2eba:	ea4f 6111 	mov.w	r1, r1, lsr #24
    2ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2ec2:	6018      	str	r0, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    2ec4:	f8d9 3008 	ldr.w	r3, [r9, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2ec8:	f04f 0301 	mov.w	r3, #1
    2ecc:	d867      	bhi.n	2f9e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x292>
    2ece:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    2ed2:	fa03 f30c 	lsl.w	r3, r3, ip
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2ed6:	4661      	mov	r1, ip
    2ed8:	9801      	ldr	r0, [sp, #4]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2eda:	4313      	orrs	r3, r2
    2edc:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2ee0:	9a06      	ldr	r2, [sp, #24]
    2ee2:	f7ff fcab 	bl	283c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    2ee6:	2800      	cmp	r0, #0
    2ee8:	d166      	bne.n	2fb8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ac>
      frame_distribution(msg);
    2eea:	a906      	add	r1, sp, #24
    2eec:	9801      	ldr	r0, [sp, #4]
    2eee:	f7ff fd3f 	bl	2970 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    2ef2:	a806      	add	r0, sp, #24
    2ef4:	f3af 8000 	nop.w
      ext_output2(msg);
    2ef8:	a806      	add	r0, sp, #24
    2efa:	f3af 8000 	nop.w
      ext_output3(msg);
    2efe:	a806      	add	r0, sp, #24
    2f00:	f3af 8000 	nop.w
    2f04:	e750      	b.n	2da8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
  FLEXCANb_ESR1(_bus) |= FLEXCANb_ESR1(_bus);
    2f06:	4b3b      	ldr	r3, [pc, #236]	; (2ff4 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e8>)
    2f08:	6a19      	ldr	r1, [r3, #32]
    2f0a:	6a1a      	ldr	r2, [r3, #32]
    2f0c:	430a      	orrs	r2, r1
    2f0e:	621a      	str	r2, [r3, #32]
  asm volatile ("dsb");	
    2f10:	f3bf 8f4f 	dsb	sy
}
    2f14:	b019      	add	sp, #100	; 0x64
    2f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f1a:	9803      	ldr	r0, [sp, #12]
    2f1c:	f8b0 1b0e 	ldrh.w	r1, [r0, #2830]	; 0xb0e
    2f20:	b289      	uxth	r1, r1
      if ( txBuffer.size() ) {
    2f22:	2900      	cmp	r1, #0
    2f24:	f000 80fc 	beq.w	3120 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x414>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2f28:	f8b0 3b0a 	ldrh.w	r3, [r0, #2826]	; 0xb0a
    2f2c:	221a      	movs	r2, #26
    2f2e:	9901      	ldr	r1, [sp, #4]
    2f30:	f003 030f 	and.w	r3, r3, #15
        memmove(&frame, buf, sizeof(frame));
    2f34:	af0c      	add	r7, sp, #48	; 0x30
    2f36:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
    2f3a:	fb02 1303 	mla	r3, r2, r3, r1
    2f3e:	f641 3222 	movw	r2, #6946	; 0x1b22
    2f42:	9704      	str	r7, [sp, #16]
    2f44:	46b8      	mov	r8, r7
    2f46:	1899      	adds	r1, r3, r2
    2f48:	5898      	ldr	r0, [r3, r2]
    2f4a:	f8cd e014 	str.w	lr, [sp, #20]
    2f4e:	460f      	mov	r7, r1
    2f50:	6849      	ldr	r1, [r1, #4]
    2f52:	68ba      	ldr	r2, [r7, #8]
    2f54:	68fb      	ldr	r3, [r7, #12]
    2f56:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2f5a:	6938      	ldr	r0, [r7, #16]
    2f5c:	6979      	ldr	r1, [r7, #20]
    2f5e:	9f05      	ldr	r7, [sp, #20]
    2f60:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    2f64:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2f66:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    2f6a:	e897 0003 	ldmia.w	r7, {r0, r1}
    2f6e:	e888 0003 	stmia.w	r8, {r0, r1}
        if ( frame.mb == -1 ) {
    2f72:	f99d 3044 	ldrsb.w	r3, [sp, #68]	; 0x44
    2f76:	1c5a      	adds	r2, r3, #1
    2f78:	f000 80e1 	beq.w	313e <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x432>
        else if ( frame.mb == mb_num ) {
    2f7c:	459c      	cmp	ip, r3
    2f7e:	f47f af13 	bne.w	2da8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
          writeTxMailbox(frame.mb, frame);
    2f82:	9a04      	ldr	r2, [sp, #16]
    2f84:	fa5f f18c 	uxtb.w	r1, ip
    2f88:	e0db      	b.n	3142 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x436>
        uint16_t size() { return _available; }
    2f8a:	9903      	ldr	r1, [sp, #12]
    2f8c:	f8b1 3b0e 	ldrh.w	r3, [r1, #2830]	; 0xb0e
    2f90:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    2f92:	2b00      	cmp	r3, #0
    2f94:	f000 80b5 	beq.w	3102 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3f6>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2f98:	f8b1 3b0a 	ldrh.w	r3, [r1, #2826]	; 0xb0a
    2f9c:	e7c6      	b.n	2f2c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x220>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    2f9e:	4093      	lsls	r3, r2
    2fa0:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2fa4:	4661      	mov	r1, ip
    2fa6:	9801      	ldr	r0, [sp, #4]
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    2fa8:	4313      	orrs	r3, r2
    2faa:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2fae:	9a06      	ldr	r2, [sp, #24]
    2fb0:	f7ff fc44 	bl	283c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d098      	beq.n	2eea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1de>
  if ( !isEventsUsed ) {	
    2fb8:	f898 35c0 	ldrb.w	r3, [r8, #1472]	; 0x5c0
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	f000 80e8 	beq.w	3192 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x486>
  memmove(buf, &msg, sizeof(msg));
    2fc2:	f10d 0e18 	add.w	lr, sp, #24
    2fc6:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    2fca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    2fce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    2fd2:	e89e 0003 	ldmia.w	lr, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    2fd6:	9b01      	ldr	r3, [sp, #4]
    2fd8:	2218      	movs	r2, #24
    2fda:	e88c 0003 	stmia.w	ip, {r0, r1}
    2fde:	a912      	add	r1, sp, #72	; 0x48
    2fe0:	1d18      	adds	r0, r3, #4
    2fe2:	f7ff fc91 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    2fe6:	e780      	b.n	2eea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1de>
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2fe8:	fab3 f383 	clz	r3, r3
    2fec:	3320      	adds	r3, #32
    2fee:	e6b0      	b.n	2d52 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x46>
    2ff0:	200002c0 	.word	0x200002c0
    2ff4:	401d0000 	.word	0x401d0000
    2ff8:	0401d008 	.word	0x0401d008
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    2ffc:	f01b 0f20 	tst.w	fp, #32
    3000:	f43f ae9f 	beq.w	2d42 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3004:	068a      	lsls	r2, r1, #26
    3006:	f57f ae9c 	bpl.w	2d42 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    300a:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    300e:	4c6b      	ldr	r4, [pc, #428]	; (31bc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4b0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    3010:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.flags.remote = (bool)(code & (1UL << 20));
    3014:	f3c2 5000 	ubfx	r0, r2, #20, #1
      msg.timestamp = code & 0xFFFF;
    3018:	f8ad 201c 	strh.w	r2, [sp, #28]
      msg.flags.extended = (bool)(code & (1UL << 21));
    301c:	2900      	cmp	r1, #0
      msg.len = (code & 0xF0000) >> 16;
    301e:	f3c2 4103 	ubfx	r1, r2, #16, #4
      msg.idhit = code >> 23;
    3022:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.len = (code & 0xF0000) >> 16;
    3026:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    302a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      msg.flags.remote = (bool)(code & (1UL << 20));
    302e:	f88d 0020 	strb.w	r0, [sp, #32]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3032:	bf18      	it	ne
    3034:	2001      	movne	r0, #1
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3036:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    303a:	bf08      	it	eq
    303c:	2000      	moveq	r0, #0
      msg.idhit = code >> 23;
    303e:	f88d 201e 	strb.w	r2, [sp, #30]
    3042:	f04f 0200 	mov.w	r2, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3046:	bf08      	it	eq
    3048:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    304a:	f88d 001f 	strb.w	r0, [sp, #31]
    304e:	a80a      	add	r0, sp, #40	; 0x28
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3050:	9106      	str	r1, [sp, #24]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3052:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    3056:	40d1      	lsrs	r1, r2
    3058:	3208      	adds	r2, #8
    305a:	2a20      	cmp	r2, #32
    305c:	f800 1d01 	strb.w	r1, [r0, #-1]!
    3060:	d1f7      	bne.n	3052 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x346>
    3062:	a80b      	add	r0, sp, #44	; 0x2c
    3064:	4955      	ldr	r1, [pc, #340]	; (31bc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4b0>)
    3066:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    306a:	40da      	lsrs	r2, r3
    306c:	3308      	adds	r3, #8
    306e:	2b20      	cmp	r3, #32
    3070:	f800 2d01 	strb.w	r2, [r0, #-1]!
    3074:	d1f7      	bne.n	3066 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x35a>
      msg.bus = busNumber;
    3076:	9b01      	ldr	r3, [sp, #4]
    3078:	f503 5400 	add.w	r4, r3, #8192	; 0x2000
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    307c:	2363      	movs	r3, #99	; 0x63
    307e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      msg.bus = busNumber;
    3082:	f894 36d1 	ldrb.w	r3, [r4, #1745]	; 0x6d1
    3086:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
      (void)FLEXCANb_TIMER(_bus);
    308a:	688b      	ldr	r3, [r1, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    308c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    308e:	f043 0320 	orr.w	r3, r3, #32
    3092:	630b      	str	r3, [r1, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    3094:	9b00      	ldr	r3, [sp, #0]
    3096:	065b      	lsls	r3, r3, #25
    3098:	d503      	bpl.n	30a2 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x396>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    309a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    309c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    30a0:	630b      	str	r3, [r1, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    30a2:	9b00      	ldr	r3, [sp, #0]
    30a4:	061e      	lsls	r6, r3, #24
    30a6:	d504      	bpl.n	30b2 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    30a8:	4a44      	ldr	r2, [pc, #272]	; (31bc <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4b0>)
    30aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
    30ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    30b0:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    30b2:	9e01      	ldr	r6, [sp, #4]
    30b4:	a906      	add	r1, sp, #24
    30b6:	4630      	mov	r0, r6
    30b8:	f7ff fc5a 	bl	2970 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    30bc:	a806      	add	r0, sp, #24
    30be:	f3af 8000 	nop.w
      ext_output2(msg);
    30c2:	a806      	add	r0, sp, #24
    30c4:	f3af 8000 	nop.w
      ext_output3(msg);
    30c8:	a806      	add	r0, sp, #24
    30ca:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    30ce:	9906      	ldr	r1, [sp, #24]
    30d0:	4630      	mov	r0, r6
    30d2:	f7ff fb3b 	bl	274c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    30d6:	2800      	cmp	r0, #0
    30d8:	f43f ae33 	beq.w	2d42 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
  if ( !isEventsUsed ) {	
    30dc:	f894 35c0 	ldrb.w	r3, [r4, #1472]	; 0x5c0
    30e0:	2b00      	cmp	r3, #0
    30e2:	d060      	beq.n	31a6 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x49a>
  memmove(buf, &msg, sizeof(msg));
    30e4:	ae06      	add	r6, sp, #24
    30e6:	ac12      	add	r4, sp, #72	; 0x48
    30e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    30ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    30ec:	e896 0003 	ldmia.w	r6, {r0, r1}
    30f0:	9b01      	ldr	r3, [sp, #4]
    30f2:	2218      	movs	r2, #24
    30f4:	e884 0003 	stmia.w	r4, {r0, r1}
    30f8:	a912      	add	r1, sp, #72	; 0x48
    30fa:	1d18      	adds	r0, r3, #4
    30fc:	f7ff fc04 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    3100:	e61f      	b.n	2d42 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3102:	f1bc 0f1f 	cmp.w	ip, #31
    3106:	f04f 0301 	mov.w	r3, #1
    310a:	d83b      	bhi.n	3184 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x478>
    310c:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    3110:	fa03 f30c 	lsl.w	r3, r3, ip
    3114:	4313      	orrs	r3, r2
    3116:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
    311a:	e645      	b.n	2da8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    311c:	6823      	ldr	r3, [r4, #0]
    311e:	e62f      	b.n	2d80 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x74>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3120:	f1bc 0f1f 	cmp.w	ip, #31
    3124:	d825      	bhi.n	3172 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x466>
    3126:	2201      	movs	r2, #1
    3128:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
    312c:	fa02 f20c 	lsl.w	r2, r2, ip
    3130:	430a      	orrs	r2, r1
    3132:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    3136:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    313a:	601a      	str	r2, [r3, #0]
    313c:	e634      	b.n	2da8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
          writeTxMailbox(mb_num, frame);
    313e:	9a04      	ldr	r2, [sp, #16]
    3140:	4661      	mov	r1, ip
          writeTxMailbox(frame.mb, frame);
    3142:	9801      	ldr	r0, [sp, #4]
    3144:	f7fe fd92 	bl	1c6c <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    3148:	9a03      	ldr	r2, [sp, #12]
    314a:	f8b2 3b0a 	ldrh.w	r3, [r2, #2826]	; 0xb0a
    314e:	3301      	adds	r3, #1
    3150:	f003 031f 	and.w	r3, r3, #31
    3154:	f8a2 3b0a 	strh.w	r3, [r2, #2826]	; 0xb0a
    if ( _available ) _available--;
    3158:	f8b2 3b0e 	ldrh.w	r3, [r2, #2830]	; 0xb0e
    315c:	b29b      	uxth	r3, r3
    315e:	2b00      	cmp	r3, #0
    3160:	f43f ae22 	beq.w	2da8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
    3164:	f8b2 3b0e 	ldrh.w	r3, [r2, #2830]	; 0xb0e
    3168:	3b01      	subs	r3, #1
    316a:	b29b      	uxth	r3, r3
    316c:	f8a2 3b0e 	strh.w	r3, [r2, #2830]	; 0xb0e
    3170:	e61a      	b.n	2da8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    3172:	2101      	movs	r1, #1
    3174:	fa01 f202 	lsl.w	r2, r1, r2
    3178:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    317c:	430a      	orrs	r2, r1
    317e:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
}
    3182:	e7d8      	b.n	3136 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42a>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    3184:	4093      	lsls	r3, r2
    3186:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
    318a:	4313      	orrs	r3, r2
    318c:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
}
    3190:	e60a      	b.n	2da8 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    3192:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    3196:	aa06      	add	r2, sp, #24
    3198:	a912      	add	r1, sp, #72	; 0x48
    319a:	9801      	ldr	r0, [sp, #4]
    319c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    31a0:	f7fe fda4 	bl	1cec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    31a4:	e6a1      	b.n	2eea <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1de>
    31a6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    31aa:	aa06      	add	r2, sp, #24
    31ac:	a912      	add	r1, sp, #72	; 0x48
    31ae:	9801      	ldr	r0, [sp, #4]
    31b0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    31b4:	f7fe fd9a 	bl	1cec <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    31b8:	e5c3      	b.n	2d42 <FlexCAN_T4<(CAN_DEV_TABLE)1075642368, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    31ba:	bf00      	nop
    31bc:	401d0000 	.word	0x401d0000

000031c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  if ( !distribution ) return; /* distribution not enabled */
    31c0:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    31c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31c8:	b08f      	sub	sp, #60	; 0x3c
  if ( !distribution ) return; /* distribution not enabled */
    31ca:	9300      	str	r3, [sp, #0]
    31cc:	f893 35c1 	ldrb.w	r3, [r3, #1473]	; 0x5c1
    31d0:	2b00      	cmp	r3, #0
    31d2:	f000 80bb 	beq.w	334c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
  CAN_message_t frame = msg;
    31d6:	460f      	mov	r7, r1
    31d8:	4604      	mov	r4, r0
    31da:	460d      	mov	r5, r1
    31dc:	ae02      	add	r6, sp, #8
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    31de:	f8df c378 	ldr.w	ip, [pc, #888]	; 3558 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x398>
  CAN_message_t frame = msg;
    31e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    31e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    31e6:	e897 0003 	ldmia.w	r7, {r0, r1}
    31ea:	e886 0003 	stmia.w	r6, {r0, r1}
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    31ee:	f8dc 3000 	ldr.w	r3, [ip]
    31f2:	009b      	lsls	r3, r3, #2
    31f4:	d56b      	bpl.n	32ce <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x10e>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    31f6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    31fa:	2600      	movs	r6, #0
    31fc:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3200:	46b2      	mov	sl, r6
    3202:	00db      	lsls	r3, r3, #3
    3204:	f103 0b08 	add.w	fp, r3, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    3208:	e00e      	b.n	3228 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    320a:	0f5b      	lsrs	r3, r3, #29
    320c:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    320e:	f8d9 3000 	ldr.w	r3, [r9]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    3212:	f000 80c3 	beq.w	339c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1dc>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    3216:	0f5b      	lsrs	r3, r3, #29
    3218:	2b05      	cmp	r3, #5
    321a:	f000 8131 	beq.w	3480 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2c0>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    321e:	3601      	adds	r6, #1
    3220:	fa5f fa86 	uxtb.w	sl, r6
    3224:	45d3      	cmp	fp, sl
    3226:	d952      	bls.n	32ce <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x10e>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    3228:	f995 3014 	ldrsb.w	r3, [r5, #20]
    322c:	2b63      	cmp	r3, #99	; 0x63
    322e:	d04e      	beq.n	32ce <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x10e>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    3230:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    3234:	eb04 08c7 	add.w	r8, r4, r7, lsl #3
    3238:	f508 59e6 	add.w	r9, r8, #7360	; 0x1cc0
    323c:	f8d9 3000 	ldr.w	r3, [r9]
    3240:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    3244:	d0eb      	beq.n	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    3246:	f8d9 3000 	ldr.w	r3, [r9]
    324a:	0f5b      	lsrs	r3, r3, #29
    324c:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    324e:	f8d9 3000 	ldr.w	r3, [r9]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    3252:	d1da      	bne.n	320a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4a>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    3254:	f3c3 4300 	ubfx	r3, r3, #16, #1
    3258:	79ea      	ldrb	r2, [r5, #7]
    325a:	429a      	cmp	r2, r3
    325c:	d1df      	bne.n	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    325e:	f8d9 3000 	ldr.w	r3, [r9]
    3262:	f413 7f60 	tst.w	r3, #896	; 0x380
    3266:	d0da      	beq.n	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
    3268:	2300      	movs	r3, #0
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    326a:	007f      	lsls	r7, r7, #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    326c:	4698      	mov	r8, r3
    326e:	e007      	b.n	3280 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xc0>
    3270:	f8d9 3000 	ldr.w	r3, [r9]
    3274:	fa5f f888 	uxtb.w	r8, r8
    3278:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    327c:	4598      	cmp	r8, r3
    327e:	d2ce      	bcs.n	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    3280:	f108 0801 	add.w	r8, r8, #1
    3284:	9a02      	ldr	r2, [sp, #8]
    3286:	eb07 0308 	add.w	r3, r7, r8
    328a:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
    328e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    3292:	429a      	cmp	r2, r3
    3294:	d1ec      	bne.n	3270 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb0>
  if ( !isEventsUsed ) {	
    3296:	9b00      	ldr	r3, [sp, #0]
            frame.mb = FIFO;
    3298:	f04f 0263 	mov.w	r2, #99	; 0x63
  if ( !isEventsUsed ) {	
    329c:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
            frame.mb = FIFO;
    32a0:	f88d 201c 	strb.w	r2, [sp, #28]
  if ( !isEventsUsed ) {	
    32a4:	2b00      	cmp	r3, #0
    32a6:	f000 8133 	beq.w	3510 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x350>
  memmove(buf, &msg, sizeof(msg));
    32aa:	f10d 0e08 	add.w	lr, sp, #8
    32ae:	f10d 0c20 	add.w	ip, sp, #32
    32b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    32b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    32ba:	e89e 0003 	ldmia.w	lr, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    32be:	2218      	movs	r2, #24
    32c0:	e88c 0003 	stmia.w	ip, {r0, r1}
    32c4:	a908      	add	r1, sp, #32
    32c6:	1d20      	adds	r0, r4, #4
    32c8:	f7ff fb1e 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    32cc:	e7d0      	b.n	3270 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb0>
  frame.idhit = 0;
    32ce:	2300      	movs	r3, #0
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    32d0:	4fa1      	ldr	r7, [pc, #644]	; (3558 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x398>)
  frame.idhit = 0;
    32d2:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    32d6:	683e      	ldr	r6, [r7, #0]
    32d8:	f016 5600 	ands.w	r6, r6, #536870912	; 0x20000000
    32dc:	d039      	beq.n	3352 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x192>
    32de:	f7fd f883 	bl	3e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    32e2:	683b      	ldr	r3, [r7, #0]
    32e4:	4606      	mov	r6, r0
    32e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    32ea:	3301      	adds	r3, #1
    32ec:	4283      	cmp	r3, r0
    32ee:	d92d      	bls.n	334c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
  rxBuffer.push_back(buf, sizeof(CAN_message_t));
    32f0:	f104 0b04 	add.w	fp, r4, #4
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    32f4:	f8df a260 	ldr.w	sl, [pc, #608]	; 3558 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x398>
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    32f8:	f995 3014 	ldrsb.w	r3, [r5, #20]
    32fc:	42b3      	cmp	r3, r6
    32fe:	d01c      	beq.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    3300:	eb06 0846 	add.w	r8, r6, r6, lsl #1
    3304:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
    3308:	f502 57fe 	add.w	r7, r2, #8128	; 0x1fc0
    330c:	683b      	ldr	r3, [r7, #0]
    330e:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    3312:	d012      	beq.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    3314:	683b      	ldr	r3, [r7, #0]
    3316:	79e9      	ldrb	r1, [r5, #7]
    3318:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    331c:	4299      	cmp	r1, r3
    331e:	d10c      	bne.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    3320:	683b      	ldr	r3, [r7, #0]
    3322:	0f5b      	lsrs	r3, r3, #29
    3324:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    3326:	683b      	ldr	r3, [r7, #0]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    3328:	d067      	beq.n	33fa <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x23a>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    332a:	0f5b      	lsrs	r3, r3, #29
    332c:	2b02      	cmp	r3, #2
    332e:	d012      	beq.n	3356 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x196>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    3330:	683b      	ldr	r3, [r7, #0]
    3332:	0f5b      	lsrs	r3, r3, #29
    3334:	2b05      	cmp	r3, #5
    3336:	f000 8092 	beq.w	345e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x29e>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    333a:	f8da 3000 	ldr.w	r3, [sl]
    333e:	3601      	adds	r6, #1
    3340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3344:	b2f6      	uxtb	r6, r6
    3346:	3301      	adds	r3, #1
    3348:	429e      	cmp	r6, r3
    334a:	d3d5      	bcc.n	32f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x138>
}
    334c:	b00f      	add	sp, #60	; 0x3c
    334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    3352:	683b      	ldr	r3, [r7, #0]
    3354:	e7cc      	b.n	32f0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x130>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    3356:	f641 73c4 	movw	r3, #8132	; 0x1fc4
    335a:	58d1      	ldr	r1, [r2, r3]
    335c:	9b02      	ldr	r3, [sp, #8]
    335e:	428b      	cmp	r3, r1
    3360:	d3eb      	bcc.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    3362:	f641 71c8 	movw	r1, #8136	; 0x1fc8
    3366:	5852      	ldr	r2, [r2, r1]
    3368:	4293      	cmp	r3, r2
    336a:	d8e6      	bhi.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
  if ( !isEventsUsed ) {	
    336c:	9b00      	ldr	r3, [sp, #0]
        frame.mb = i;
    336e:	f88d 601c 	strb.w	r6, [sp, #28]
  if ( !isEventsUsed ) {	
    3372:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
    3376:	2b00      	cmp	r3, #0
    3378:	f000 80dc 	beq.w	3534 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x374>
  memmove(buf, &msg, sizeof(msg));
    337c:	f10d 0c08 	add.w	ip, sp, #8
    3380:	af08      	add	r7, sp, #32
    3382:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    3386:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3388:	e89c 0003 	ldmia.w	ip, {r0, r1}
    338c:	2218      	movs	r2, #24
    338e:	e887 0003 	stmia.w	r7, {r0, r1}
    3392:	a908      	add	r1, sp, #32
    3394:	4658      	mov	r0, fp
    3396:	f7ff fab7 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    339a:	e7ce      	b.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    339c:	f3c3 4300 	ubfx	r3, r3, #16, #1
    33a0:	79ea      	ldrb	r2, [r5, #7]
    33a2:	429a      	cmp	r2, r3
    33a4:	f47f af3b 	bne.w	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    33a8:	f641 43c4 	movw	r3, #7364	; 0x1cc4
    33ac:	f858 2003 	ldr.w	r2, [r8, r3]
    33b0:	9b02      	ldr	r3, [sp, #8]
    33b2:	4293      	cmp	r3, r2
    33b4:	f4ff af33 	bcc.w	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
    33b8:	f641 42c8 	movw	r2, #7368	; 0x1cc8
    33bc:	f858 2002 	ldr.w	r2, [r8, r2]
    33c0:	4293      	cmp	r3, r2
    33c2:	f63f af2c 	bhi.w	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
          frame.mb = FIFO;
    33c6:	f04f 0363 	mov.w	r3, #99	; 0x63
    33ca:	f88d 301c 	strb.w	r3, [sp, #28]
  if ( !isEventsUsed ) {	
    33ce:	9b00      	ldr	r3, [sp, #0]
    33d0:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
    33d4:	2b00      	cmp	r3, #0
    33d6:	f000 80b5 	beq.w	3544 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x384>
  memmove(buf, &msg, sizeof(msg));
    33da:	f10d 0c08 	add.w	ip, sp, #8
    33de:	af08      	add	r7, sp, #32
    33e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    33e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    33e6:	e89c 0003 	ldmia.w	ip, {r0, r1}
    33ea:	2218      	movs	r2, #24
    33ec:	e887 0003 	stmia.w	r7, {r0, r1}
    33f0:	a908      	add	r1, sp, #32
    33f2:	1d20      	adds	r0, r4, #4
    33f4:	f7ff fa88 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    33f8:	e711      	b.n	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    33fa:	f413 7f60 	tst.w	r3, #896	; 0x380
    33fe:	d09c      	beq.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    3400:	2300      	movs	r3, #0
        if ( frame.id == mb_filter_table[i][p+1] ) {
    3402:	ea4f 0848 	mov.w	r8, r8, lsl #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    3406:	4699      	mov	r9, r3
    3408:	e006      	b.n	3418 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x258>
    340a:	683b      	ldr	r3, [r7, #0]
    340c:	fa5f f989 	uxtb.w	r9, r9
    3410:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    3414:	4599      	cmp	r9, r3
    3416:	d290      	bcs.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    3418:	f109 0901 	add.w	r9, r9, #1
    341c:	9a02      	ldr	r2, [sp, #8]
    341e:	eb08 0309 	add.w	r3, r8, r9
    3422:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
    3426:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    342a:	429a      	cmp	r2, r3
    342c:	d1ed      	bne.n	340a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x24a>
  if ( !isEventsUsed ) {	
    342e:	9b00      	ldr	r3, [sp, #0]
          frame.mb = i;
    3430:	f88d 601c 	strb.w	r6, [sp, #28]
  if ( !isEventsUsed ) {	
    3434:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
    3438:	b1d3      	cbz	r3, 3470 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2b0>
  memmove(buf, &msg, sizeof(msg));
    343a:	f10d 0e08 	add.w	lr, sp, #8
    343e:	f10d 0c20 	add.w	ip, sp, #32
    3442:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3446:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    344a:	e89e 0003 	ldmia.w	lr, {r0, r1}
    344e:	2218      	movs	r2, #24
    3450:	e88c 0003 	stmia.w	ip, {r0, r1}
    3454:	a908      	add	r1, sp, #32
    3456:	4658      	mov	r0, fp
    3458:	f7ff fa56 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    345c:	e7d5      	b.n	340a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x24a>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    345e:	9a02      	ldr	r2, [sp, #8]
    3460:	4631      	mov	r1, r6
    3462:	4620      	mov	r0, r4
    3464:	f7ff f90c 	bl	2680 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    3468:	2800      	cmp	r0, #0
    346a:	f43f af66 	beq.w	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    346e:	e77d      	b.n	336c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1ac>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    3470:	aa02      	add	r2, sp, #8
    3472:	a908      	add	r1, sp, #32
    3474:	4620      	mov	r0, r4
    3476:	f88d 6020 	strb.w	r6, [sp, #32]
    347a:	f7fe fd5f 	bl	1f3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    347e:	e7c4      	b.n	340a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x24a>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    3480:	f8d9 3000 	ldr.w	r3, [r9]
    3484:	f413 7f60 	tst.w	r3, #896	; 0x380
    3488:	f43f aec9 	beq.w	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    348c:	f641 43d4 	movw	r3, #7380	; 0x1cd4
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    3490:	9501      	str	r5, [sp, #4]
    3492:	f04f 0901 	mov.w	r9, #1
    3496:	4655      	mov	r5, sl
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    3498:	4443      	add	r3, r8
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    349a:	469a      	mov	sl, r3
    349c:	e00b      	b.n	34b6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2f6>
    349e:	f508 53e6 	add.w	r3, r8, #7360	; 0x1cc0
    34a2:	f109 0901 	add.w	r9, r9, #1
    34a6:	681b      	ldr	r3, [r3, #0]
    34a8:	fa5f f989 	uxtb.w	r9, r9
    34ac:	f3c3 13c2 	ubfx	r3, r3, #7, #3
    34b0:	3301      	adds	r3, #1
    34b2:	4599      	cmp	r9, r3
    34b4:	d22a      	bcs.n	350c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x34c>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    34b6:	eb09 0347 	add.w	r3, r9, r7, lsl #1
    34ba:	f8da 2000 	ldr.w	r2, [sl]
    34be:	9902      	ldr	r1, [sp, #8]
    34c0:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
    34c4:	400a      	ands	r2, r1
    34c6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    34ca:	f8da 1000 	ldr.w	r1, [sl]
    34ce:	400b      	ands	r3, r1
    34d0:	429a      	cmp	r2, r3
    34d2:	d1e4      	bne.n	349e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2de>
            frame.mb = FIFO;
    34d4:	f04f 0363 	mov.w	r3, #99	; 0x63
  memmove(buf, &msg, sizeof(msg));
    34d8:	f10d 0e08 	add.w	lr, sp, #8
    34dc:	f10d 0c20 	add.w	ip, sp, #32
            frame.idhit = i;
    34e0:	f88d 500e 	strb.w	r5, [sp, #14]
            frame.mb = FIFO;
    34e4:	f88d 301c 	strb.w	r3, [sp, #28]
  if ( !isEventsUsed ) {	
    34e8:	9b00      	ldr	r3, [sp, #0]
    34ea:	f893 35c0 	ldrb.w	r3, [r3, #1472]	; 0x5c0
    34ee:	b1bb      	cbz	r3, 3520 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x360>
  memmove(buf, &msg, sizeof(msg));
    34f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    34f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    34f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
    34fc:	2218      	movs	r2, #24
    34fe:	e88c 0003 	stmia.w	ip, {r0, r1}
    3502:	a908      	add	r1, sp, #32
    3504:	1d20      	adds	r0, r4, #4
    3506:	f7ff f9ff 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    350a:	e7c8      	b.n	349e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2de>
    350c:	9d01      	ldr	r5, [sp, #4]
    350e:	e686      	b.n	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    3510:	f88d 2020 	strb.w	r2, [sp, #32]
    3514:	a908      	add	r1, sp, #32
    3516:	aa02      	add	r2, sp, #8
    3518:	4620      	mov	r0, r4
    351a:	f7fe fd0f 	bl	1f3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    351e:	e6a7      	b.n	3270 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb0>
    3520:	f04f 0363 	mov.w	r3, #99	; 0x63
    3524:	4672      	mov	r2, lr
    3526:	4661      	mov	r1, ip
    3528:	4620      	mov	r0, r4
    352a:	f88d 3020 	strb.w	r3, [sp, #32]
    352e:	f7fe fd05 	bl	1f3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    3532:	e7b4      	b.n	349e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x2de>
    3534:	aa02      	add	r2, sp, #8
    3536:	a908      	add	r1, sp, #32
    3538:	4620      	mov	r0, r4
    353a:	f88d 6020 	strb.w	r6, [sp, #32]
    353e:	f7fe fcfd 	bl	1f3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    3542:	e6fa      	b.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17a>
    3544:	f04f 0363 	mov.w	r3, #99	; 0x63
    3548:	aa02      	add	r2, sp, #8
    354a:	a908      	add	r1, sp, #32
    354c:	4620      	mov	r0, r4
    354e:	f88d 3020 	strb.w	r3, [sp, #32]
    3552:	f7fe fcf3 	bl	1f3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    3556:	e662      	b.n	321e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5e>
    3558:	401d4000 	.word	0x401d4000

0000355c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    355c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    3560:	4db7      	ldr	r5, [pc, #732]	; (3840 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e4>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    3562:	b099      	sub	sp, #100	; 0x64
  return (((uint64_t)FLEXCANb_IMASK2(_bus) << 32) | FLEXCANb_IMASK1(_bus));
    3564:	4eb7      	ldr	r6, [pc, #732]	; (3844 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e8>)
  CAN_message_t msg; // setup a temporary storage buffer
    3566:	ac06      	add	r4, sp, #24
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    3568:	9001      	str	r0, [sp, #4]
  CAN_message_t msg; // setup a temporary storage buffer
    356a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    356c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    356e:	e895 0003 	ldmia.w	r5, {r0, r1}
    3572:	e884 0003 	stmia.w	r4, {r0, r1}
  return (((uint64_t)FLEXCANb_IMASK2(_bus) << 32) | FLEXCANb_IMASK1(_bus));
    3576:	6a75      	ldr	r5, [r6, #36]	; 0x24
    3578:	f8d6 b028 	ldr.w	fp, [r6, #40]	; 0x28
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    357c:	6af7      	ldr	r7, [r6, #44]	; 0x2c
    357e:	6b31      	ldr	r1, [r6, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    3580:	6833      	ldr	r3, [r6, #0]
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    3582:	9100      	str	r1, [sp, #0]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    3584:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
    3588:	d103      	bne.n	3592 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    358a:	6832      	ldr	r2, [r6, #0]
    358c:	0090      	lsls	r0, r2, #2
    358e:	f100 815d 	bmi.w	384c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    3592:	9b00      	ldr	r3, [sp, #0]
    3594:	f043 0301 	orr.w	r3, r3, #1
    3598:	2f00      	cmp	r7, #0
    359a:	f000 814d 	beq.w	3838 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2dc>
    359e:	fab7 f387 	clz	r3, r7
    35a2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    35a6:	4ca7      	ldr	r4, [pc, #668]	; (3844 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e8>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    35a8:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    35ac:	6823      	ldr	r3, [r4, #0]
    35ae:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    35b2:	f000 81db 	beq.w	396c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x410>
    35b6:	f7fc ff17 	bl	3e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    35ba:	6823      	ldr	r3, [r4, #0]
    35bc:	4684      	mov	ip, r0
    35be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    35c2:	3301      	adds	r3, #1
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    35c4:	4283      	cmp	r3, r0
    35c6:	f240 80c6 	bls.w	3756 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    35ca:	4582      	cmp	sl, r0
    35cc:	f240 80c3 	bls.w	3756 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
        uint16_t size() { return _available; }
    35d0:	9b01      	ldr	r3, [sp, #4]
    35d2:	f10c 0601 	add.w	r6, ip, #1
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    35d6:	f8df 926c 	ldr.w	r9, [pc, #620]	; 3844 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e8>
    35da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    35de:	b2f4      	uxtb	r4, r6
    35e0:	9702      	str	r7, [sp, #8]
    35e2:	9303      	str	r3, [sp, #12]
    35e4:	465b      	mov	r3, fp
    35e6:	46d3      	mov	fp, sl
    35e8:	469a      	mov	sl, r3
    35ea:	e019      	b.n	3620 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xc4>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    35ec:	2804      	cmp	r0, #4
    35ee:	f000 80bc 	beq.w	376a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20e>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    35f2:	2808      	cmp	r0, #8
    35f4:	f000 80f1 	beq.w	37da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x27e>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    35f8:	f8d9 3000 	ldr.w	r3, [r9]
    35fc:	fa5f fc86 	uxtb.w	ip, r6
    3600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3604:	3301      	adds	r3, #1
    3606:	45e3      	cmp	fp, ip
    3608:	bf88      	it	hi
    360a:	42a3      	cmphi	r3, r4
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    360c:	f104 0401 	add.w	r4, r4, #1
    3610:	bf94      	ite	ls
    3612:	2301      	movls	r3, #1
    3614:	2300      	movhi	r3, #0
    3616:	2b00      	cmp	r3, #0
    3618:	f040 809d 	bne.w	3756 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    361c:	f10c 0601 	add.w	r6, ip, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    3620:	f1cc 0120 	rsb	r1, ip, #32
    3624:	f1ac 0220 	sub.w	r2, ip, #32
    3628:	fa2a f30c 	lsr.w	r3, sl, ip
    362c:	fa05 f001 	lsl.w	r0, r5, r1
    3630:	4303      	orrs	r3, r0
    3632:	fa25 f002 	lsr.w	r0, r5, r2
    3636:	4303      	orrs	r3, r0
    3638:	07d8      	lsls	r0, r3, #31
    363a:	d5dd      	bpl.n	35f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    363c:	9802      	ldr	r0, [sp, #8]
    363e:	9b00      	ldr	r3, [sp, #0]
    3640:	fa00 f101 	lsl.w	r1, r0, r1
    3644:	fa23 f30c 	lsr.w	r3, r3, ip
    3648:	430b      	orrs	r3, r1
    364a:	fa20 f102 	lsr.w	r1, r0, r2
    364e:	430b      	orrs	r3, r1
    3650:	07d9      	lsls	r1, r3, #31
    3652:	d5d1      	bpl.n	35f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    3654:	4b7c      	ldr	r3, [pc, #496]	; (3848 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
    3656:	4463      	add	r3, ip
    3658:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    365a:	6819      	ldr	r1, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    365c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
    3660:	f3c1 6003 	ubfx	r0, r1, #24, #4
    3664:	f00e 0e0b 	and.w	lr, lr, #11
    3668:	f1be 0f02 	cmp.w	lr, #2
    366c:	d1be      	bne.n	35ec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x90>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    366e:	f8d3 e004 	ldr.w	lr, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3672:	f401 1800 	and.w	r8, r1, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3676:	f02e 4e60 	bic.w	lr, lr, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    367a:	f1b8 0f00 	cmp.w	r8, #0
    367e:	bf12      	itee	ne
    3680:	2701      	movne	r7, #1
    3682:	2700      	moveq	r7, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3684:	ea4f 4e9e 	moveq.w	lr, lr, lsr #18
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    3688:	2806      	cmp	r0, #6
      msg.flags.extended = (bool)(code & (1UL << 21));
    368a:	f88d 701f 	strb.w	r7, [sp, #31]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    368e:	f8cd e018 	str.w	lr, [sp, #24]
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    3692:	d102      	bne.n	369a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x13e>
    3694:	2001      	movs	r0, #1
    3696:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
      msg.timestamp = code & 0xFFFF;
    369a:	f8ad 101c 	strh.w	r1, [sp, #28]
      msg.len = (code & 0xF0000) >> 16;
    369e:	f3c1 4103 	ubfx	r1, r1, #16, #4
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    36a2:	f1b8 0f00 	cmp.w	r8, #0
      msg.mb = mb_num;
    36a6:	f88d c02c 	strb.w	ip, [sp, #44]	; 0x2c
      msg.len = (code & 0xF0000) >> 16;
    36aa:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
      msg.bus = busNumber;
    36ae:	9901      	ldr	r1, [sp, #4]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    36b0:	bf14      	ite	ne
    36b2:	f04f 608c 	movne.w	r0, #73400320	; 0x4600000
    36b6:	f04f 6080 	moveq.w	r0, #67108864	; 0x4000000
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    36ba:	f1bc 0f1f 	cmp.w	ip, #31
      msg.bus = busNumber;
    36be:	f501 5800 	add.w	r8, r1, #8192	; 0x2000
    36c2:	f898 16d1 	ldrb.w	r1, [r8, #1745]	; 0x6d1
    36c6:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    36ca:	6899      	ldr	r1, [r3, #8]
    36cc:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    36d0:	6899      	ldr	r1, [r3, #8]
    36d2:	ea4f 2111 	mov.w	r1, r1, lsr #8
    36d6:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    36da:	6899      	ldr	r1, [r3, #8]
    36dc:	ea4f 4111 	mov.w	r1, r1, lsr #16
    36e0:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    36e4:	6899      	ldr	r1, [r3, #8]
    36e6:	ea4f 6111 	mov.w	r1, r1, lsr #24
    36ea:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    36ee:	68d9      	ldr	r1, [r3, #12]
    36f0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    36f4:	68d9      	ldr	r1, [r3, #12]
    36f6:	ea4f 2111 	mov.w	r1, r1, lsr #8
    36fa:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
    36fe:	68d9      	ldr	r1, [r3, #12]
    3700:	ea4f 4111 	mov.w	r1, r1, lsr #16
    3704:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
    3708:	68d9      	ldr	r1, [r3, #12]
    370a:	ea4f 6111 	mov.w	r1, r1, lsr #24
    370e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    3712:	6018      	str	r0, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    3714:	f8d9 3008 	ldr.w	r3, [r9, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3718:	f04f 0301 	mov.w	r3, #1
    371c:	d867      	bhi.n	37ee <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x292>
    371e:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    3722:	fa03 f30c 	lsl.w	r3, r3, ip
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    3726:	4661      	mov	r1, ip
    3728:	9801      	ldr	r0, [sp, #4]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    372a:	4313      	orrs	r3, r2
    372c:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    3730:	9a06      	ldr	r2, [sp, #24]
    3732:	f7fe ffa5 	bl	2680 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    3736:	2800      	cmp	r0, #0
    3738:	d166      	bne.n	3808 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ac>
      frame_distribution(msg);
    373a:	a906      	add	r1, sp, #24
    373c:	9801      	ldr	r0, [sp, #4]
    373e:	f7ff fd3f 	bl	31c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    3742:	a806      	add	r0, sp, #24
    3744:	f3af 8000 	nop.w
      ext_output2(msg);
    3748:	a806      	add	r0, sp, #24
    374a:	f3af 8000 	nop.w
      ext_output3(msg);
    374e:	a806      	add	r0, sp, #24
    3750:	f3af 8000 	nop.w
    3754:	e750      	b.n	35f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
  FLEXCANb_ESR1(_bus) |= FLEXCANb_ESR1(_bus);
    3756:	4b3b      	ldr	r3, [pc, #236]	; (3844 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2e8>)
    3758:	6a19      	ldr	r1, [r3, #32]
    375a:	6a1a      	ldr	r2, [r3, #32]
    375c:	430a      	orrs	r2, r1
    375e:	621a      	str	r2, [r3, #32]
  asm volatile ("dsb");	
    3760:	f3bf 8f4f 	dsb	sy
}
    3764:	b019      	add	sp, #100	; 0x64
    3766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    376a:	9803      	ldr	r0, [sp, #12]
    376c:	f8b0 1b0e 	ldrh.w	r1, [r0, #2830]	; 0xb0e
    3770:	b289      	uxth	r1, r1
      if ( txBuffer.size() ) {
    3772:	2900      	cmp	r1, #0
    3774:	f000 80fc 	beq.w	3970 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x414>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    3778:	f8b0 3b0a 	ldrh.w	r3, [r0, #2826]	; 0xb0a
    377c:	221a      	movs	r2, #26
    377e:	9901      	ldr	r1, [sp, #4]
    3780:	f003 030f 	and.w	r3, r3, #15
        memmove(&frame, buf, sizeof(frame));
    3784:	af0c      	add	r7, sp, #48	; 0x30
    3786:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
    378a:	fb02 1303 	mla	r3, r2, r3, r1
    378e:	f641 3222 	movw	r2, #6946	; 0x1b22
    3792:	9704      	str	r7, [sp, #16]
    3794:	46b8      	mov	r8, r7
    3796:	1899      	adds	r1, r3, r2
    3798:	5898      	ldr	r0, [r3, r2]
    379a:	f8cd e014 	str.w	lr, [sp, #20]
    379e:	460f      	mov	r7, r1
    37a0:	6849      	ldr	r1, [r1, #4]
    37a2:	68ba      	ldr	r2, [r7, #8]
    37a4:	68fb      	ldr	r3, [r7, #12]
    37a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    37aa:	6938      	ldr	r0, [r7, #16]
    37ac:	6979      	ldr	r1, [r7, #20]
    37ae:	9f05      	ldr	r7, [sp, #20]
    37b0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
    37b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    37b6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
    37ba:	e897 0003 	ldmia.w	r7, {r0, r1}
    37be:	e888 0003 	stmia.w	r8, {r0, r1}
        if ( frame.mb == -1 ) {
    37c2:	f99d 3044 	ldrsb.w	r3, [sp, #68]	; 0x44
    37c6:	1c5a      	adds	r2, r3, #1
    37c8:	f000 80e1 	beq.w	398e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x432>
        else if ( frame.mb == mb_num ) {
    37cc:	459c      	cmp	ip, r3
    37ce:	f47f af13 	bne.w	35f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
          writeTxMailbox(frame.mb, frame);
    37d2:	9a04      	ldr	r2, [sp, #16]
    37d4:	fa5f f18c 	uxtb.w	r1, ip
    37d8:	e0db      	b.n	3992 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x436>
        uint16_t size() { return _available; }
    37da:	9903      	ldr	r1, [sp, #12]
    37dc:	f8b1 3b0e 	ldrh.w	r3, [r1, #2830]	; 0xb0e
    37e0:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    37e2:	2b00      	cmp	r3, #0
    37e4:	f000 80b5 	beq.w	3952 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3f6>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    37e8:	f8b1 3b0a 	ldrh.w	r3, [r1, #2826]	; 0xb0a
    37ec:	e7c6      	b.n	377c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x220>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    37ee:	4093      	lsls	r3, r2
    37f0:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    37f4:	4661      	mov	r1, ip
    37f6:	9801      	ldr	r0, [sp, #4]
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    37f8:	4313      	orrs	r3, r2
    37fa:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    37fe:	9a06      	ldr	r2, [sp, #24]
    3800:	f7fe ff3e 	bl	2680 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    3804:	2800      	cmp	r0, #0
    3806:	d098      	beq.n	373a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1de>
  if ( !isEventsUsed ) {	
    3808:	f898 35c0 	ldrb.w	r3, [r8, #1472]	; 0x5c0
    380c:	2b00      	cmp	r3, #0
    380e:	f000 80e8 	beq.w	39e2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x486>
  memmove(buf, &msg, sizeof(msg));
    3812:	f10d 0e18 	add.w	lr, sp, #24
    3816:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    381a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    381e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3822:	e89e 0003 	ldmia.w	lr, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    3826:	9b01      	ldr	r3, [sp, #4]
    3828:	2218      	movs	r2, #24
    382a:	e88c 0003 	stmia.w	ip, {r0, r1}
    382e:	a912      	add	r1, sp, #72	; 0x48
    3830:	1d18      	adds	r0, r3, #4
    3832:	f7ff f869 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    3836:	e780      	b.n	373a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1de>
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    3838:	fab3 f383 	clz	r3, r3
    383c:	3320      	adds	r3, #32
    383e:	e6b0      	b.n	35a2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x46>
    3840:	200002c0 	.word	0x200002c0
    3844:	401d4000 	.word	0x401d4000
    3848:	0401d408 	.word	0x0401d408
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    384c:	f01b 0f20 	tst.w	fp, #32
    3850:	f43f ae9f 	beq.w	3592 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3854:	068a      	lsls	r2, r1, #26
    3856:	f57f ae9c 	bpl.w	3592 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    385a:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    385e:	4c6b      	ldr	r4, [pc, #428]	; (3a0c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4b0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    3860:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.flags.remote = (bool)(code & (1UL << 20));
    3864:	f3c2 5000 	ubfx	r0, r2, #20, #1
      msg.timestamp = code & 0xFFFF;
    3868:	f8ad 201c 	strh.w	r2, [sp, #28]
      msg.flags.extended = (bool)(code & (1UL << 21));
    386c:	2900      	cmp	r1, #0
      msg.len = (code & 0xF0000) >> 16;
    386e:	f3c2 4103 	ubfx	r1, r2, #16, #4
      msg.idhit = code >> 23;
    3872:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.len = (code & 0xF0000) >> 16;
    3876:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    387a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      msg.flags.remote = (bool)(code & (1UL << 20));
    387e:	f88d 0020 	strb.w	r0, [sp, #32]
      msg.flags.extended = (bool)(code & (1UL << 21));
    3882:	bf18      	it	ne
    3884:	2001      	movne	r0, #1
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3886:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    388a:	bf08      	it	eq
    388c:	2000      	moveq	r0, #0
      msg.idhit = code >> 23;
    388e:	f88d 201e 	strb.w	r2, [sp, #30]
    3892:	f04f 0200 	mov.w	r2, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3896:	bf08      	it	eq
    3898:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    389a:	f88d 001f 	strb.w	r0, [sp, #31]
    389e:	a80a      	add	r0, sp, #40	; 0x28
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    38a0:	9106      	str	r1, [sp, #24]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    38a2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    38a6:	40d1      	lsrs	r1, r2
    38a8:	3208      	adds	r2, #8
    38aa:	2a20      	cmp	r2, #32
    38ac:	f800 1d01 	strb.w	r1, [r0, #-1]!
    38b0:	d1f7      	bne.n	38a2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x346>
    38b2:	a80b      	add	r0, sp, #44	; 0x2c
    38b4:	4955      	ldr	r1, [pc, #340]	; (3a0c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4b0>)
    38b6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    38ba:	40da      	lsrs	r2, r3
    38bc:	3308      	adds	r3, #8
    38be:	2b20      	cmp	r3, #32
    38c0:	f800 2d01 	strb.w	r2, [r0, #-1]!
    38c4:	d1f7      	bne.n	38b6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x35a>
      msg.bus = busNumber;
    38c6:	9b01      	ldr	r3, [sp, #4]
    38c8:	f503 5400 	add.w	r4, r3, #8192	; 0x2000
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    38cc:	2363      	movs	r3, #99	; 0x63
    38ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      msg.bus = busNumber;
    38d2:	f894 36d1 	ldrb.w	r3, [r4, #1745]	; 0x6d1
    38d6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
      (void)FLEXCANb_TIMER(_bus);
    38da:	688b      	ldr	r3, [r1, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    38dc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    38de:	f043 0320 	orr.w	r3, r3, #32
    38e2:	630b      	str	r3, [r1, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    38e4:	9b00      	ldr	r3, [sp, #0]
    38e6:	065b      	lsls	r3, r3, #25
    38e8:	d503      	bpl.n	38f2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x396>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    38ea:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    38ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    38f0:	630b      	str	r3, [r1, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    38f2:	9b00      	ldr	r3, [sp, #0]
    38f4:	061e      	lsls	r6, r3, #24
    38f6:	d504      	bpl.n	3902 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    38f8:	4a44      	ldr	r2, [pc, #272]	; (3a0c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4b0>)
    38fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
    38fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3900:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    3902:	9e01      	ldr	r6, [sp, #4]
    3904:	a906      	add	r1, sp, #24
    3906:	4630      	mov	r0, r6
    3908:	f7ff fc5a 	bl	31c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    390c:	a806      	add	r0, sp, #24
    390e:	f3af 8000 	nop.w
      ext_output2(msg);
    3912:	a806      	add	r0, sp, #24
    3914:	f3af 8000 	nop.w
      ext_output3(msg);
    3918:	a806      	add	r0, sp, #24
    391a:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    391e:	9906      	ldr	r1, [sp, #24]
    3920:	4630      	mov	r0, r6
    3922:	f7fe fe35 	bl	2590 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    3926:	2800      	cmp	r0, #0
    3928:	f43f ae33 	beq.w	3592 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
  if ( !isEventsUsed ) {	
    392c:	f894 35c0 	ldrb.w	r3, [r4, #1472]	; 0x5c0
    3930:	2b00      	cmp	r3, #0
    3932:	d060      	beq.n	39f6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x49a>
  memmove(buf, &msg, sizeof(msg));
    3934:	ae06      	add	r6, sp, #24
    3936:	ac12      	add	r4, sp, #72	; 0x48
    3938:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    393a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    393c:	e896 0003 	ldmia.w	r6, {r0, r1}
    3940:	9b01      	ldr	r3, [sp, #4]
    3942:	2218      	movs	r2, #24
    3944:	e884 0003 	stmia.w	r4, {r0, r1}
    3948:	a912      	add	r1, sp, #72	; 0x48
    394a:	1d18      	adds	r0, r3, #4
    394c:	f7fe ffdc 	bl	2908 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
    3950:	e61f      	b.n	3592 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3952:	f1bc 0f1f 	cmp.w	ip, #31
    3956:	f04f 0301 	mov.w	r3, #1
    395a:	d83b      	bhi.n	39d4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x478>
    395c:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    3960:	fa03 f30c 	lsl.w	r3, r3, ip
    3964:	4313      	orrs	r3, r2
    3966:	f8c9 3030 	str.w	r3, [r9, #48]	; 0x30
    396a:	e645      	b.n	35f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    396c:	6823      	ldr	r3, [r4, #0]
    396e:	e62f      	b.n	35d0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x74>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    3970:	f1bc 0f1f 	cmp.w	ip, #31
    3974:	d825      	bhi.n	39c2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x466>
    3976:	2201      	movs	r2, #1
    3978:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
    397c:	fa02 f20c 	lsl.w	r2, r2, ip
    3980:	430a      	orrs	r2, r1
    3982:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    3986:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    398a:	601a      	str	r2, [r3, #0]
    398c:	e634      	b.n	35f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
          writeTxMailbox(mb_num, frame);
    398e:	9a04      	ldr	r2, [sp, #16]
    3990:	4661      	mov	r1, ip
          writeTxMailbox(frame.mb, frame);
    3992:	9801      	ldr	r0, [sp, #4]
    3994:	f7fe f92a 	bl	1bec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    3998:	9a03      	ldr	r2, [sp, #12]
    399a:	f8b2 3b0a 	ldrh.w	r3, [r2, #2826]	; 0xb0a
    399e:	3301      	adds	r3, #1
    39a0:	f003 031f 	and.w	r3, r3, #31
    39a4:	f8a2 3b0a 	strh.w	r3, [r2, #2826]	; 0xb0a
    if ( _available ) _available--;
    39a8:	f8b2 3b0e 	ldrh.w	r3, [r2, #2830]	; 0xb0e
    39ac:	b29b      	uxth	r3, r3
    39ae:	2b00      	cmp	r3, #0
    39b0:	f43f ae22 	beq.w	35f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
    39b4:	f8b2 3b0e 	ldrh.w	r3, [r2, #2830]	; 0xb0e
    39b8:	3b01      	subs	r3, #1
    39ba:	b29b      	uxth	r3, r3
    39bc:	f8a2 3b0e 	strh.w	r3, [r2, #2830]	; 0xb0e
    39c0:	e61a      	b.n	35f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    39c2:	2101      	movs	r1, #1
    39c4:	fa01 f202 	lsl.w	r2, r1, r2
    39c8:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
    39cc:	430a      	orrs	r2, r1
    39ce:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
}
    39d2:	e7d8      	b.n	3986 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42a>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    39d4:	4093      	lsls	r3, r2
    39d6:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
    39da:	4313      	orrs	r3, r2
    39dc:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
}
    39e0:	e60a      	b.n	35f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x9c>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    39e2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    39e6:	aa06      	add	r2, sp, #24
    39e8:	a912      	add	r1, sp, #72	; 0x48
    39ea:	9801      	ldr	r0, [sp, #4]
    39ec:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    39f0:	f7fe faa4 	bl	1f3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    39f4:	e6a1      	b.n	373a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1de>
    39f6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    39fa:	aa06      	add	r2, sp, #24
    39fc:	a912      	add	r1, sp, #72	; 0x48
    39fe:	9801      	ldr	r0, [sp, #4]
    3a00:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    3a04:	f7fe fa9a 	bl	1f3c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    3a08:	e5c3      	b.n	3592 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    3a0a:	bf00      	nop
    3a0c:	401d4000 	.word	0x401d4000

00003a10 <_GLOBAL__sub_I_Can1>:
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    3a10:	4924      	ldr	r1, [pc, #144]	; (3aa4 <_GLOBAL__sub_I_Can1+0x94>)
class Circular_Buffer {
    3a12:	2300      	movs	r3, #0
    3a14:	4a24      	ldr	r2, [pc, #144]	; (3aa8 <_GLOBAL__sub_I_Can1+0x98>)
    3a16:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
    3a1a:	f501 5c80 	add.w	ip, r1, #4096	; 0x1000
}
    3a1e:	b430      	push	{r4, r5}
    3a20:	4c22      	ldr	r4, [pc, #136]	; (3aac <_GLOBAL__sub_I_Can1+0x9c>)
  if ( _bus == CAN1 ) _CAN1 = this;
    3a22:	4d23      	ldr	r5, [pc, #140]	; (3ab0 <_GLOBAL__sub_I_Can1+0xa0>)
    3a24:	808b      	strh	r3, [r1, #4]
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    3a26:	600c      	str	r4, [r1, #0]
    3a28:	80cb      	strh	r3, [r1, #6]
  if ( _bus == CAN1 ) _CAN1 = this;
    3a2a:	6029      	str	r1, [r5, #0]
    3a2c:	810b      	strh	r3, [r1, #8]
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    3a2e:	f502 5100 	add.w	r1, r2, #8192	; 0x2000
    3a32:	f8ac 3b0a 	strh.w	r3, [ip, #2826]	; 0xb0a
    3a36:	f8c0 36c8 	str.w	r3, [r0, #1736]	; 0x6c8
    3a3a:	f8ac 3b0c 	strh.w	r3, [ip, #2828]	; 0xb0c
    3a3e:	f8c0 36cc 	str.w	r3, [r0, #1740]	; 0x6cc
    3a42:	f8ac 3b0e 	strh.w	r3, [ip, #2830]	; 0xb0e
    3a46:	f502 5c80 	add.w	ip, r2, #4096	; 0x1000
    3a4a:	f880 35c0 	strb.w	r3, [r0, #1472]	; 0x5c0
    3a4e:	f880 36d0 	strb.w	r3, [r0, #1744]	; 0x6d0
    3a52:	f880 35c1 	strb.w	r3, [r0, #1473]	; 0x5c1
    3a56:	4c17      	ldr	r4, [pc, #92]	; (3ab4 <_GLOBAL__sub_I_Can1+0xa4>)
    3a58:	4817      	ldr	r0, [pc, #92]	; (3ab8 <_GLOBAL__sub_I_Can1+0xa8>)
    3a5a:	8093      	strh	r3, [r2, #4]
    3a5c:	6014      	str	r4, [r2, #0]
    3a5e:	80d3      	strh	r3, [r2, #6]
    3a60:	f8c1 36c8 	str.w	r3, [r1, #1736]	; 0x6c8
    3a64:	8113      	strh	r3, [r2, #8]
    3a66:	f8c1 36cc 	str.w	r3, [r1, #1740]	; 0x6cc
    3a6a:	f8ac 3b0a 	strh.w	r3, [ip, #2826]	; 0xb0a
    3a6e:	f881 36d0 	strb.w	r3, [r1, #1744]	; 0x6d0
    3a72:	f8ac 3b0c 	strh.w	r3, [ip, #2828]	; 0xb0c
  if ( _bus == CAN2 ) _CAN2 = this;
    3a76:	4c11      	ldr	r4, [pc, #68]	; (3abc <_GLOBAL__sub_I_Can1+0xac>)
    3a78:	f8ac 3b0e 	strh.w	r3, [ip, #2830]	; 0xb0e
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    3a7c:	f881 35c0 	strb.w	r3, [r1, #1472]	; 0x5c0
    3a80:	f881 35c1 	strb.w	r3, [r1, #1473]	; 0x5c1
	elapsedMillis(void) { ms = millis(); }
    3a84:	4b0e      	ldr	r3, [pc, #56]	; (3ac0 <_GLOBAL__sub_I_Can1+0xb0>)
    3a86:	6801      	ldr	r1, [r0, #0]
  if ( _bus == CAN2 ) _CAN2 = this;
    3a88:	6022      	str	r2, [r4, #0]
    3a8a:	6019      	str	r1, [r3, #0]
    3a8c:	6804      	ldr	r4, [r0, #0]
    3a8e:	4b0d      	ldr	r3, [pc, #52]	; (3ac4 <_GLOBAL__sub_I_Can1+0xb4>)
    3a90:	6802      	ldr	r2, [r0, #0]
    3a92:	490d      	ldr	r1, [pc, #52]	; (3ac8 <_GLOBAL__sub_I_Can1+0xb8>)
    3a94:	600c      	str	r4, [r1, #0]
    3a96:	601a      	str	r2, [r3, #0]
    3a98:	4b0c      	ldr	r3, [pc, #48]	; (3acc <_GLOBAL__sub_I_Can1+0xbc>)
    3a9a:	6802      	ldr	r2, [r0, #0]
    3a9c:	bc30      	pop	{r4, r5}
    3a9e:	601a      	str	r2, [r3, #0]
    3aa0:	4770      	bx	lr
    3aa2:	bf00      	nop
    3aa4:	20001088 	.word	0x20001088
    3aa8:	2000375c 	.word	0x2000375c
    3aac:	2000031c 	.word	0x2000031c
    3ab0:	20005e30 	.word	0x20005e30
    3ab4:	20000340 	.word	0x20000340
    3ab8:	20006034 	.word	0x20006034
    3abc:	20005e34 	.word	0x20005e34
    3ac0:	20005fc4 	.word	0x20005fc4
    3ac4:	20006050 	.word	0x20006050
    3ac8:	20005fe0 	.word	0x20005fe0
    3acc:	20005fa0 	.word	0x20005fa0

00003ad0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3ad0:	4608      	mov	r0, r1
    3ad2:	f001 baad 	b.w	5030 <usb_serial_putchar>
    3ad6:	bf00      	nop

00003ad8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3ad8:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    3ada:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    3adc:	bf08      	it	eq
    3ade:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    3ae0:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    3ae2:	b391      	cbz	r1, 3b4a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    3ae4:	f04f 0e21 	mov.w	lr, #33	; 0x21
    3ae8:	e001      	b.n	3aee <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3aea:	fa5f fe86 	uxtb.w	lr, r6
    3aee:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    3af2:	fbb1 f5f2 	udiv	r5, r1, r2
    3af6:	fb02 1415 	mls	r4, r2, r5, r1
    3afa:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3afe:	2c09      	cmp	r4, #9
    3b00:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    3b04:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    3b08:	bf98      	it	ls
    3b0a:	fa5f f48c 	uxtbls.w	r4, ip
    3b0e:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    3b12:	bf88      	it	hi
    3b14:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    3b16:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3b18:	44ec      	add	ip, sp
			n /= base;
    3b1a:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3b1c:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    3b20:	d2e3      	bcs.n	3aea <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    3b22:	b14b      	cbz	r3, 3b38 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    3b24:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    3b28:	222d      	movs	r2, #45	; 0x2d
		i--;
    3b2a:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    3b2e:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    3b32:	446b      	add	r3, sp
    3b34:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3b38:	6803      	ldr	r3, [r0, #0]
    3b3a:	a901      	add	r1, sp, #4
    3b3c:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    3b40:	685b      	ldr	r3, [r3, #4]
    3b42:	4471      	add	r1, lr
    3b44:	4798      	blx	r3
}
    3b46:	b00a      	add	sp, #40	; 0x28
    3b48:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    3b4a:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    3b4c:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    3b50:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    3b54:	e7e5      	b.n	3b22 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    3b56:	bf00      	nop

00003b58 <Print::print(long)>:
	if (n < 0) {
    3b58:	2900      	cmp	r1, #0
    3b5a:	db03      	blt.n	3b64 <Print::print(long)+0xc>
	uint8_t sign=0;
    3b5c:	2300      	movs	r3, #0
	if (base == 0) {
    3b5e:	220a      	movs	r2, #10
    3b60:	f7ff bfba 	b.w	3ad8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    3b64:	4249      	negs	r1, r1
		sign = '-';
    3b66:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    3b68:	220a      	movs	r2, #10
    3b6a:	f7ff bfb5 	b.w	3ad8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    3b6e:	bf00      	nop

00003b70 <Print::println()>:
{
    3b70:	b500      	push	{lr}
	return write(buf, 2);
    3b72:	6803      	ldr	r3, [r0, #0]
{
    3b74:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    3b76:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    3b7a:	2202      	movs	r2, #2
    3b7c:	a901      	add	r1, sp, #4
    3b7e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    3b80:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    3b84:	4798      	blx	r3
}
    3b86:	b003      	add	sp, #12
    3b88:	f85d fb04 	ldr.w	pc, [sp], #4

00003b8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    3b8c:	b95a      	cbnz	r2, 3ba6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    3b8e:	6803      	ldr	r3, [r0, #0]
    3b90:	b2c9      	uxtb	r1, r1
    3b92:	4a07      	ldr	r2, [pc, #28]	; (3bb0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    3b94:	681b      	ldr	r3, [r3, #0]
    3b96:	4293      	cmp	r3, r2
{
    3b98:	b500      	push	{lr}
    3b9a:	d106      	bne.n	3baa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    3b9c:	4608      	mov	r0, r1
}
    3b9e:	f85d eb04 	ldr.w	lr, [sp], #4
    3ba2:	f001 ba45 	b.w	5030 <usb_serial_putchar>
    3ba6:	f7ff bf97 	b.w	3ad8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    3baa:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    3bae:	4718      	bx	r3
    3bb0:	00003ad1 	.word	0x00003ad1

00003bb4 <delay>:
	if (msec == 0) return;
    3bb4:	b900      	cbnz	r0, 3bb8 <delay+0x4>
    3bb6:	4770      	bx	lr
{
    3bb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3bbc:	2101      	movs	r1, #1
    3bbe:	4681      	mov	r9, r0
    3bc0:	4c21      	ldr	r4, [pc, #132]	; (3c48 <delay+0x94>)
    3bc2:	4d22      	ldr	r5, [pc, #136]	; (3c4c <delay+0x98>)
    3bc4:	4e22      	ldr	r6, [pc, #136]	; (3c50 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3bc6:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    3bca:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3bcc:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3bce:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3bd2:	2b00      	cmp	r3, #0
    3bd4:	d1f7      	bne.n	3bc6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3bd6:	491f      	ldr	r1, [pc, #124]	; (3c54 <delay+0xa0>)
    3bd8:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    3bda:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3bde:	f8df a078 	ldr.w	sl, [pc, #120]	; 3c58 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    3be2:	1a1b      	subs	r3, r3, r0
    3be4:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    3be6:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3bea:	f8da 2000 	ldr.w	r2, [sl]
    3bee:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    3bf2:	455a      	cmp	r2, fp
    3bf4:	bf94      	ite	ls
    3bf6:	4490      	addls	r8, r2
    3bf8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3bfa:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    3bfe:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    3c00:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3c02:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3c06:	2b00      	cmp	r3, #0
    3c08:	d1f7      	bne.n	3bfa <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3c0a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3c0c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    3c10:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    3c12:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3c16:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    3c1a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    3c1e:	bf94      	ite	ls
    3c20:	4462      	addls	r2, ip
    3c22:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    3c26:	eba2 0208 	sub.w	r2, r2, r8
    3c2a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    3c2e:	d306      	bcc.n	3c3e <delay+0x8a>
			if (--msec == 0) return;
    3c30:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    3c34:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    3c38:	d1df      	bne.n	3bfa <delay+0x46>
}
    3c3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    3c3e:	f001 fa8b 	bl	5158 <yield>
		while ((micros() - start) >= 1000) {
    3c42:	4904      	ldr	r1, [pc, #16]	; (3c54 <delay+0xa0>)
    3c44:	e7d9      	b.n	3bfa <delay+0x46>
    3c46:	bf00      	nop
    3c48:	20006038 	.word	0x20006038
    3c4c:	20006034 	.word	0x20006034
    3c50:	20006030 	.word	0x20006030
    3c54:	e0001000 	.word	0xe0001000
    3c58:	2000602c 	.word	0x2000602c

00003c5c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    3c5c:	2836      	cmp	r0, #54	; 0x36
    3c5e:	d816      	bhi.n	3c8e <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    3c60:	0102      	lsls	r2, r0, #4
    3c62:	4b10      	ldr	r3, [pc, #64]	; (3ca4 <digitalWrite+0x48>)
    3c64:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    3c68:	589b      	ldr	r3, [r3, r2]
{
    3c6a:	b410      	push	{r4}
	mask = p->mask;
    3c6c:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    3c6e:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    3c70:	4214      	tst	r4, r2
    3c72:	d005      	beq.n	3c80 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    3c74:	b961      	cbnz	r1, 3c90 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    3c76:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    3c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    3c7e:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3c80:	6883      	ldr	r3, [r0, #8]
		if (val) {
    3c82:	b151      	cbz	r1, 3c9a <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3c84:	4a08      	ldr	r2, [pc, #32]	; (3ca8 <digitalWrite+0x4c>)
}
    3c86:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3c8a:	601a      	str	r2, [r3, #0]
}
    3c8c:	4770      	bx	lr
    3c8e:	4770      	bx	lr
    3c90:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    3c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    3c98:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3c9a:	4a04      	ldr	r2, [pc, #16]	; (3cac <digitalWrite+0x50>)
}
    3c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3ca0:	601a      	str	r2, [r3, #0]
}
    3ca2:	4770      	bx	lr
    3ca4:	20000384 	.word	0x20000384
    3ca8:	0001f038 	.word	0x0001f038
    3cac:	00013038 	.word	0x00013038

00003cb0 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    3cb0:	2836      	cmp	r0, #54	; 0x36
    3cb2:	d829      	bhi.n	3d08 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    3cb4:	4b16      	ldr	r3, [pc, #88]	; (3d10 <pinMode+0x60>)
    3cb6:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3cb8:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    3cba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3cbe:	589a      	ldr	r2, [r3, r2]
{
    3cc0:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3cc2:	6853      	ldr	r3, [r2, #4]
    3cc4:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3cc6:	d00e      	beq.n	3ce6 <pinMode+0x36>
    3cc8:	2904      	cmp	r1, #4
    3cca:	d00c      	beq.n	3ce6 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3ccc:	ea23 0304 	bic.w	r3, r3, r4
    3cd0:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3cd2:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    3cd4:	b1a9      	cbz	r1, 3d02 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    3cd6:	2902      	cmp	r1, #2
    3cd8:	d017      	beq.n	3d0a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    3cda:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    3cdc:	bf0c      	ite	eq
    3cde:	4a0d      	ldreq	r2, [pc, #52]	; (3d14 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    3ce0:	4a0d      	ldrne	r2, [pc, #52]	; (3d18 <pinMode+0x68>)
    3ce2:	601a      	str	r2, [r3, #0]
    3ce4:	e007      	b.n	3cf6 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3ce6:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    3ce8:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    3cea:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3cec:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    3cee:	d008      	beq.n	3d02 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    3cf0:	f640 0238 	movw	r2, #2104	; 0x838
    3cf4:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    3cf6:	6843      	ldr	r3, [r0, #4]
    3cf8:	2215      	movs	r2, #21
}
    3cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    3cfe:	601a      	str	r2, [r3, #0]
}
    3d00:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3d02:	2238      	movs	r2, #56	; 0x38
    3d04:	601a      	str	r2, [r3, #0]
    3d06:	e7f6      	b.n	3cf6 <pinMode+0x46>
    3d08:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    3d0a:	4a04      	ldr	r2, [pc, #16]	; (3d1c <pinMode+0x6c>)
    3d0c:	601a      	str	r2, [r3, #0]
    3d0e:	e7f2      	b.n	3cf6 <pinMode+0x46>
    3d10:	20000384 	.word	0x20000384
    3d14:	00013038 	.word	0x00013038
    3d18:	00010038 	.word	0x00010038
    3d1c:	0001f038 	.word	0x0001f038

00003d20 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3d20:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3d22:	f7fc ff13 	bl	b4c <setup>
	while (1) {
		loop();
    3d26:	f7fe fa31 	bl	218c <loop>
		yield();
    3d2a:	f001 fa15 	bl	5158 <yield>
	while (1) {
    3d2e:	e7fa      	b.n	3d26 <main+0x6>

00003d30 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    3d30:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    3d32:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    3d36:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    3d3a:	d16d      	bne.n	3e18 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3d3c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    3d3e:	d341      	bcc.n	3dc4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3d40:	f851 3b04 	ldr.w	r3, [r1], #4
    3d44:	f840 3b04 	str.w	r3, [r0], #4
    3d48:	f851 3b04 	ldr.w	r3, [r1], #4
    3d4c:	f840 3b04 	str.w	r3, [r0], #4
    3d50:	f851 3b04 	ldr.w	r3, [r1], #4
    3d54:	f840 3b04 	str.w	r3, [r0], #4
    3d58:	f851 3b04 	ldr.w	r3, [r1], #4
    3d5c:	f840 3b04 	str.w	r3, [r0], #4
    3d60:	f851 3b04 	ldr.w	r3, [r1], #4
    3d64:	f840 3b04 	str.w	r3, [r0], #4
    3d68:	f851 3b04 	ldr.w	r3, [r1], #4
    3d6c:	f840 3b04 	str.w	r3, [r0], #4
    3d70:	f851 3b04 	ldr.w	r3, [r1], #4
    3d74:	f840 3b04 	str.w	r3, [r0], #4
    3d78:	f851 3b04 	ldr.w	r3, [r1], #4
    3d7c:	f840 3b04 	str.w	r3, [r0], #4
    3d80:	f851 3b04 	ldr.w	r3, [r1], #4
    3d84:	f840 3b04 	str.w	r3, [r0], #4
    3d88:	f851 3b04 	ldr.w	r3, [r1], #4
    3d8c:	f840 3b04 	str.w	r3, [r0], #4
    3d90:	f851 3b04 	ldr.w	r3, [r1], #4
    3d94:	f840 3b04 	str.w	r3, [r0], #4
    3d98:	f851 3b04 	ldr.w	r3, [r1], #4
    3d9c:	f840 3b04 	str.w	r3, [r0], #4
    3da0:	f851 3b04 	ldr.w	r3, [r1], #4
    3da4:	f840 3b04 	str.w	r3, [r0], #4
    3da8:	f851 3b04 	ldr.w	r3, [r1], #4
    3dac:	f840 3b04 	str.w	r3, [r0], #4
    3db0:	f851 3b04 	ldr.w	r3, [r1], #4
    3db4:	f840 3b04 	str.w	r3, [r0], #4
    3db8:	f851 3b04 	ldr.w	r3, [r1], #4
    3dbc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    3dc0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    3dc2:	d2bd      	bcs.n	3d40 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    3dc4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    3dc6:	d311      	bcc.n	3dec <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3dc8:	f851 3b04 	ldr.w	r3, [r1], #4
    3dcc:	f840 3b04 	str.w	r3, [r0], #4
    3dd0:	f851 3b04 	ldr.w	r3, [r1], #4
    3dd4:	f840 3b04 	str.w	r3, [r0], #4
    3dd8:	f851 3b04 	ldr.w	r3, [r1], #4
    3ddc:	f840 3b04 	str.w	r3, [r0], #4
    3de0:	f851 3b04 	ldr.w	r3, [r1], #4
    3de4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    3de8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    3dea:	d2ed      	bcs.n	3dc8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    3dec:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    3dee:	d305      	bcc.n	3dfc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    3df0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    3df4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    3df8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    3dfa:	d2f9      	bcs.n	3df0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    3dfc:	3204      	adds	r2, #4
	beq	.Ldone
    3dfe:	d008      	beq.n	3e12 <memcpy+0xe2>

	lsls	r2, r2, #31
    3e00:	07d2      	lsls	r2, r2, #31
	itt ne
    3e02:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3e04:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3e08:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    3e0c:	d301      	bcc.n	3e12 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    3e0e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3e10:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3e12:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3e14:	4770      	bx	lr
    3e16:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3e18:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    3e1a:	d313      	bcc.n	3e44 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    3e1c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    3e1e:	d08d      	beq.n	3d3c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3e20:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3e24:	d08a      	beq.n	3d3c <memcpy+0xc>

	rsb	r3, #4
    3e26:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    3e2a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    3e2c:	07db      	lsls	r3, r3, #31
	itt ne
    3e2e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3e30:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3e34:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3e38:	d380      	bcc.n	3d3c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    3e3a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    3e3e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    3e42:	e77b      	b.n	3d3c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3e44:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    3e46:	d3d9      	bcc.n	3dfc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3e48:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    3e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    3e4e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    3e52:	d2f9      	bcs.n	3e48 <memcpy+0x118>

	ldrb	r3, [r1]
    3e54:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3e56:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3e58:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    3e5a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    3e5c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    3e5e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3e60:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3e62:	4770      	bx	lr

00003e64 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    3e64:	f101 3cff 	add.w	ip, r1, #4294967295
{
    3e68:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    3e6a:	4666      	mov	r6, ip
	int i=0, j;
    3e6c:	2400      	movs	r4, #0
    3e6e:	e000      	b.n	3e72 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    3e70:	3401      	adds	r4, #1
		digit = val % radix;
    3e72:	fbb0 f5f2 	udiv	r5, r0, r2
    3e76:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3e7a:	2b09      	cmp	r3, #9
    3e7c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    3e80:	f103 0330 	add.w	r3, r3, #48	; 0x30
    3e84:	fa5f fe8e 	uxtb.w	lr, lr
    3e88:	bf98      	it	ls
    3e8a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    3e8e:	4290      	cmp	r0, r2
		val /= radix;
    3e90:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3e92:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    3e96:	d2eb      	bcs.n	3e70 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    3e98:	1c63      	adds	r3, r4, #1
    3e9a:	2200      	movs	r2, #0
    3e9c:	18c8      	adds	r0, r1, r3
    3e9e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    3ea0:	b17c      	cbz	r4, 3ec2 <ultoa+0x5e>
		t = buf[j];
    3ea2:	4662      	mov	r2, ip
    3ea4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    3ea8:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    3eac:	eba1 030c 	sub.w	r3, r1, ip
    3eb0:	3202      	adds	r2, #2
		buf[j] = buf[i];
    3eb2:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    3eb6:	3b01      	subs	r3, #1
    3eb8:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    3eba:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    3ebc:	4423      	add	r3, r4
    3ebe:	429a      	cmp	r2, r3
    3ec0:	dbef      	blt.n	3ea2 <ultoa+0x3e>
	}
	return buf;
}
    3ec2:	4608      	mov	r0, r1
    3ec4:	bd70      	pop	{r4, r5, r6, pc}
    3ec6:	bf00      	nop

00003ec8 <unused_interrupt_vector>:
	__disable_irq();
    3ec8:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    3eca:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    3ece:	4c4f      	ldr	r4, [pc, #316]	; (400c <unused_interrupt_vector+0x144>)
    3ed0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    3ed4:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    3ed8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    3edc:	4e4c      	ldr	r6, [pc, #304]	; (4010 <unused_interrupt_vector+0x148>)
	while (p < end) {
    3ede:	4d4d      	ldr	r5, [pc, #308]	; (4014 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    3ee0:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    3ee4:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    3ee8:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    3eec:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    3ef0:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    3ef4:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    3ef8:	6993      	ldr	r3, [r2, #24]
    3efa:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    3efe:	69d3      	ldr	r3, [r2, #28]
    3f00:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    3f04:	f000 f8a2 	bl	404c <tempmonGetTemp>
    3f08:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    3f0c:	f001 fc00 	bl	5710 <rtc_get>
	info->len = sizeof(*info) / 4;
    3f10:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    3f12:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    3f16:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    3f1a:	460b      	mov	r3, r1
    3f1c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    3f20:	493d      	ldr	r1, [pc, #244]	; (4018 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    3f22:	1d30      	adds	r0, r6, #4
    3f24:	405a      	eors	r2, r3
    3f26:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    3f28:	f002 0301 	and.w	r3, r2, #1
    3f2c:	3c01      	subs	r4, #1
    3f2e:	fb01 f303 	mul.w	r3, r1, r3
    3f32:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    3f36:	d1f7      	bne.n	3f28 <unused_interrupt_vector+0x60>
	while (p < end) {
    3f38:	42a8      	cmp	r0, r5
    3f3a:	d002      	beq.n	3f42 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    3f3c:	6873      	ldr	r3, [r6, #4]
    3f3e:	4606      	mov	r6, r0
    3f40:	e7ef      	b.n	3f22 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    3f42:	4b32      	ldr	r3, [pc, #200]	; (400c <unused_interrupt_vector+0x144>)
    3f44:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    3f48:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3f4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3f50:	492f      	ldr	r1, [pc, #188]	; (4010 <unused_interrupt_vector+0x148>)
    3f52:	4a32      	ldr	r2, [pc, #200]	; (401c <unused_interrupt_vector+0x154>)
    3f54:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    3f58:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    3f5c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    3f60:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3f64:	4a2e      	ldr	r2, [pc, #184]	; (4020 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    3f66:	2502      	movs	r5, #2
    3f68:	482e      	ldr	r0, [pc, #184]	; (4024 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3f6a:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3f6c:	492e      	ldr	r1, [pc, #184]	; (4028 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    3f6e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    3f72:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    3f74:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    3f76:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3f78:	482c      	ldr	r0, [pc, #176]	; (402c <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    3f7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    3f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3f82:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3f84:	680b      	ldr	r3, [r1, #0]
    3f86:	4283      	cmp	r3, r0
    3f88:	d83d      	bhi.n	4006 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    3f8a:	4d26      	ldr	r5, [pc, #152]	; (4024 <unused_interrupt_vector+0x15c>)
    3f8c:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    3f8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3f92:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    3f96:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    3f98:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    3f9a:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    3f9e:	4924      	ldr	r1, [pc, #144]	; (4030 <unused_interrupt_vector+0x168>)
    3fa0:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    3fa4:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    3fa8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    3fac:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    3fb0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    3fb4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    3fb8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    3fbc:	e001      	b.n	3fc2 <unused_interrupt_vector+0xfa>
		usb_isr();
    3fbe:	f000 f937 	bl	4230 <usb_isr>
		if (PIT_TFLG0) {
    3fc2:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	d0f9      	beq.n	3fbe <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    3fca:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    3fcc:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    3fd0:	2c4f      	cmp	r4, #79	; 0x4f
    3fd2:	d9f4      	bls.n	3fbe <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3fd4:	4b17      	ldr	r3, [pc, #92]	; (4034 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    3fd6:	2002      	movs	r0, #2
    3fd8:	4917      	ldr	r1, [pc, #92]	; (4038 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3fda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    3fde:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3fe2:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3fe4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    3fe8:	b93b      	cbnz	r3, 3ffa <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    3fea:	4814      	ldr	r0, [pc, #80]	; (403c <unused_interrupt_vector+0x174>)
    3fec:	4914      	ldr	r1, [pc, #80]	; (4040 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3fee:	4a0d      	ldr	r2, [pc, #52]	; (4024 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    3ff0:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3ff2:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d0fa      	beq.n	3ff0 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    3ffa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3ffe:	4a11      	ldr	r2, [pc, #68]	; (4044 <unused_interrupt_vector+0x17c>)
    4000:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    4004:	e7fe      	b.n	4004 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    4006:	f001 f953 	bl	52b0 <set_arm_clock>
    400a:	e7be      	b.n	3f8a <unused_interrupt_vector+0xc2>
    400c:	2027ff00 	.word	0x2027ff00
    4010:	2027ff80 	.word	0x2027ff80
    4014:	2027ffa8 	.word	0x2027ffa8
    4018:	edb88320 	.word	0xedb88320
    401c:	2027ffa0 	.word	0x2027ffa0
    4020:	400fc000 	.word	0x400fc000
    4024:	40084000 	.word	0x40084000
    4028:	20000a54 	.word	0x20000a54
    402c:	0bcd3d80 	.word	0x0bcd3d80
    4030:	00249f00 	.word	0x00249f00
    4034:	400d9000 	.word	0x400d9000
    4038:	402e0000 	.word	0x402e0000
    403c:	400f8000 	.word	0x400f8000
    4040:	0bad00f1 	.word	0x0bad00f1
    4044:	05fa0004 	.word	0x05fa0004

00004048 <Panic_Temp_isr>:
  unused_interrupt_vector();
    4048:	f7ff bf3e 	b.w	3ec8 <unused_interrupt_vector>

0000404c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    404c:	4a12      	ldr	r2, [pc, #72]	; (4098 <tempmonGetTemp+0x4c>)
    404e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    4052:	075b      	lsls	r3, r3, #29
    4054:	d5fb      	bpl.n	404e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    4056:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    405a:	4810      	ldr	r0, [pc, #64]	; (409c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    405c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    4060:	490f      	ldr	r1, [pc, #60]	; (40a0 <tempmonGetTemp+0x54>)
    4062:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    4066:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    406a:	ed91 6a00 	vldr	s12, [r1]
    406e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    4072:	4a0c      	ldr	r2, [pc, #48]	; (40a4 <tempmonGetTemp+0x58>)
    4074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4078:	4b0b      	ldr	r3, [pc, #44]	; (40a8 <tempmonGetTemp+0x5c>)
    407a:	edd2 6a00 	vldr	s13, [r2]
    407e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    4082:	ed93 7a00 	vldr	s14, [r3]
    4086:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    408a:	ee67 7a86 	vmul.f32	s15, s15, s12
    408e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    4092:	ee37 0a40 	vsub.f32	s0, s14, s0
    4096:	4770      	bx	lr
    4098:	400d8100 	.word	0x400d8100
    409c:	2000601c 	.word	0x2000601c
    40a0:	20006024 	.word	0x20006024
    40a4:	20006028 	.word	0x20006028
    40a8:	20006020 	.word	0x20006020

000040ac <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    40ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    40ae:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    40b0:	b11b      	cbz	r3, 40ba <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    40b2:	6853      	ldr	r3, [r2, #4]
    40b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    40b8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    40ba:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    40bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    40be:	b33c      	cbz	r4, 4110 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    40c0:	4b1a      	ldr	r3, [pc, #104]	; (412c <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    40c2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    40c4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    40c8:	420c      	tst	r4, r1
    40ca:	d11d      	bne.n	4108 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    40cc:	4e18      	ldr	r6, [pc, #96]	; (4130 <schedule_transfer+0x84>)
    40ce:	6877      	ldr	r7, [r6, #4]
    40d0:	e004      	b.n	40dc <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    40d2:	6874      	ldr	r4, [r6, #4]
    40d4:	1be4      	subs	r4, r4, r7
    40d6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    40da:	d20b      	bcs.n	40f4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    40dc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    40e0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    40e4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    40e8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    40ec:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    40f0:	0464      	lsls	r4, r4, #17
    40f2:	d5ee      	bpl.n	40d2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    40f4:	400d      	ands	r5, r1
    40f6:	d107      	bne.n	4108 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    40f8:	4c0c      	ldr	r4, [pc, #48]	; (412c <schedule_transfer+0x80>)
		endpoint->status = 0;
    40fa:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    40fe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4102:	430b      	orrs	r3, r1
    4104:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    4108:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    410a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    410c:	bcf0      	pop	{r4, r5, r6, r7}
    410e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    4110:	4d06      	ldr	r5, [pc, #24]	; (412c <schedule_transfer+0x80>)
	endpoint->status = 0;
    4112:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    4116:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    411a:	430b      	orrs	r3, r1
    411c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    4120:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    4122:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    4124:	b662      	cpsie	i
}
    4126:	bcf0      	pop	{r4, r5, r6, r7}
    4128:	4770      	bx	lr
    412a:	bf00      	nop
    412c:	402e0000 	.word	0x402e0000
    4130:	e0001000 	.word	0xe0001000

00004134 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    4134:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    4136:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    4138:	b19d      	cbz	r5, 4162 <run_callbacks+0x2e>
    413a:	4606      	mov	r6, r0
    413c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    413e:	2400      	movs	r4, #0
    4140:	e003      	b.n	414a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    4142:	6812      	ldr	r2, [r2, #0]
		count++;
    4144:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    4146:	2a01      	cmp	r2, #1
    4148:	d00c      	beq.n	4164 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    414a:	6853      	ldr	r3, [r2, #4]
    414c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    4150:	d0f7      	beq.n	4142 <run_callbacks+0xe>
			ep->first_transfer = t;
    4152:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    4154:	b12c      	cbz	r4, 4162 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    4156:	4628      	mov	r0, r5
		ep->callback_function(first);
    4158:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    415a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    415c:	4798      	blx	r3
	while (count) {
    415e:	3c01      	subs	r4, #1
    4160:	d1f9      	bne.n	4156 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    4162:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    4164:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    4168:	e7f4      	b.n	4154 <run_callbacks+0x20>
    416a:	bf00      	nop

0000416c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    416c:	b430      	push	{r4, r5}
	if (len > 0) {
    416e:	b9d9      	cbnz	r1, 41a8 <endpoint0_transmit.constprop.0+0x3c>
    4170:	4c1f      	ldr	r4, [pc, #124]	; (41f0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    4172:	4b20      	ldr	r3, [pc, #128]	; (41f4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    4174:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4176:	4a20      	ldr	r2, [pc, #128]	; (41f8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    4178:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    417a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    417e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    4180:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    4182:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4186:	2480      	movs	r4, #128	; 0x80
    4188:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    418a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    418e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    4192:	481a      	ldr	r0, [pc, #104]	; (41fc <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    4194:	432b      	orrs	r3, r5
    4196:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    419a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    419c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    41a0:	2b00      	cmp	r3, #0
    41a2:	d1fb      	bne.n	419c <endpoint0_transmit.constprop.0+0x30>
}
    41a4:	bc30      	pop	{r4, r5}
    41a6:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    41a8:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    41aa:	4b15      	ldr	r3, [pc, #84]	; (4200 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    41ac:	4c10      	ldr	r4, [pc, #64]	; (41f0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    41ae:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    41b0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    41b4:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    41b6:	4a10      	ldr	r2, [pc, #64]	; (41f8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    41b8:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    41ba:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    41be:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    41c0:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    41c2:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    41c6:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    41c8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    41ca:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    41ce:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    41d2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    41d4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    41d6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    41d8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    41da:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    41de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    41e2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    41e6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    41ea:	2b00      	cmp	r3, #0
    41ec:	d1fb      	bne.n	41e6 <endpoint0_transmit.constprop.0+0x7a>
    41ee:	e7c0      	b.n	4172 <endpoint0_transmit.constprop.0+0x6>
    41f0:	20000000 	.word	0x20000000
    41f4:	20000ec0 	.word	0x20000ec0
    41f8:	402e0000 	.word	0x402e0000
    41fc:	20005fac 	.word	0x20005fac
    4200:	20000ee0 	.word	0x20000ee0

00004204 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    4204:	4908      	ldr	r1, [pc, #32]	; (4228 <usb_stop_sof_interrupts+0x24>)
    4206:	2201      	movs	r2, #1
    4208:	780b      	ldrb	r3, [r1, #0]
    420a:	fa02 f000 	lsl.w	r0, r2, r0
    420e:	ea23 0000 	bic.w	r0, r3, r0
    4212:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    4214:	b930      	cbnz	r0, 4224 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    4216:	4a05      	ldr	r2, [pc, #20]	; (422c <usb_stop_sof_interrupts+0x28>)
    4218:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    421c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4220:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    4224:	4770      	bx	lr
    4226:	bf00      	nop
    4228:	20006065 	.word	0x20006065
    422c:	402e0000 	.word	0x402e0000

00004230 <usb_isr>:
{
    4230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    4234:	4c97      	ldr	r4, [pc, #604]	; (4494 <usb_isr+0x264>)
{
    4236:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    4238:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    423c:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    423e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    4242:	d553      	bpl.n	42ec <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    4244:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    4248:	2a00      	cmp	r2, #0
    424a:	d04a      	beq.n	42e2 <usb_isr+0xb2>
    424c:	4e92      	ldr	r6, [pc, #584]	; (4498 <usb_isr+0x268>)
    424e:	f8df a260 	ldr.w	sl, [pc, #608]	; 44b0 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    4252:	f8df 9274 	ldr.w	r9, [pc, #628]	; 44c8 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    4256:	f8df b274 	ldr.w	fp, [pc, #628]	; 44cc <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    425a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 44d0 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    425e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    4262:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    4266:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    426a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    426e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    4272:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4276:	049d      	lsls	r5, r3, #18
    4278:	d5f5      	bpl.n	4266 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    427a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    427e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4282:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    4286:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    428a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    428e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    4292:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    4296:	d1fa      	bne.n	428e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    4298:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    429a:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    429c:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    42a0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    42a4:	f000 81cf 	beq.w	4646 <usb_isr+0x416>
    42a8:	f200 80db 	bhi.w	4462 <usb_isr+0x232>
    42ac:	f240 3102 	movw	r1, #770	; 0x302
    42b0:	428b      	cmp	r3, r1
    42b2:	f000 81e7 	beq.w	4684 <usb_isr+0x454>
    42b6:	f200 809a 	bhi.w	43ee <usb_isr+0x1be>
    42ba:	2b82      	cmp	r3, #130	; 0x82
    42bc:	f000 81cb 	beq.w	4656 <usb_isr+0x426>
    42c0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    42c4:	f040 808a 	bne.w	43dc <usb_isr+0x1ac>
		if (endpoint > 7) break;
    42c8:	f010 0f78 	tst.w	r0, #120	; 0x78
    42cc:	b283      	uxth	r3, r0
    42ce:	f000 8203 	beq.w	46d8 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    42d2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    42d6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    42da:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    42de:	2a00      	cmp	r2, #0
    42e0:	d1bd      	bne.n	425e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    42e2:	4a6c      	ldr	r2, [pc, #432]	; (4494 <usb_isr+0x264>)
    42e4:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    42e8:	2b00      	cmp	r3, #0
    42ea:	d142      	bne.n	4372 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    42ec:	067e      	lsls	r6, r7, #25
    42ee:	d516      	bpl.n	431e <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    42f0:	4b68      	ldr	r3, [pc, #416]	; (4494 <usb_isr+0x264>)
    42f2:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    42f6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    42fa:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    42fe:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    4302:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    4306:	2c00      	cmp	r4, #0
    4308:	d1fb      	bne.n	4302 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    430a:	f04f 32ff 	mov.w	r2, #4294967295
    430e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    4312:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    4316:	f000 fd2d 	bl	4d74 <usb_serial_reset>
		endpointN_notify_mask = 0;
    431a:	4b60      	ldr	r3, [pc, #384]	; (449c <usb_isr+0x26c>)
    431c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    431e:	01fc      	lsls	r4, r7, #7
    4320:	d503      	bpl.n	432a <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    4322:	4b5f      	ldr	r3, [pc, #380]	; (44a0 <usb_isr+0x270>)
    4324:	681b      	ldr	r3, [r3, #0]
    4326:	b103      	cbz	r3, 432a <usb_isr+0xfa>
    4328:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    432a:	01b8      	lsls	r0, r7, #6
    432c:	d503      	bpl.n	4336 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    432e:	4b5d      	ldr	r3, [pc, #372]	; (44a4 <usb_isr+0x274>)
    4330:	681b      	ldr	r3, [r3, #0]
    4332:	b103      	cbz	r3, 4336 <usb_isr+0x106>
    4334:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    4336:	0779      	lsls	r1, r7, #29
    4338:	d508      	bpl.n	434c <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    433a:	4b56      	ldr	r3, [pc, #344]	; (4494 <usb_isr+0x264>)
    433c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    4340:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    4344:	d047      	beq.n	43d6 <usb_isr+0x1a6>
			usb_high_speed = 1;
    4346:	4b58      	ldr	r3, [pc, #352]	; (44a8 <usb_isr+0x278>)
    4348:	2201      	movs	r2, #1
    434a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    434c:	4b51      	ldr	r3, [pc, #324]	; (4494 <usb_isr+0x264>)
    434e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    4352:	061a      	lsls	r2, r3, #24
    4354:	d50a      	bpl.n	436c <usb_isr+0x13c>
    4356:	063b      	lsls	r3, r7, #24
    4358:	d508      	bpl.n	436c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    435a:	4a54      	ldr	r2, [pc, #336]	; (44ac <usb_isr+0x27c>)
    435c:	7813      	ldrb	r3, [r2, #0]
    435e:	b12b      	cbz	r3, 436c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    4360:	3b01      	subs	r3, #1
    4362:	b2db      	uxtb	r3, r3
    4364:	7013      	strb	r3, [r2, #0]
    4366:	2b00      	cmp	r3, #0
    4368:	f000 8272 	beq.w	4850 <usb_isr+0x620>
}
    436c:	b003      	add	sp, #12
    436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    4372:	494f      	ldr	r1, [pc, #316]	; (44b0 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    4374:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    4378:	6808      	ldr	r0, [r1, #0]
    437a:	4203      	tst	r3, r0
    437c:	f040 81d1 	bne.w	4722 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    4380:	4a46      	ldr	r2, [pc, #280]	; (449c <usb_isr+0x26c>)
    4382:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    4384:	401c      	ands	r4, r3
    4386:	d0b1      	beq.n	42ec <usb_isr+0xbc>
				while (tx) {
    4388:	ea5f 4814 	movs.w	r8, r4, lsr #16
    438c:	d010      	beq.n	43b0 <usb_isr+0x180>
    438e:	4e42      	ldr	r6, [pc, #264]	; (4498 <usb_isr+0x268>)
					tx &= ~(1<<p);
    4390:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    4394:	fa98 f5a8 	rbit	r5, r8
    4398:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    439c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    43a0:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    43a4:	3040      	adds	r0, #64	; 0x40
    43a6:	f7ff fec5 	bl	4134 <run_callbacks>
				while (tx) {
    43aa:	ea38 0805 	bics.w	r8, r8, r5
    43ae:	d1f1      	bne.n	4394 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    43b0:	b2a4      	uxth	r4, r4
				while(rx) {
    43b2:	2c00      	cmp	r4, #0
    43b4:	d09a      	beq.n	42ec <usb_isr+0xbc>
    43b6:	4e38      	ldr	r6, [pc, #224]	; (4498 <usb_isr+0x268>)
					rx &= ~(1<<p);
    43b8:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    43bc:	fa94 f5a4 	rbit	r5, r4
    43c0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    43c4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    43c8:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    43cc:	f7ff feb2 	bl	4134 <run_callbacks>
				while(rx) {
    43d0:	43ac      	bics	r4, r5
    43d2:	d1f3      	bne.n	43bc <usb_isr+0x18c>
    43d4:	e78a      	b.n	42ec <usb_isr+0xbc>
			usb_high_speed = 0;
    43d6:	4a34      	ldr	r2, [pc, #208]	; (44a8 <usb_isr+0x278>)
    43d8:	7013      	strb	r3, [r2, #0]
    43da:	e7b7      	b.n	434c <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    43dc:	2b80      	cmp	r3, #128	; 0x80
    43de:	f47f af78 	bne.w	42d2 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    43e2:	4834      	ldr	r0, [pc, #208]	; (44b4 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    43e4:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    43e6:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    43e8:	f7ff fec0 	bl	416c <endpoint0_transmit.constprop.0>
		return;
    43ec:	e775      	b.n	42da <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    43ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    43f2:	f000 810b 	beq.w	460c <usb_isr+0x3dc>
    43f6:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    43fa:	2b01      	cmp	r3, #1
    43fc:	f63f af69 	bhi.w	42d2 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4400:	4b2d      	ldr	r3, [pc, #180]	; (44b8 <usb_isr+0x288>)
    4402:	685d      	ldr	r5, [r3, #4]
    4404:	2d00      	cmp	r5, #0
    4406:	f43f af64 	beq.w	42d2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    440a:	fa1f fc8c 	uxth.w	ip, ip
    440e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    4412:	e004      	b.n	441e <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    4414:	691d      	ldr	r5, [r3, #16]
    4416:	330c      	adds	r3, #12
    4418:	2d00      	cmp	r5, #0
    441a:	f43f af5a 	beq.w	42d2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    441e:	881a      	ldrh	r2, [r3, #0]
    4420:	4572      	cmp	r2, lr
    4422:	d1f7      	bne.n	4414 <usb_isr+0x1e4>
    4424:	885a      	ldrh	r2, [r3, #2]
    4426:	4562      	cmp	r2, ip
    4428:	d1f4      	bne.n	4414 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    442a:	ea4f 221e 	mov.w	r2, lr, lsr #8
    442e:	2a03      	cmp	r2, #3
    4430:	f000 81a5 	beq.w	477e <usb_isr+0x54e>
					datalen = list->length;
    4434:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    4436:	0c00      	lsrs	r0, r0, #16
    4438:	4282      	cmp	r2, r0
    443a:	bf28      	it	cs
    443c:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    443e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    4442:	f040 81a1 	bne.w	4788 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    4446:	4b18      	ldr	r3, [pc, #96]	; (44a8 <usb_isr+0x278>)
    4448:	491c      	ldr	r1, [pc, #112]	; (44bc <usb_isr+0x28c>)
    444a:	7818      	ldrb	r0, [r3, #0]
    444c:	4b1c      	ldr	r3, [pc, #112]	; (44c0 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    444e:	9201      	str	r2, [sp, #4]
    4450:	2800      	cmp	r0, #0
    4452:	bf18      	it	ne
    4454:	4619      	movne	r1, r3
    4456:	481b      	ldr	r0, [pc, #108]	; (44c4 <usb_isr+0x294>)
    4458:	f7ff fc6a 	bl	3d30 <memcpy>
    445c:	4d19      	ldr	r5, [pc, #100]	; (44c4 <usb_isr+0x294>)
    445e:	9a01      	ldr	r2, [sp, #4]
    4460:	e1e1      	b.n	4826 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    4462:	f242 2121 	movw	r1, #8737	; 0x2221
    4466:	428b      	cmp	r3, r1
    4468:	d07c      	beq.n	4564 <usb_isr+0x334>
    446a:	d933      	bls.n	44d4 <usb_isr+0x2a4>
    446c:	f242 3121 	movw	r1, #8993	; 0x2321
    4470:	428b      	cmp	r3, r1
    4472:	f000 8081 	beq.w	4578 <usb_isr+0x348>
    4476:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    447a:	428b      	cmp	r3, r1
    447c:	f47f af29 	bne.w	42d2 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    4480:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    4484:	b283      	uxth	r3, r0
    4486:	f47f af24 	bne.w	42d2 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    448a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    448e:	f363 0c0f 	bfi	ip, r3, #0, #16
    4492:	e7b5      	b.n	4400 <usb_isr+0x1d0>
    4494:	402e0000 	.word	0x402e0000
    4498:	20000000 	.word	0x20000000
    449c:	20005fb0 	.word	0x20005fb0
    44a0:	20006048 	.word	0x20006048
    44a4:	2000604c 	.word	0x2000604c
    44a8:	2000606b 	.word	0x2000606b
    44ac:	2000606c 	.word	0x2000606c
    44b0:	20005fac 	.word	0x20005fac
    44b4:	20005fe4 	.word	0x20005fe4
    44b8:	200008ac 	.word	0x200008ac
    44bc:	60001e84 	.word	0x60001e84
    44c0:	60001ee8 	.word	0x60001ee8
    44c4:	20200000 	.word	0x20200000
    44c8:	20005fa4 	.word	0x20005fa4
    44cc:	b8c6cf5d 	.word	0xb8c6cf5d
    44d0:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    44d4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    44d8:	d066      	beq.n	45a8 <usb_isr+0x378>
    44da:	f242 0121 	movw	r1, #8225	; 0x2021
    44de:	428b      	cmp	r3, r1
    44e0:	f47f aef7 	bne.w	42d2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    44e4:	0c03      	lsrs	r3, r0, #16
    44e6:	2b07      	cmp	r3, #7
    44e8:	f47f aef3 	bne.w	42d2 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    44ec:	4bb2      	ldr	r3, [pc, #712]	; (47b8 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    44ee:	49b3      	ldr	r1, [pc, #716]	; (47bc <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    44f0:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    44f2:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    44f4:	49b2      	ldr	r1, [pc, #712]	; (47c0 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    44f6:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    44f8:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    44fc:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    4500:	2201      	movs	r2, #1
    4502:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    4504:	4aaf      	ldr	r2, [pc, #700]	; (47c4 <usb_isr+0x594>)
    4506:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    4508:	4aaf      	ldr	r2, [pc, #700]	; (47c8 <usb_isr+0x598>)
    450a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    450c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    4510:	f041 0101 	orr.w	r1, r1, #1
    4514:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4518:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    451c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    4520:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    4522:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    4524:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4528:	2b00      	cmp	r3, #0
    452a:	d1fb      	bne.n	4524 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    452c:	4aa7      	ldr	r2, [pc, #668]	; (47cc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    452e:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    4530:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    4532:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4534:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4536:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4538:	f248 0380 	movw	r3, #32896	; 0x8080
    453c:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    453e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4542:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4546:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    454a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    454e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    4552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4556:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    455a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    455e:	2b00      	cmp	r3, #0
    4560:	d1fb      	bne.n	455a <usb_isr+0x32a>
    4562:	e6ba      	b.n	42da <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    4564:	b280      	uxth	r0, r0
    4566:	b938      	cbnz	r0, 4578 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    4568:	4b99      	ldr	r3, [pc, #612]	; (47d0 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    456a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    456e:	6819      	ldr	r1, [r3, #0]
    4570:	4b98      	ldr	r3, [pc, #608]	; (47d4 <usb_isr+0x5a4>)
    4572:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    4574:	4b98      	ldr	r3, [pc, #608]	; (47d8 <usb_isr+0x5a8>)
    4576:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    4578:	4b94      	ldr	r3, [pc, #592]	; (47cc <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    457a:	2200      	movs	r2, #0
    457c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    457e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    4580:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4582:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    4584:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4586:	2280      	movs	r2, #128	; 0x80
    4588:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    458a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    458e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4592:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    459a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    459e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    45a2:	2b00      	cmp	r3, #0
    45a4:	d1fb      	bne.n	459e <usb_isr+0x36e>
    45a6:	e698      	b.n	42da <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    45a8:	f3c2 4207 	ubfx	r2, r2, #16, #8
    45ac:	4b8b      	ldr	r3, [pc, #556]	; (47dc <usb_isr+0x5ac>)
    45ae:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    45b0:	4b8b      	ldr	r3, [pc, #556]	; (47e0 <usb_isr+0x5b0>)
    45b2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    45b6:	4b8b      	ldr	r3, [pc, #556]	; (47e4 <usb_isr+0x5b4>)
    45b8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    45bc:	4b8a      	ldr	r3, [pc, #552]	; (47e8 <usb_isr+0x5b8>)
    45be:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    45c2:	f000 fbd9 	bl	4d78 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    45c6:	2280      	movs	r2, #128	; 0x80
    45c8:	4629      	mov	r1, r5
    45ca:	4888      	ldr	r0, [pc, #544]	; (47ec <usb_isr+0x5bc>)
    45cc:	f001 f998 	bl	5900 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    45d0:	4b87      	ldr	r3, [pc, #540]	; (47f0 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    45d2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    45d4:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    45d8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    45dc:	4b7b      	ldr	r3, [pc, #492]	; (47cc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    45de:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    45e0:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    45e2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    45e4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    45e6:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    45e8:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    45ea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    45ee:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    45f2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    45f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    45fa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    45fe:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    4602:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4606:	2b00      	cmp	r3, #0
    4608:	d1fb      	bne.n	4602 <usb_isr+0x3d2>
    460a:	e666      	b.n	42da <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    460c:	4b6f      	ldr	r3, [pc, #444]	; (47cc <usb_isr+0x59c>)
    460e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    4610:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    4612:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4614:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    4616:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    4618:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    461a:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    461c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4620:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    4624:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    462c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4630:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4634:	2b00      	cmp	r3, #0
    4636:	d1fb      	bne.n	4630 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    4638:	0c13      	lsrs	r3, r2, #16
    463a:	065b      	lsls	r3, r3, #25
    463c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    4640:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    4644:	e649      	b.n	42da <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    4646:	4b65      	ldr	r3, [pc, #404]	; (47dc <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    4648:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    464a:	486a      	ldr	r0, [pc, #424]	; (47f4 <usb_isr+0x5c4>)
    464c:	781b      	ldrb	r3, [r3, #0]
    464e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    4650:	f7ff fd8c 	bl	416c <endpoint0_transmit.constprop.0>
		return;
    4654:	e641      	b.n	42da <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    4656:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    4658:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    465c:	f47f ae39 	bne.w	42d2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    4660:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    4664:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    4668:	4a62      	ldr	r2, [pc, #392]	; (47f4 <usb_isr+0x5c4>)
    466a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    466c:	0618      	lsls	r0, r3, #24
    466e:	f100 809e 	bmi.w	47ae <usb_isr+0x57e>
    4672:	07cb      	lsls	r3, r1, #31
    4674:	d501      	bpl.n	467a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    4676:	2301      	movs	r3, #1
    4678:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    467a:	2102      	movs	r1, #2
    467c:	485d      	ldr	r0, [pc, #372]	; (47f4 <usb_isr+0x5c4>)
    467e:	f7ff fd75 	bl	416c <endpoint0_transmit.constprop.0>
		return;
    4682:	e62a      	b.n	42da <usb_isr+0xaa>
		if (endpoint > 7) break;
    4684:	f010 0f78 	tst.w	r0, #120	; 0x78
    4688:	b283      	uxth	r3, r0
    468a:	f47f ae22 	bne.w	42d2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    468e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    4692:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    4696:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    469a:	bf14      	ite	ne
    469c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    46a0:	f043 0301 	orreq.w	r3, r3, #1
    46a4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    46a8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    46aa:	4b48      	ldr	r3, [pc, #288]	; (47cc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    46ac:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    46ae:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    46b0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    46b2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    46b4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    46b6:	2280      	movs	r2, #128	; 0x80
    46b8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    46ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    46be:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    46c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    46c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    46ca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    46ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    46d2:	2b00      	cmp	r3, #0
    46d4:	d1fb      	bne.n	46ce <usb_isr+0x49e>
    46d6:	e600      	b.n	42da <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    46d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    46dc:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    46e0:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    46e4:	bf14      	ite	ne
    46e6:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    46ea:	f023 0301 	biceq.w	r3, r3, #1
    46ee:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    46f2:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    46f4:	4b35      	ldr	r3, [pc, #212]	; (47cc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    46f6:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    46f8:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    46fa:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    46fc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    46fe:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    4700:	2280      	movs	r2, #128	; 0x80
    4702:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    4704:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4708:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    470c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    4710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4714:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    4718:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    471c:	2b00      	cmp	r3, #0
    471e:	d1fb      	bne.n	4718 <usb_isr+0x4e8>
    4720:	e5db      	b.n	42da <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    4722:	2000      	movs	r0, #0
    4724:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    4726:	4926      	ldr	r1, [pc, #152]	; (47c0 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    4728:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    472a:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    472c:	f242 0121 	movw	r1, #8225	; 0x2021
    4730:	428c      	cmp	r4, r1
    4732:	f47f ae25 	bne.w	4380 <usb_isr+0x150>
    4736:	b280      	uxth	r0, r0
    4738:	2800      	cmp	r0, #0
    473a:	f47f ae21 	bne.w	4380 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    473e:	492e      	ldr	r1, [pc, #184]	; (47f8 <usb_isr+0x5c8>)
    4740:	4c2e      	ldr	r4, [pc, #184]	; (47fc <usb_isr+0x5cc>)
    4742:	c903      	ldmia	r1, {r0, r1}
    4744:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    4746:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    4748:	ea4f 4111 	mov.w	r1, r1, lsr #16
    474c:	6020      	str	r0, [r4, #0]
    474e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    4750:	f47f ae16 	bne.w	4380 <usb_isr+0x150>
	__disable_irq();
    4754:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    4756:	482a      	ldr	r0, [pc, #168]	; (4800 <usb_isr+0x5d0>)
    4758:	7801      	ldrb	r1, [r0, #0]
    475a:	f041 0108 	orr.w	r1, r1, #8
    475e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    4760:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    4764:	060d      	lsls	r5, r1, #24
    4766:	d405      	bmi.n	4774 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    4768:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    476a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    476c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    4770:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    4774:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    4776:	4a23      	ldr	r2, [pc, #140]	; (4804 <usb_isr+0x5d4>)
    4778:	2150      	movs	r1, #80	; 0x50
    477a:	7011      	strb	r1, [r2, #0]
    477c:	e600      	b.n	4380 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    477e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    4780:	782a      	ldrb	r2, [r5, #0]
    4782:	4282      	cmp	r2, r0
    4784:	bf28      	it	cs
    4786:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    4788:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    478c:	d144      	bne.n	4818 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    478e:	4b1e      	ldr	r3, [pc, #120]	; (4808 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4790:	4d1e      	ldr	r5, [pc, #120]	; (480c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    4792:	7818      	ldrb	r0, [r3, #0]
    4794:	491e      	ldr	r1, [pc, #120]	; (4810 <usb_isr+0x5e0>)
    4796:	4b1f      	ldr	r3, [pc, #124]	; (4814 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    4798:	9201      	str	r2, [sp, #4]
    479a:	2800      	cmp	r0, #0
    479c:	bf18      	it	ne
    479e:	4619      	movne	r1, r3
    47a0:	4628      	mov	r0, r5
    47a2:	f7ff fac5 	bl	3d30 <memcpy>
					usb_descriptor_buffer[1] = 7;
    47a6:	2307      	movs	r3, #7
    47a8:	706b      	strb	r3, [r5, #1]
    47aa:	9a01      	ldr	r2, [sp, #4]
    47ac:	e03b      	b.n	4826 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    47ae:	03c9      	lsls	r1, r1, #15
    47b0:	f53f af61 	bmi.w	4676 <usb_isr+0x446>
    47b4:	e761      	b.n	467a <usb_isr+0x44a>
    47b6:	bf00      	nop
    47b8:	20000ee0 	.word	0x20000ee0
    47bc:	20006fa4 	.word	0x20006fa4
    47c0:	20001080 	.word	0x20001080
    47c4:	00070080 	.word	0x00070080
    47c8:	20007fa4 	.word	0x20007fa4
    47cc:	20000ec0 	.word	0x20000ec0
    47d0:	20006034 	.word	0x20006034
    47d4:	20006044 	.word	0x20006044
    47d8:	20006069 	.word	0x20006069
    47dc:	2000606a 	.word	0x2000606a
    47e0:	00cc0002 	.word	0x00cc0002
    47e4:	000200c8 	.word	0x000200c8
    47e8:	00c80002 	.word	0x00c80002
    47ec:	20000080 	.word	0x20000080
    47f0:	74d59319 	.word	0x74d59319
    47f4:	20005fe4 	.word	0x20005fe4
    47f8:	20005fa4 	.word	0x20005fa4
    47fc:	2000603c 	.word	0x2000603c
    4800:	20006065 	.word	0x20006065
    4804:	2000606c 	.word	0x2000606c
    4808:	2000606b 	.word	0x2000606b
    480c:	20200000 	.word	0x20200000
    4810:	60001ee8 	.word	0x60001ee8
    4814:	60001e84 	.word	0x60001e84
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    4818:	4629      	mov	r1, r5
    481a:	4d10      	ldr	r5, [pc, #64]	; (485c <usb_isr+0x62c>)
    481c:	9201      	str	r2, [sp, #4]
    481e:	4628      	mov	r0, r5
    4820:	f7ff fa86 	bl	3d30 <memcpy>
    4824:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    4826:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    482a:	4415      	add	r5, r2
	asm("dsb");
    482c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    4830:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4834:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    4838:	3320      	adds	r3, #32
	} while (location < end_addr);
    483a:	429d      	cmp	r5, r3
    483c:	d8fa      	bhi.n	4834 <usb_isr+0x604>
	asm("dsb");
    483e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4842:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    4846:	4805      	ldr	r0, [pc, #20]	; (485c <usb_isr+0x62c>)
    4848:	4611      	mov	r1, r2
    484a:	f7ff fc8f 	bl	416c <endpoint0_transmit.constprop.0>
				return;
    484e:	e544      	b.n	42da <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    4850:	2003      	movs	r0, #3
    4852:	f7ff fcd7 	bl	4204 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    4856:	f001 f8cf 	bl	59f8 <___reboot_Teensyduino__veneer>
    485a:	bf00      	nop
    485c:	20200000 	.word	0x20200000

00004860 <usb_config_rx>:
{
    4860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4864:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    4866:	1e83      	subs	r3, r0, #2
    4868:	2b02      	cmp	r3, #2
    486a:	d901      	bls.n	4870 <usb_config_rx+0x10>
}
    486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    4870:	f8df 904c 	ldr.w	r9, [pc, #76]	; 48c0 <usb_config_rx+0x60>
    4874:	4615      	mov	r5, r2
    4876:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    4878:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    487a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    487e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    4880:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    4884:	2100      	movs	r1, #0
    4886:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    488a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    488c:	f001 f838 	bl	5900 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4890:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    4894:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    4896:	0952      	lsrs	r2, r2, #5
    4898:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    489c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    48a0:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    48a4:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    48a8:	2f00      	cmp	r7, #0
    48aa:	d0df      	beq.n	486c <usb_config_rx+0xc>
    48ac:	4a03      	ldr	r2, [pc, #12]	; (48bc <usb_config_rx+0x5c>)
    48ae:	40b3      	lsls	r3, r6
    48b0:	6811      	ldr	r1, [r2, #0]
    48b2:	430b      	orrs	r3, r1
    48b4:	6013      	str	r3, [r2, #0]
}
    48b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48ba:	bf00      	nop
    48bc:	20005fb0 	.word	0x20005fb0
    48c0:	20000000 	.word	0x20000000

000048c4 <usb_config_tx>:
{
    48c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    48c8:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    48ca:	1e81      	subs	r1, r0, #2
    48cc:	2902      	cmp	r1, #2
    48ce:	d901      	bls.n	48d4 <usb_config_tx+0x10>
}
    48d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    48d4:	01c7      	lsls	r7, r0, #7
    48d6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4924 <usb_config_tx+0x60>
    48da:	4692      	mov	sl, r2
    48dc:	4604      	mov	r4, r0
    48de:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    48e0:	223c      	movs	r2, #60	; 0x3c
    48e2:	2100      	movs	r1, #0
    48e4:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    48e6:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    48ea:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    48ec:	f108 0004 	add.w	r0, r8, #4
    48f0:	f001 f806 	bl	5900 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    48f4:	faba f28a 	clz	r2, sl
    48f8:	0952      	lsrs	r2, r2, #5
    48fa:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    48fe:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    4902:	2201      	movs	r2, #1
	qh->callback_function = callback;
    4904:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    4908:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    490c:	2e00      	cmp	r6, #0
    490e:	d0df      	beq.n	48d0 <usb_config_tx+0xc>
    4910:	4b03      	ldr	r3, [pc, #12]	; (4920 <usb_config_tx+0x5c>)
    4912:	3410      	adds	r4, #16
    4914:	6819      	ldr	r1, [r3, #0]
    4916:	40a2      	lsls	r2, r4
    4918:	430a      	orrs	r2, r1
    491a:	601a      	str	r2, [r3, #0]
}
    491c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4920:	20005fb0 	.word	0x20005fb0
    4924:	20000000 	.word	0x20000000

00004928 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    4928:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    492a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    492c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    492e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    4932:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    4936:	b410      	push	{r4}
	transfer->next = 1;
    4938:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    493a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    493c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    4940:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    4942:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    4946:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    494a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    494c:	6181      	str	r1, [r0, #24]
}
    494e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    4952:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    4956:	4770      	bx	lr

00004958 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    4958:	1e83      	subs	r3, r0, #2
{
    495a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    495c:	2b02      	cmp	r3, #2
    495e:	d900      	bls.n	4962 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    4960:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    4962:	4b06      	ldr	r3, [pc, #24]	; (497c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    4964:	f100 0110 	add.w	r1, r0, #16
    4968:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    496c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    4970:	fa0c f101 	lsl.w	r1, ip, r1
    4974:	3040      	adds	r0, #64	; 0x40
    4976:	f7ff bb99 	b.w	40ac <schedule_transfer>
    497a:	bf00      	nop
    497c:	20000000 	.word	0x20000000

00004980 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    4980:	1e83      	subs	r3, r0, #2
{
    4982:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    4984:	2b02      	cmp	r3, #2
    4986:	d900      	bls.n	498a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    4988:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    498a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    498c:	4b02      	ldr	r3, [pc, #8]	; (4998 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    498e:	4081      	lsls	r1, r0
    4990:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    4994:	f7ff bb8a 	b.w	40ac <schedule_transfer>
    4998:	20000000 	.word	0x20000000

0000499c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    499c:	6840      	ldr	r0, [r0, #4]
#endif
}
    499e:	4770      	bx	lr

000049a0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    49a0:	4a12      	ldr	r2, [pc, #72]	; (49ec <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    49a2:	4b13      	ldr	r3, [pc, #76]	; (49f0 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    49a4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    49a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    49ac:	4298      	cmp	r0, r3
{
    49ae:	b510      	push	{r4, lr}
    49b0:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    49b2:	d202      	bcs.n	49ba <usb_init_serialnumber+0x1a>
    49b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    49b8:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    49ba:	4c0e      	ldr	r4, [pc, #56]	; (49f4 <usb_init_serialnumber+0x54>)
    49bc:	a901      	add	r1, sp, #4
    49be:	220a      	movs	r2, #10
    49c0:	f7ff fa50 	bl	3e64 <ultoa>
	for (i=0; i<10; i++) {
    49c4:	a901      	add	r1, sp, #4
    49c6:	2300      	movs	r3, #0
    49c8:	4620      	mov	r0, r4
		char c = buf[i];
    49ca:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    49ce:	3301      	adds	r3, #1
		if (!c) break;
    49d0:	b13a      	cbz	r2, 49e2 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    49d2:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    49d4:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    49d8:	d1f7      	bne.n	49ca <usb_init_serialnumber+0x2a>
    49da:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    49dc:	7023      	strb	r3, [r4, #0]
}
    49de:	b004      	add	sp, #16
    49e0:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    49e2:	005b      	lsls	r3, r3, #1
    49e4:	b2db      	uxtb	r3, r3
    49e6:	7023      	strb	r3, [r4, #0]
}
    49e8:	b004      	add	sp, #16
    49ea:	bd10      	pop	{r4, pc}
    49ec:	401f4400 	.word	0x401f4400
    49f0:	00989680 	.word	0x00989680
    49f4:	20000abc 	.word	0x20000abc

000049f8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    49f8:	f000 bad2 	b.w	4fa0 <usb_serial_flush_input>

000049fc <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    49fc:	f000 baa2 	b.w	4f44 <usb_serial_peekchar>

00004a00 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    4a00:	f000 bb06 	b.w	5010 <usb_serial_getchar>

00004a04 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    4a04:	f000 bac0 	b.w	4f88 <usb_serial_available>

00004a08 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    4a08:	f000 bb5c 	b.w	50c4 <usb_serial_flush_output>

00004a0c <usb_serial_class::availableForWrite()>:
	size_t write(int n) { return write((uint8_t)n); }
	// Returns the number of bytes which may be transmitted by write() or print()
	// without waiting.  Typically programs which must maintain rapid checking
	// and response to sensors use availableForWrite() to decide whether to
	// transmit.
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    4a0c:	f000 bb32 	b.w	5074 <usb_serial_write_buffer_free>

00004a10 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4a10:	4608      	mov	r0, r1
    4a12:	4611      	mov	r1, r2
    4a14:	f000 bb22 	b.w	505c <usb_serial_write>

00004a18 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    4a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4a1a:	4c14      	ldr	r4, [pc, #80]	; (4a6c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4a1c:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4a20:	4e13      	ldr	r6, [pc, #76]	; (4a70 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    4a26:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4a2a:	4f12      	ldr	r7, [pc, #72]	; (4a74 <rx_queue_transfer+0x5c>)
    4a2c:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    4a30:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4a32:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    4a36:	4621      	mov	r1, r4
    4a38:	883a      	ldrh	r2, [r7, #0]
    4a3a:	4630      	mov	r0, r6
    4a3c:	f7ff ff74 	bl	4928 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    4a40:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    4a42:	4423      	add	r3, r4
	asm("dsb");
    4a44:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    4a48:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    4a4c:	3420      	adds	r4, #32
	} while (location < end_addr);
    4a4e:	42a3      	cmp	r3, r4
    4a50:	d8fa      	bhi.n	4a48 <rx_queue_transfer+0x30>
	asm("dsb");
    4a52:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4a56:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    4a5a:	2003      	movs	r0, #3
    4a5c:	4631      	mov	r1, r6
    4a5e:	f7ff ff8f 	bl	4980 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4a62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    4a66:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    4a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a6c:	20200080 	.word	0x20200080
    4a70:	20000f00 	.word	0x20000f00
    4a74:	20006054 	.word	0x20006054

00004a78 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4a78:	4b24      	ldr	r3, [pc, #144]	; (4b0c <rx_event+0x94>)
{
    4a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4a7e:	881c      	ldrh	r4, [r3, #0]
    4a80:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    4a82:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    4a84:	f3c3 430e 	ubfx	r3, r3, #16, #15
    4a88:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    4a8a:	2c00      	cmp	r4, #0
    4a8c:	dd24      	ble.n	4ad8 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    4a8e:	4920      	ldr	r1, [pc, #128]	; (4b10 <rx_event+0x98>)
		if (head != rx_tail) {
    4a90:	4820      	ldr	r0, [pc, #128]	; (4b14 <rx_event+0x9c>)
		uint32_t head = rx_head;
    4a92:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    4a94:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    4a96:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    4a98:	4e1f      	ldr	r6, [pc, #124]	; (4b18 <rx_event+0xa0>)
		if (head != rx_tail) {
    4a9a:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    4a9c:	481f      	ldr	r0, [pc, #124]	; (4b1c <rx_event+0xa4>)
		if (head != rx_tail) {
    4a9e:	d007      	beq.n	4ab0 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    4aa0:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    4aa4:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    4aa8:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    4aac:	4294      	cmp	r4, r2
    4aae:	d918      	bls.n	4ae2 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    4ab0:	3301      	adds	r3, #1
		rx_index[i] = 0;
    4ab2:	2200      	movs	r2, #0
		rx_count[i] = len;
    4ab4:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    4ab8:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    4aba:	4e19      	ldr	r6, [pc, #100]	; (4b20 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    4abc:	bf88      	it	hi
    4abe:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    4ac0:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    4ac4:	bf98      	it	ls
    4ac6:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    4ac8:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    4aca:	4b16      	ldr	r3, [pc, #88]	; (4b24 <rx_event+0xac>)
		rx_head = head;
    4acc:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    4ace:	681a      	ldr	r2, [r3, #0]
    4ad0:	4414      	add	r4, r2
    4ad2:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    4ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    4ad8:	4628      	mov	r0, r5
}
    4ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    4ade:	f7ff bf9b 	b.w	4a18 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4ae2:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    4ae6:	4910      	ldr	r1, [pc, #64]	; (4b28 <rx_event+0xb0>)
    4ae8:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    4aea:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    4aec:	4408      	add	r0, r1
    4aee:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    4af2:	f7ff f91d 	bl	3d30 <memcpy>
				rx_available += len;
    4af6:	4a0b      	ldr	r2, [pc, #44]	; (4b24 <rx_event+0xac>)
				rx_queue_transfer(i);
    4af8:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    4afa:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    4afe:	6813      	ldr	r3, [r2, #0]
    4b00:	4423      	add	r3, r4
}
    4b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    4b06:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    4b08:	f7ff bf86 	b.w	4a18 <rx_queue_transfer>
    4b0c:	20006054 	.word	0x20006054
    4b10:	20006063 	.word	0x20006063
    4b14:	20006064 	.word	0x20006064
    4b18:	20005ff0 	.word	0x20005ff0
    4b1c:	20006010 	.word	0x20006010
    4b20:	20006000 	.word	0x20006000
    4b24:	20005fec 	.word	0x20005fec
    4b28:	20200080 	.word	0x20200080

00004b2c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    4b2c:	4b1d      	ldr	r3, [pc, #116]	; (4ba4 <usb_serial_flush_callback+0x78>)
    4b2e:	781a      	ldrb	r2, [r3, #0]
    4b30:	2a00      	cmp	r2, #0
    4b32:	d136      	bne.n	4ba2 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    4b34:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4b38:	4a1b      	ldr	r2, [pc, #108]	; (4ba8 <usb_serial_flush_callback+0x7c>)
    4b3a:	7812      	ldrb	r2, [r2, #0]
    4b3c:	b38a      	cbz	r2, 4ba2 <usb_serial_flush_callback+0x76>
{
    4b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    4b42:	4d1a      	ldr	r5, [pc, #104]	; (4bac <usb_serial_flush_callback+0x80>)
    4b44:	882a      	ldrh	r2, [r5, #0]
    4b46:	b352      	cbz	r2, 4b9e <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    4b48:	4e19      	ldr	r6, [pc, #100]	; (4bb0 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    4b4a:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    4b4e:	4f19      	ldr	r7, [pc, #100]	; (4bb4 <usb_serial_flush_callback+0x88>)
    4b50:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4b52:	4c19      	ldr	r4, [pc, #100]	; (4bb8 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    4b54:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4b58:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    4b5c:	4642      	mov	r2, r8
    4b5e:	4638      	mov	r0, r7
    4b60:	4621      	mov	r1, r4
    4b62:	f7ff fee1 	bl	4928 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    4b66:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    4b6a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    4b6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4b72:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    4b76:	3420      	adds	r4, #32
	} while (location < end_addr);
    4b78:	42a2      	cmp	r2, r4
    4b7a:	d8fa      	bhi.n	4b72 <usb_serial_flush_callback+0x46>
	asm("dsb");
    4b7c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4b80:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    4b84:	2004      	movs	r0, #4
    4b86:	4639      	mov	r1, r7
    4b88:	f7ff fee6 	bl	4958 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    4b8c:	7833      	ldrb	r3, [r6, #0]
    4b8e:	3301      	adds	r3, #1
    4b90:	b2db      	uxtb	r3, r3
    4b92:	2b03      	cmp	r3, #3
    4b94:	bf88      	it	hi
    4b96:	2300      	movhi	r3, #0
    4b98:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    4b9a:	2300      	movs	r3, #0
    4b9c:	802b      	strh	r3, [r5, #0]
}
    4b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ba2:	4770      	bx	lr
    4ba4:	20006068 	.word	0x20006068
    4ba8:	2000606a 	.word	0x2000606a
    4bac:	20006056 	.word	0x20006056
    4bb0:	20006067 	.word	0x20006067
    4bb4:	20001000 	.word	0x20001000
    4bb8:	20201080 	.word	0x20201080

00004bbc <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    4bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bc0:	b085      	sub	sp, #20
	while (size > 0) {
    4bc2:	e9cd 1001 	strd	r1, r0, [sp, #4]
    4bc6:	2900      	cmp	r1, #0
    4bc8:	f000 80bf 	beq.w	4d4a <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    4bcc:	2300      	movs	r3, #0
    4bce:	4c60      	ldr	r4, [pc, #384]	; (4d50 <usb_serial_write.part.0+0x194>)
    4bd0:	f8df 8198 	ldr.w	r8, [pc, #408]	; 4d6c <usb_serial_write.part.0+0x1b0>
    4bd4:	f8df a198 	ldr.w	sl, [pc, #408]	; 4d70 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    4bd8:	4f5e      	ldr	r7, [pc, #376]	; (4d54 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    4bda:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    4bdc:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    4bde:	4a5e      	ldr	r2, [pc, #376]	; (4d58 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    4be0:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    4be2:	4b5e      	ldr	r3, [pc, #376]	; (4d5c <usb_serial_write.part.0+0x1a0>)
    4be4:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    4be6:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    4bea:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    4bee:	2b00      	cmp	r3, #0
    4bf0:	f040 80a7 	bne.w	4d42 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    4bf4:	461e      	mov	r6, r3
		int waiting=0;
    4bf6:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    4bf8:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    4bfa:	4648      	mov	r0, r9
    4bfc:	f7ff fece 	bl	499c <usb_transfer_status>
			if (!(status & 0x80)) {
    4c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    4c04:	f000 808c 	beq.w	4d20 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    4c08:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    4c0c:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    4c10:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    4c14:	b905      	cbnz	r5, 4c18 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    4c16:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    4c18:	2b00      	cmp	r3, #0
    4c1a:	d17d      	bne.n	4d18 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    4c1c:	683b      	ldr	r3, [r7, #0]
    4c1e:	1b9b      	subs	r3, r3, r6
    4c20:	2b78      	cmp	r3, #120	; 0x78
    4c22:	f200 8087 	bhi.w	4d34 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    4c26:	4b4e      	ldr	r3, [pc, #312]	; (4d60 <usb_serial_write.part.0+0x1a4>)
    4c28:	781b      	ldrb	r3, [r3, #0]
    4c2a:	2b00      	cmp	r3, #0
    4c2c:	d074      	beq.n	4d18 <usb_serial_write.part.0+0x15c>
			yield();
    4c2e:	f000 fa93 	bl	5158 <yield>
			tx_noautoflush = 1;
    4c32:	2201      	movs	r2, #1
		while (!tx_available) {
    4c34:	f8b8 3000 	ldrh.w	r3, [r8]
    4c38:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    4c3a:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d0dc      	beq.n	4bfa <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4c40:	4a46      	ldr	r2, [pc, #280]	; (4d5c <usb_serial_write.part.0+0x1a0>)
    4c42:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    4c46:	7811      	ldrb	r1, [r2, #0]
    4c48:	461a      	mov	r2, r3
    4c4a:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    4c4e:	4d45      	ldr	r5, [pc, #276]	; (4d64 <usb_serial_write.part.0+0x1a8>)
    4c50:	02c9      	lsls	r1, r1, #11
    4c52:	4428      	add	r0, r5
		if (size >= tx_available) {
    4c54:	9d01      	ldr	r5, [sp, #4]
    4c56:	4295      	cmp	r5, r2
    4c58:	d217      	bcs.n	4c8a <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    4c5a:	9303      	str	r3, [sp, #12]
    4c5c:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    4c60:	462a      	mov	r2, r5
    4c62:	f7ff f865 	bl	3d30 <memcpy>
			tx_available -= size;
    4c66:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    4c68:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    4c6c:	1b5b      	subs	r3, r3, r5
    4c6e:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    4c72:	4b3d      	ldr	r3, [pc, #244]	; (4d68 <usb_serial_write.part.0+0x1ac>)
    4c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    4c78:	f3bf 8f4f 	dsb	sy
			sent += size;
    4c7c:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    4c7e:	2300      	movs	r3, #0
			sent += size;
    4c80:	4428      	add	r0, r5
		tx_noautoflush = 0;
    4c82:	7023      	strb	r3, [r4, #0]
}
    4c84:	b005      	add	sp, #20
    4c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    4c8a:	4b36      	ldr	r3, [pc, #216]	; (4d64 <usb_serial_write.part.0+0x1a8>)
    4c8c:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    4c8e:	9902      	ldr	r1, [sp, #8]
    4c90:	f7ff f84e 	bl	3d30 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    4c94:	2300      	movs	r3, #0
    4c96:	f44f 6200 	mov.w	r2, #2048	; 0x800
    4c9a:	4629      	mov	r1, r5
    4c9c:	4648      	mov	r0, r9
    4c9e:	f7ff fe43 	bl	4928 <usb_prepare_transfer>
	asm("dsb");
    4ca2:	f3bf 8f4f 	dsb	sy
    4ca6:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    4caa:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    4cae:	4293      	cmp	r3, r2
    4cb0:	bf34      	ite	cc
    4cb2:	2301      	movcc	r3, #1
    4cb4:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    4cb6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4cba:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    4cbe:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    4cc2:	3520      	adds	r5, #32
	} while (location < end_addr);
    4cc4:	42ab      	cmp	r3, r5
    4cc6:	d1fa      	bne.n	4cbe <usb_serial_write.part.0+0x102>
	asm("dsb");
    4cc8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    4ccc:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    4cd0:	2004      	movs	r0, #4
    4cd2:	4649      	mov	r1, r9
    4cd4:	f7ff fe40 	bl	4958 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    4cd8:	4a20      	ldr	r2, [pc, #128]	; (4d5c <usb_serial_write.part.0+0x1a0>)
    4cda:	7813      	ldrb	r3, [r2, #0]
    4cdc:	3301      	adds	r3, #1
    4cde:	b2db      	uxtb	r3, r3
    4ce0:	2b03      	cmp	r3, #3
    4ce2:	bf84      	itt	hi
    4ce4:	2300      	movhi	r3, #0
    4ce6:	4a1d      	ldrhi	r2, [pc, #116]	; (4d5c <usb_serial_write.part.0+0x1a0>)
    4ce8:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    4cea:	f8b8 3000 	ldrh.w	r3, [r8]
    4cee:	9a01      	ldr	r2, [sp, #4]
    4cf0:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    4cf2:	9a00      	ldr	r2, [sp, #0]
    4cf4:	441a      	add	r2, r3
			size -= tx_available;
    4cf6:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    4cf8:	9200      	str	r2, [sp, #0]
			data += tx_available;
    4cfa:	9a02      	ldr	r2, [sp, #8]
    4cfc:	441a      	add	r2, r3
			tx_available = 0;
    4cfe:	2300      	movs	r3, #0
			data += tx_available;
    4d00:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    4d02:	4a19      	ldr	r2, [pc, #100]	; (4d68 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    4d04:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    4d08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    4d0c:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    4d10:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    4d12:	2900      	cmp	r1, #0
    4d14:	f47f af62 	bne.w	4bdc <usb_serial_write.part.0+0x20>
	return sent;
    4d18:	9800      	ldr	r0, [sp, #0]
}
    4d1a:	b005      	add	sp, #20
    4d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    4d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4d24:	4b0d      	ldr	r3, [pc, #52]	; (4d5c <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    4d26:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4d2a:	7819      	ldrb	r1, [r3, #0]
				break;
    4d2c:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    4d2e:	f8a8 2000 	strh.w	r2, [r8]
				break;
    4d32:	e78a      	b.n	4c4a <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    4d34:	2301      	movs	r3, #1
				return sent;
    4d36:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    4d38:	f88a 3000 	strb.w	r3, [sl]
}
    4d3c:	b005      	add	sp, #20
    4d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    4d42:	461a      	mov	r2, r3
    4d44:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    4d48:	e77f      	b.n	4c4a <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    4d4a:	9801      	ldr	r0, [sp, #4]
	return sent;
    4d4c:	e7e5      	b.n	4d1a <usb_serial_write.part.0+0x15e>
    4d4e:	bf00      	nop
    4d50:	20006068 	.word	0x20006068
    4d54:	20006034 	.word	0x20006034
    4d58:	20001000 	.word	0x20001000
    4d5c:	20006067 	.word	0x20006067
    4d60:	2000606a 	.word	0x2000606a
    4d64:	20201080 	.word	0x20201080
    4d68:	402e0000 	.word	0x402e0000
    4d6c:	20006056 	.word	0x20006056
    4d70:	20006066 	.word	0x20006066

00004d74 <usb_serial_reset>:
}
    4d74:	4770      	bx	lr
    4d76:	bf00      	nop

00004d78 <usb_serial_configure>:
	if (usb_high_speed) {
    4d78:	4b2a      	ldr	r3, [pc, #168]	; (4e24 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4d7a:	2100      	movs	r1, #0
    4d7c:	2280      	movs	r2, #128	; 0x80
    4d7e:	482a      	ldr	r0, [pc, #168]	; (4e28 <usb_serial_configure+0xb0>)
{
    4d80:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    4d82:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    4d84:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    4d86:	4d29      	ldr	r5, [pc, #164]	; (4e2c <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    4d88:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    4d8a:	4e29      	ldr	r6, [pc, #164]	; (4e30 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    4d8c:	bf0c      	ite	eq
    4d8e:	2340      	moveq	r3, #64	; 0x40
    4d90:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    4d94:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    4d96:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    4d98:	f000 fdb2 	bl	5900 <memset>
	tx_head = 0;
    4d9c:	4a25      	ldr	r2, [pc, #148]	; (4e34 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4d9e:	4621      	mov	r1, r4
	tx_available = 0;
    4da0:	4b25      	ldr	r3, [pc, #148]	; (4e38 <usb_serial_configure+0xc0>)
	tx_head = 0;
    4da2:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4da4:	f44f 7280 	mov.w	r2, #256	; 0x100
    4da8:	4824      	ldr	r0, [pc, #144]	; (4e3c <usb_serial_configure+0xc4>)
	tx_available = 0;
    4daa:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    4dac:	f000 fda8 	bl	5900 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    4db0:	4a23      	ldr	r2, [pc, #140]	; (4e40 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4db2:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    4db4:	4b23      	ldr	r3, [pc, #140]	; (4e44 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4db6:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    4db8:	e9c2 4400 	strd	r4, r4, [r2]
    4dbc:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    4dc0:	4a21      	ldr	r2, [pc, #132]	; (4e48 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    4dc2:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    4dc6:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    4dc8:	4a20      	ldr	r2, [pc, #128]	; (4e4c <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    4dca:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    4dce:	4b20      	ldr	r3, [pc, #128]	; (4e50 <usb_serial_configure+0xd8>)
    4dd0:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4dd2:	4623      	mov	r3, r4
	rx_available = 0;
    4dd4:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    4dd6:	4622      	mov	r2, r4
    4dd8:	f7ff fd74 	bl	48c4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    4ddc:	4622      	mov	r2, r4
    4dde:	8831      	ldrh	r1, [r6, #0]
    4de0:	2003      	movs	r0, #3
    4de2:	4b1c      	ldr	r3, [pc, #112]	; (4e54 <usb_serial_configure+0xdc>)
    4de4:	f7ff fd3c 	bl	4860 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    4de8:	4623      	mov	r3, r4
    4dea:	2201      	movs	r2, #1
    4dec:	8829      	ldrh	r1, [r5, #0]
    4dee:	2004      	movs	r0, #4
    4df0:	f7ff fd68 	bl	48c4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    4df4:	4620      	mov	r0, r4
    4df6:	3401      	adds	r4, #1
    4df8:	f7ff fe0e 	bl	4a18 <rx_queue_transfer>
    4dfc:	2c08      	cmp	r4, #8
    4dfe:	d1f9      	bne.n	4df4 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    4e00:	4b15      	ldr	r3, [pc, #84]	; (4e58 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    4e02:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    4e04:	4815      	ldr	r0, [pc, #84]	; (4e5c <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    4e06:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    4e08:	4c15      	ldr	r4, [pc, #84]	; (4e60 <usb_serial_configure+0xe8>)
    4e0a:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    4e0c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    4e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    4e14:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    4e18:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    4e1c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    4e20:	bd70      	pop	{r4, r5, r6, pc}
    4e22:	bf00      	nop
    4e24:	2000606b 	.word	0x2000606b
    4e28:	20001000 	.word	0x20001000
    4e2c:	20006058 	.word	0x20006058
    4e30:	20006054 	.word	0x20006054
    4e34:	20006067 	.word	0x20006067
    4e38:	20006056 	.word	0x20006056
    4e3c:	20000f00 	.word	0x20000f00
    4e40:	20005ff0 	.word	0x20005ff0
    4e44:	20006000 	.word	0x20006000
    4e48:	20006063 	.word	0x20006063
    4e4c:	20005fec 	.word	0x20005fec
    4e50:	20006064 	.word	0x20006064
    4e54:	00004a79 	.word	0x00004a79
    4e58:	402e0000 	.word	0x402e0000
    4e5c:	20006048 	.word	0x20006048
    4e60:	00004b2d 	.word	0x00004b2d

00004e64 <usb_serial_read>:
{
    4e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4e68:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4e6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    4e70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 4f3c <usb_serial_read+0xd8>
{
    4e74:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    4e76:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    4e7a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    4e7c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    4e80:	2900      	cmp	r1, #0
    4e82:	d04f      	beq.n	4f24 <usb_serial_read+0xc0>
    4e84:	4680      	mov	r8, r0
    4e86:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    4e88:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    4e8a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 4f40 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    4e8e:	4b26      	ldr	r3, [pc, #152]	; (4f28 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    4e90:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4e94:	4925      	ldr	r1, [pc, #148]	; (4f2c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    4e96:	781b      	ldrb	r3, [r3, #0]
    4e98:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    4e9a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    4e9e:	d03f      	beq.n	4f20 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    4ea0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    4ea2:	4b23      	ldr	r3, [pc, #140]	; (4f30 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4ea4:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    4ea6:	bf28      	it	cs
    4ea8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    4eaa:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    4eac:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4eb0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    4eb4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    4eb6:	4b1f      	ldr	r3, [pc, #124]	; (4f34 <usb_serial_read+0xd0>)
    4eb8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    4ebc:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    4ec0:	42aa      	cmp	r2, r5
    4ec2:	d21c      	bcs.n	4efe <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4ec4:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    4ec8:	4918      	ldr	r1, [pc, #96]	; (4f2c <usb_serial_read+0xc8>)
			rx_available -= len;
    4eca:	4c1b      	ldr	r4, [pc, #108]	; (4f38 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    4ecc:	4461      	add	r1, ip
    4ece:	9201      	str	r2, [sp, #4]
    4ed0:	f7fe ff2e 	bl	3d30 <memcpy>
			rx_available -= len;
    4ed4:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    4ed6:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    4eda:	4658      	mov	r0, fp
			rx_index[i] += len;
    4edc:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    4ede:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    4ee2:	442a      	add	r2, r5
			rx_available -= len;
    4ee4:	4439      	add	r1, r7
			rx_index[i] += len;
    4ee6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    4eea:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    4eec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4ef0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4ef4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    4ef8:	b003      	add	sp, #12
    4efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4efe:	462a      	mov	r2, r5
			count += avail;
    4f00:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    4f02:	f7fe ff15 	bl	3d30 <memcpy>
			rx_available -= avail;
    4f06:	490c      	ldr	r1, [pc, #48]	; (4f38 <usb_serial_read+0xd4>)
			rx_tail = tail;
    4f08:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    4f0a:	4630      	mov	r0, r6
			rx_available -= avail;
    4f0c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    4f0e:	44a8      	add	r8, r5
			rx_available -= avail;
    4f10:	1b52      	subs	r2, r2, r5
    4f12:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    4f14:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    4f18:	f7ff fd7e 	bl	4a18 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    4f1c:	45bb      	cmp	fp, r7
    4f1e:	d8b6      	bhi.n	4e8e <usb_serial_read+0x2a>
	return count;
    4f20:	4638      	mov	r0, r7
    4f22:	e7e3      	b.n	4eec <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    4f24:	4608      	mov	r0, r1
    4f26:	e7e1      	b.n	4eec <usb_serial_read+0x88>
    4f28:	20006063 	.word	0x20006063
    4f2c:	20200080 	.word	0x20200080
    4f30:	20006010 	.word	0x20006010
    4f34:	20005ff0 	.word	0x20005ff0
    4f38:	20005fec 	.word	0x20005fec
    4f3c:	20006064 	.word	0x20006064
    4f40:	20006000 	.word	0x20006000

00004f44 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    4f44:	4b0b      	ldr	r3, [pc, #44]	; (4f74 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    4f46:	4a0c      	ldr	r2, [pc, #48]	; (4f78 <usb_serial_peekchar+0x34>)
    4f48:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    4f4a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    4f4c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    4f4e:	428a      	cmp	r2, r1
    4f50:	d00d      	beq.n	4f6e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    4f52:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    4f54:	4809      	ldr	r0, [pc, #36]	; (4f7c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4f56:	4a0a      	ldr	r2, [pc, #40]	; (4f80 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    4f58:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4f5a:	490a      	ldr	r1, [pc, #40]	; (4f84 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    4f5c:	bf28      	it	cs
    4f5e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    4f60:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    4f62:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    4f66:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    4f6a:	5c58      	ldrb	r0, [r3, r1]
    4f6c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    4f6e:	f04f 30ff 	mov.w	r0, #4294967295
}
    4f72:	4770      	bx	lr
    4f74:	20006063 	.word	0x20006063
    4f78:	20006064 	.word	0x20006064
    4f7c:	20006010 	.word	0x20006010
    4f80:	20200080 	.word	0x20200080
    4f84:	20006000 	.word	0x20006000

00004f88 <usb_serial_available>:
	uint32_t n = rx_available;
    4f88:	4b04      	ldr	r3, [pc, #16]	; (4f9c <usb_serial_available+0x14>)
{
    4f8a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    4f8c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    4f8e:	b10c      	cbz	r4, 4f94 <usb_serial_available+0xc>
}
    4f90:	4620      	mov	r0, r4
    4f92:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    4f94:	f000 f8e0 	bl	5158 <yield>
}
    4f98:	4620      	mov	r0, r4
    4f9a:	bd10      	pop	{r4, pc}
    4f9c:	20005fec 	.word	0x20005fec

00004fa0 <usb_serial_flush_input>:
{
    4fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    4fa4:	4e14      	ldr	r6, [pc, #80]	; (4ff8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    4fa6:	4d15      	ldr	r5, [pc, #84]	; (4ffc <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    4fa8:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    4faa:	782a      	ldrb	r2, [r5, #0]
    4fac:	4293      	cmp	r3, r2
    4fae:	d021      	beq.n	4ff4 <usb_serial_flush_input+0x54>
    4fb0:	b2dc      	uxtb	r4, r3
    4fb2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 5004 <usb_serial_flush_input+0x64>
    4fb6:	f8df b050 	ldr.w	fp, [pc, #80]	; 5008 <usb_serial_flush_input+0x68>
    4fba:	f8df 8050 	ldr.w	r8, [pc, #80]	; 500c <usb_serial_flush_input+0x6c>
    4fbe:	4f10      	ldr	r7, [pc, #64]	; (5000 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    4fc0:	3401      	adds	r4, #1
    4fc2:	2c08      	cmp	r4, #8
		rx_tail = tail;
    4fc4:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    4fc8:	d901      	bls.n	4fce <usb_serial_flush_input+0x2e>
    4fca:	2400      	movs	r4, #0
    4fcc:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    4fce:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    4fd2:	f8db 3000 	ldr.w	r3, [fp]
    4fd6:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    4fda:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    4fde:	1a52      	subs	r2, r2, r1
    4fe0:	1a9b      	subs	r3, r3, r2
    4fe2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    4fe6:	f7ff fd17 	bl	4a18 <rx_queue_transfer>
		rx_tail = tail;
    4fea:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    4fee:	782b      	ldrb	r3, [r5, #0]
    4ff0:	42a3      	cmp	r3, r4
    4ff2:	d1e5      	bne.n	4fc0 <usb_serial_flush_input+0x20>
}
    4ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ff8:	20006064 	.word	0x20006064
    4ffc:	20006063 	.word	0x20006063
    5000:	20006000 	.word	0x20006000
    5004:	20006010 	.word	0x20006010
    5008:	20005fec 	.word	0x20005fec
    500c:	20005ff0 	.word	0x20005ff0

00005010 <usb_serial_getchar>:
{
    5010:	b500      	push	{lr}
    5012:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    5014:	2101      	movs	r1, #1
    5016:	f10d 0007 	add.w	r0, sp, #7
    501a:	f7ff ff23 	bl	4e64 <usb_serial_read>
    501e:	b120      	cbz	r0, 502a <usb_serial_getchar+0x1a>
    5020:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    5024:	b003      	add	sp, #12
    5026:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    502a:	f04f 30ff 	mov.w	r0, #4294967295
    502e:	e7f9      	b.n	5024 <usb_serial_getchar+0x14>

00005030 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    5030:	4b09      	ldr	r3, [pc, #36]	; (5058 <usb_serial_putchar+0x28>)
{
    5032:	b500      	push	{lr}
    5034:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    5036:	781b      	ldrb	r3, [r3, #0]
{
    5038:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    503c:	b13b      	cbz	r3, 504e <usb_serial_putchar+0x1e>
    503e:	2101      	movs	r1, #1
    5040:	f10d 0007 	add.w	r0, sp, #7
    5044:	f7ff fdba 	bl	4bbc <usb_serial_write.part.0>
}
    5048:	b003      	add	sp, #12
    504a:	f85d fb04 	ldr.w	pc, [sp], #4
    504e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    5052:	b003      	add	sp, #12
    5054:	f85d fb04 	ldr.w	pc, [sp], #4
    5058:	2000606a 	.word	0x2000606a

0000505c <usb_serial_write>:
	if (!usb_configuration) return 0;
    505c:	4b04      	ldr	r3, [pc, #16]	; (5070 <usb_serial_write+0x14>)
    505e:	781b      	ldrb	r3, [r3, #0]
    5060:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5064:	b10b      	cbz	r3, 506a <usb_serial_write+0xe>
    5066:	f7ff bda9 	b.w	4bbc <usb_serial_write.part.0>
}
    506a:	4610      	mov	r0, r2
    506c:	4770      	bx	lr
    506e:	bf00      	nop
    5070:	2000606a 	.word	0x2000606a

00005074 <usb_serial_write_buffer_free>:
{
    5074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    5078:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    507a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 50c0 <usb_serial_write_buffer_free+0x4c>
    507e:	2301      	movs	r3, #1
    5080:	4d0d      	ldr	r5, [pc, #52]	; (50b8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    5082:	4627      	mov	r7, r4
    5084:	4e0d      	ldr	r6, [pc, #52]	; (50bc <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    5086:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    508a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    508c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    508e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    5090:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    5092:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    5096:	d005      	beq.n	50a4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    5098:	f7ff fc80 	bl	499c <usb_transfer_status>
    509c:	0603      	lsls	r3, r0, #24
    509e:	bf58      	it	pl
    50a0:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    50a4:	2c04      	cmp	r4, #4
    50a6:	d1f0      	bne.n	508a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    50a8:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    50ac:	2300      	movs	r3, #0
}
    50ae:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    50b0:	f888 3000 	strb.w	r3, [r8]
}
    50b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50b8:	20001000 	.word	0x20001000
    50bc:	20006067 	.word	0x20006067
    50c0:	20006068 	.word	0x20006068

000050c4 <usb_serial_flush_output>:
{
    50c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    50c8:	4b1d      	ldr	r3, [pc, #116]	; (5140 <usb_serial_flush_output+0x7c>)
    50ca:	781b      	ldrb	r3, [r3, #0]
    50cc:	b113      	cbz	r3, 50d4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    50ce:	4d1d      	ldr	r5, [pc, #116]	; (5144 <usb_serial_flush_output+0x80>)
    50d0:	882a      	ldrh	r2, [r5, #0]
    50d2:	b90a      	cbnz	r2, 50d8 <usb_serial_flush_output+0x14>
}
    50d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    50d8:	4e1b      	ldr	r6, [pc, #108]	; (5148 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    50da:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    50de:	491b      	ldr	r1, [pc, #108]	; (514c <usb_serial_flush_output+0x88>)
    50e0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    50e2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    50e4:	4c1a      	ldr	r4, [pc, #104]	; (5150 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    50e6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    50ea:	4f1a      	ldr	r7, [pc, #104]	; (5154 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    50ec:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    50f0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    50f2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    50f4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    50f6:	4621      	mov	r1, r4
    50f8:	2300      	movs	r3, #0
    50fa:	f7ff fc15 	bl	4928 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    50fe:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    5102:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    5106:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    510a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    510e:	3420      	adds	r4, #32
	} while (location < end_addr);
    5110:	42a2      	cmp	r2, r4
    5112:	d8fa      	bhi.n	510a <usb_serial_flush_output+0x46>
	asm("dsb");
    5114:	f3bf 8f4f 	dsb	sy
	asm("isb");
    5118:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    511c:	2004      	movs	r0, #4
    511e:	4641      	mov	r1, r8
    5120:	f7ff fc1a 	bl	4958 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    5124:	7833      	ldrb	r3, [r6, #0]
    5126:	3301      	adds	r3, #1
    5128:	b2db      	uxtb	r3, r3
    512a:	2b03      	cmp	r3, #3
    512c:	bf88      	it	hi
    512e:	2300      	movhi	r3, #0
    5130:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    5132:	2300      	movs	r3, #0
    5134:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    5136:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    513a:	703b      	strb	r3, [r7, #0]
}
    513c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5140:	2000606a 	.word	0x2000606a
    5144:	20006056 	.word	0x20006056
    5148:	20006067 	.word	0x20006067
    514c:	20001000 	.word	0x20001000
    5150:	20201080 	.word	0x20201080
    5154:	20006068 	.word	0x20006068

00005158 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    515c:	4e32      	ldr	r6, [pc, #200]	; (5228 <yield+0xd0>)
    515e:	7833      	ldrb	r3, [r6, #0]
    5160:	b163      	cbz	r3, 517c <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    5162:	4f32      	ldr	r7, [pc, #200]	; (522c <yield+0xd4>)
    5164:	783a      	ldrb	r2, [r7, #0]
    5166:	b94a      	cbnz	r2, 517c <yield+0x24>
	running = 1;
    5168:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    516a:	07d9      	lsls	r1, r3, #31
	running = 1;
    516c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    516e:	d444      	bmi.n	51fa <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    5170:	079a      	lsls	r2, r3, #30
    5172:	d426      	bmi.n	51c2 <yield+0x6a>

	running = 0;
    5174:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    5176:	075b      	lsls	r3, r3, #29
	running = 0;
    5178:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    517a:	d401      	bmi.n	5180 <yield+0x28>
	
};
    517c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    5180:	4b2b      	ldr	r3, [pc, #172]	; (5230 <yield+0xd8>)
    5182:	681a      	ldr	r2, [r3, #0]
    5184:	2a00      	cmp	r2, #0
    5186:	d0f9      	beq.n	517c <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5188:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    518c:	2a00      	cmp	r2, #0
    518e:	d1f5      	bne.n	517c <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5190:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    5194:	b672      	cpsid	i
		EventResponder *first = firstYield;
    5196:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    5198:	2800      	cmp	r0, #0
    519a:	d03b      	beq.n	5214 <yield+0xbc>
		if (runningFromYield) {
    519c:	4c25      	ldr	r4, [pc, #148]	; (5234 <yield+0xdc>)
    519e:	7821      	ldrb	r1, [r4, #0]
    51a0:	2900      	cmp	r1, #0
    51a2:	d137      	bne.n	5214 <yield+0xbc>
		runningFromYield = true;
    51a4:	2201      	movs	r2, #1
    51a6:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    51a8:	6942      	ldr	r2, [r0, #20]
    51aa:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    51ac:	2a00      	cmp	r2, #0
    51ae:	d038      	beq.n	5222 <yield+0xca>
			firstYield->_prev = nullptr;
    51b0:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    51b2:	b905      	cbnz	r5, 51b6 <yield+0x5e>
    51b4:	b662      	cpsie	i
		first->_triggered = false;
    51b6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    51b8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    51ba:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    51bc:	4798      	blx	r3
		runningFromYield = false;
    51be:	7025      	strb	r5, [r4, #0]
    51c0:	e7dc      	b.n	517c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    51c2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5240 <yield+0xe8>
    51c6:	f898 2000 	ldrb.w	r2, [r8]
    51ca:	2a00      	cmp	r2, #0
    51cc:	d0d2      	beq.n	5174 <yield+0x1c>
    51ce:	2500      	movs	r5, #0
    51d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 5244 <yield+0xec>
    51d4:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    51d6:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    51da:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    51dc:	6823      	ldr	r3, [r4, #0]
    51de:	4620      	mov	r0, r4
    51e0:	691b      	ldr	r3, [r3, #16]
    51e2:	4798      	blx	r3
    51e4:	b110      	cbz	r0, 51ec <yield+0x94>
    51e6:	6963      	ldr	r3, [r4, #20]
    51e8:	689b      	ldr	r3, [r3, #8]
    51ea:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    51ec:	f898 2000 	ldrb.w	r2, [r8]
    51f0:	b2eb      	uxtb	r3, r5
    51f2:	429a      	cmp	r2, r3
    51f4:	d8ef      	bhi.n	51d6 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    51f6:	7833      	ldrb	r3, [r6, #0]
    51f8:	e7bc      	b.n	5174 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    51fa:	f7ff fec5 	bl	4f88 <usb_serial_available>
		if (Serial.available()) serialEvent();
    51fe:	b968      	cbnz	r0, 521c <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    5200:	4b0d      	ldr	r3, [pc, #52]	; (5238 <yield+0xe0>)
    5202:	781b      	ldrb	r3, [r3, #0]
    5204:	b90b      	cbnz	r3, 520a <yield+0xb2>
    5206:	7833      	ldrb	r3, [r6, #0]
    5208:	e7b2      	b.n	5170 <yield+0x18>
    520a:	7833      	ldrb	r3, [r6, #0]
    520c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    5210:	7033      	strb	r3, [r6, #0]
    5212:	e7ad      	b.n	5170 <yield+0x18>
		if (doit) __enable_irq();
    5214:	2d00      	cmp	r5, #0
    5216:	d1b1      	bne.n	517c <yield+0x24>
    5218:	b662      	cpsie	i
    521a:	e7af      	b.n	517c <yield+0x24>
		if (Serial.available()) serialEvent();
    521c:	f000 fa8a 	bl	5734 <serialEvent()>
    5220:	e7ee      	b.n	5200 <yield+0xa8>
			lastYield = nullptr;
    5222:	4b06      	ldr	r3, [pc, #24]	; (523c <yield+0xe4>)
    5224:	601a      	str	r2, [r3, #0]
    5226:	e7c4      	b.n	51b2 <yield+0x5a>
    5228:	20000ad2 	.word	0x20000ad2
    522c:	20006060 	.word	0x20006060
    5230:	20005e38 	.word	0x20005e38
    5234:	2000605e 	.word	0x2000605e
    5238:	60001f58 	.word	0x60001f58
    523c:	20005e44 	.word	0x20005e44
    5240:	2000605f 	.word	0x2000605f
    5244:	20005e48 	.word	0x20005e48

00005248 <EventResponder::runFromInterrupt()>:
{
    5248:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    524a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    524e:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    5250:	4c0c      	ldr	r4, [pc, #48]	; (5284 <EventResponder::runFromInterrupt()+0x3c>)
    5252:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5254:	b180      	cbz	r0, 5278 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    5256:	4e0c      	ldr	r6, [pc, #48]	; (5288 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    5258:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    525a:	6943      	ldr	r3, [r0, #20]
    525c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    525e:	b173      	cbz	r3, 527e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    5260:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    5262:	b902      	cbnz	r2, 5266 <EventResponder::runFromInterrupt()+0x1e>
    5264:	b662      	cpsie	i
			(*(first->_function))(*first);
    5266:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    5268:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    526a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    526c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5270:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    5272:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5274:	2800      	cmp	r0, #0
    5276:	d1f0      	bne.n	525a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    5278:	b902      	cbnz	r2, 527c <EventResponder::runFromInterrupt()+0x34>
    527a:	b662      	cpsie	i
}
    527c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    527e:	6033      	str	r3, [r6, #0]
    5280:	e7ef      	b.n	5262 <EventResponder::runFromInterrupt()+0x1a>
    5282:	bf00      	nop
    5284:	20005e40 	.word	0x20005e40
    5288:	20005e3c 	.word	0x20005e3c

0000528c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    528c:	f7ff bfdc 	b.w	5248 <EventResponder::runFromInterrupt()>

00005290 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    5290:	4904      	ldr	r1, [pc, #16]	; (52a4 <systick_isr+0x14>)
	systick_millis_count++;
    5292:	4a05      	ldr	r2, [pc, #20]	; (52a8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    5294:	6849      	ldr	r1, [r1, #4]
    5296:	4b05      	ldr	r3, [pc, #20]	; (52ac <systick_isr+0x1c>)
    5298:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    529a:	6813      	ldr	r3, [r2, #0]
    529c:	3301      	adds	r3, #1
    529e:	6013      	str	r3, [r2, #0]
}
    52a0:	4770      	bx	lr
    52a2:	bf00      	nop
    52a4:	e0001000 	.word	0xe0001000
    52a8:	20006034 	.word	0x20006034
    52ac:	20006030 	.word	0x20006030

000052b0 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    52b0:	49a2      	ldr	r1, [pc, #648]	; (553c <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    52b2:	4ba3      	ldr	r3, [pc, #652]	; (5540 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    52b4:	4288      	cmp	r0, r1
{
    52b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    52ba:	4ca2      	ldr	r4, [pc, #648]	; (5544 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    52bc:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    52be:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    52c0:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    52c4:	d91b      	bls.n	52fe <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    52c6:	4ba0      	ldr	r3, [pc, #640]	; (5548 <set_arm_clock+0x298>)
    52c8:	4298      	cmp	r0, r3
    52ca:	f240 8102 	bls.w	54d2 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    52ce:	1ac3      	subs	r3, r0, r3
    52d0:	499e      	ldr	r1, [pc, #632]	; (554c <set_arm_clock+0x29c>)
    52d2:	0a1b      	lsrs	r3, r3, #8
    52d4:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    52d8:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    52dc:	09db      	lsrs	r3, r3, #7
    52de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    52e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    52e6:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    52ea:	428b      	cmp	r3, r1
    52ec:	bf28      	it	cs
    52ee:	460b      	movcs	r3, r1
    52f0:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    52f4:	4b96      	ldr	r3, [pc, #600]	; (5550 <set_arm_clock+0x2a0>)
    52f6:	fba3 3707 	umull	r3, r7, r3, r7
    52fa:	08ff      	lsrs	r7, r7, #3
    52fc:	e004      	b.n	5308 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    52fe:	4f95      	ldr	r7, [pc, #596]	; (5554 <set_arm_clock+0x2a4>)
    5300:	42b8      	cmp	r0, r7
    5302:	bf8c      	ite	hi
    5304:	270e      	movhi	r7, #14
    5306:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    5308:	498d      	ldr	r1, [pc, #564]	; (5540 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    530a:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    530e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    5312:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    5314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    5318:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    531c:	d20c      	bcs.n	5338 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    531e:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    5322:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    5326:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    532a:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    532e:	680b      	ldr	r3, [r1, #0]
    5330:	2b00      	cmp	r3, #0
    5332:	dafc      	bge.n	532e <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    5334:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    5338:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    533c:	d124      	bne.n	5388 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    533e:	4986      	ldr	r1, [pc, #536]	; (5558 <set_arm_clock+0x2a8>)
    5340:	690c      	ldr	r4, [r1, #16]
    5342:	4986      	ldr	r1, [pc, #536]	; (555c <set_arm_clock+0x2ac>)
    5344:	43a1      	bics	r1, r4
    5346:	f000 80ea 	beq.w	551e <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    534a:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    534e:	4634      	mov	r4, r6
    5350:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    5354:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    5358:	d004      	beq.n	5364 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    535a:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    535e:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    5360:	4b77      	ldr	r3, [pc, #476]	; (5540 <set_arm_clock+0x290>)
    5362:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    5364:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    5368:	d007      	beq.n	537a <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    536a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    536e:	4974      	ldr	r1, [pc, #464]	; (5540 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    5370:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    5372:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    5374:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    5376:	071a      	lsls	r2, r3, #28
    5378:	d4fc      	bmi.n	5374 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    537a:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    537e:	4a70      	ldr	r2, [pc, #448]	; (5540 <set_arm_clock+0x290>)
    5380:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    5382:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5384:	069b      	lsls	r3, r3, #26
    5386:	d4fc      	bmi.n	5382 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    5388:	4c75      	ldr	r4, [pc, #468]	; (5560 <set_arm_clock+0x2b0>)
    538a:	42a0      	cmp	r0, r4
    538c:	f200 80ce 	bhi.w	552c <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    5390:	f04f 0c01 	mov.w	ip, #1
    5394:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    5396:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    5398:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    539c:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    53a0:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    53a4:	42a2      	cmp	r2, r4
    53a6:	d818      	bhi.n	53da <set_arm_clock+0x12a>
		if (div_arm < 8) {
    53a8:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    53ac:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    53b0:	f040 808d 	bne.w	54ce <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    53b4:	f1bc 0f04 	cmp.w	ip, #4
    53b8:	f200 8091 	bhi.w	54de <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    53bc:	180a      	adds	r2, r1, r0
    53be:	42a2      	cmp	r2, r4
    53c0:	f200 80a4 	bhi.w	550c <set_arm_clock+0x25c>
    53c4:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    53c8:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    53ca:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    53ce:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    53d2:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    53d6:	42a2      	cmp	r2, r4
    53d8:	d9e6      	bls.n	53a8 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    53da:	f10c 31ff 	add.w	r1, ip, #4294967295
    53de:	028c      	lsls	r4, r1, #10
    53e0:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    53e4:	485f      	ldr	r0, [pc, #380]	; (5564 <set_arm_clock+0x2b4>)
    53e6:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    53e8:	4a5f      	ldr	r2, [pc, #380]	; (5568 <set_arm_clock+0x2b8>)
    53ea:	4290      	cmp	r0, r2
    53ec:	d97f      	bls.n	54ee <set_arm_clock+0x23e>
    53ee:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 5594 <set_arm_clock+0x2e4>
    53f2:	226c      	movs	r2, #108	; 0x6c
    53f4:	485d      	ldr	r0, [pc, #372]	; (556c <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    53f6:	4d58      	ldr	r5, [pc, #352]	; (5558 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    53f8:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    53fc:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    5400:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    5404:	f8df c190 	ldr.w	ip, [pc, #400]	; 5598 <set_arm_clock+0x2e8>
    5408:	ea0e 0c0c 	and.w	ip, lr, ip
    540c:	45d4      	cmp	ip, sl
    540e:	d009      	beq.n	5424 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    5410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    5414:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    5418:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    541c:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    541e:	682a      	ldr	r2, [r5, #0]
    5420:	2a00      	cmp	r2, #0
    5422:	dafc      	bge.n	541e <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    5424:	4a46      	ldr	r2, [pc, #280]	; (5540 <set_arm_clock+0x290>)
    5426:	6915      	ldr	r5, [r2, #16]
    5428:	f005 0507 	and.w	r5, r5, #7
    542c:	429d      	cmp	r5, r3
    542e:	d003      	beq.n	5438 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    5430:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    5432:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5434:	03dd      	lsls	r5, r3, #15
    5436:	d4fc      	bmi.n	5432 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    5438:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    543c:	d009      	beq.n	5452 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    543e:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    5442:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    5446:	4a3e      	ldr	r2, [pc, #248]	; (5540 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    5448:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    544a:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    544c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    544e:	0799      	lsls	r1, r3, #30
    5450:	d4fc      	bmi.n	544c <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    5452:	4947      	ldr	r1, [pc, #284]	; (5570 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    5454:	4a47      	ldr	r2, [pc, #284]	; (5574 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    5456:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    5458:	4291      	cmp	r1, r2
    545a:	d83c      	bhi.n	54d6 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    545c:	4b46      	ldr	r3, [pc, #280]	; (5578 <set_arm_clock+0x2c8>)
    545e:	09c9      	lsrs	r1, r1, #7
    5460:	fba3 3101 	umull	r3, r1, r3, r1
    5464:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    5466:	1e4b      	subs	r3, r1, #1
    5468:	021b      	lsls	r3, r3, #8
    546a:	ea86 0203 	eor.w	r2, r6, r3
    546e:	f412 7f40 	tst.w	r2, #768	; 0x300
    5472:	d006      	beq.n	5482 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    5474:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    5478:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    547c:	4a30      	ldr	r2, [pc, #192]	; (5540 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    547e:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    5480:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    5482:	4a2f      	ldr	r2, [pc, #188]	; (5540 <set_arm_clock+0x290>)
    5484:	6953      	ldr	r3, [r2, #20]
    5486:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    548a:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    548c:	6c93      	ldr	r3, [r2, #72]	; 0x48
    548e:	069b      	lsls	r3, r3, #26
    5490:	d4fc      	bmi.n	548c <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5492:	4b3a      	ldr	r3, [pc, #232]	; (557c <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    5494:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    5496:	fba3 2300 	umull	r2, r3, r3, r0
    549a:	f04f 32ff 	mov.w	r2, #4294967295
    549e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    54a2:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    54a6:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    54aa:	4a35      	ldr	r2, [pc, #212]	; (5580 <set_arm_clock+0x2d0>)
    54ac:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    54ae:	4a35      	ldr	r2, [pc, #212]	; (5584 <set_arm_clock+0x2d4>)
    54b0:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    54b2:	4a35      	ldr	r2, [pc, #212]	; (5588 <set_arm_clock+0x2d8>)
    54b4:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    54b6:	d208      	bcs.n	54ca <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    54b8:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    54bc:	4a21      	ldr	r2, [pc, #132]	; (5544 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    54be:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    54c2:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    54c4:	6813      	ldr	r3, [r2, #0]
    54c6:	2b00      	cmp	r3, #0
    54c8:	dafc      	bge.n	54c4 <set_arm_clock+0x214>
	}

	return frequency;
}
    54ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54ce:	4673      	mov	r3, lr
    54d0:	e762      	b.n	5398 <set_arm_clock+0xe8>
    54d2:	2712      	movs	r7, #18
    54d4:	e718      	b.n	5308 <set_arm_clock+0x58>
    54d6:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    54da:	2104      	movs	r1, #4
    54dc:	e7c5      	b.n	546a <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    54de:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    54e2:	4820      	ldr	r0, [pc, #128]	; (5564 <set_arm_clock+0x2b4>)
    54e4:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    54e6:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    54e8:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    54ea:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    54ee:	4a27      	ldr	r2, [pc, #156]	; (558c <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    54f0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 559c <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    54f4:	fba2 2000 	umull	r2, r0, r2, r0
    54f8:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    54fa:	4825      	ldr	r0, [pc, #148]	; (5590 <set_arm_clock+0x2e0>)
    54fc:	2a36      	cmp	r2, #54	; 0x36
    54fe:	bf38      	it	cc
    5500:	2236      	movcc	r2, #54	; 0x36
    5502:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    5506:	ea42 0a0a 	orr.w	sl, r2, sl
    550a:	e774      	b.n	53f6 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    550c:	ea4f 248c 	mov.w	r4, ip, lsl #10
    5510:	2300      	movs	r3, #0
    5512:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    5516:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    551a:	46ac      	mov	ip, r5
    551c:	e762      	b.n	53e4 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    551e:	461d      	mov	r5, r3
    5520:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    5524:	4611      	mov	r1, r2
    5526:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    552a:	e713      	b.n	5354 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    552c:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    552e:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    5532:	4602      	mov	r2, r0
    5534:	4631      	mov	r1, r6
    5536:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    5538:	46e6      	mov	lr, ip
    553a:	e753      	b.n	53e4 <set_arm_clock+0x134>
    553c:	1f78a400 	.word	0x1f78a400
    5540:	400fc000 	.word	0x400fc000
    5544:	40080000 	.word	0x40080000
    5548:	23c34600 	.word	0x23c34600
    554c:	004cb223 	.word	0x004cb223
    5550:	51eb851f 	.word	0x51eb851f
    5554:	016e3600 	.word	0x016e3600
    5558:	400d8000 	.word	0x400d8000
    555c:	80003040 	.word	0x80003040
    5560:	269fb1ff 	.word	0x269fb1ff
    5564:	005b8d80 	.word	0x005b8d80
    5568:	4df67eff 	.word	0x4df67eff
    556c:	4d3f6400 	.word	0x4d3f6400
    5570:	08f0d17f 	.word	0x08f0d17f
    5574:	2cb4177f 	.word	0x2cb4177f
    5578:	00e5109f 	.word	0x00e5109f
    557c:	431bde83 	.word	0x431bde83
    5580:	20000a54 	.word	0x20000a54
    5584:	20000a50 	.word	0x20000a50
    5588:	2000602c 	.word	0x2000602c
    558c:	165e9f81 	.word	0x165e9f81
    5590:	00b71b00 	.word	0x00b71b00
    5594:	8000206c 	.word	0x8000206c
    5598:	8001307f 	.word	0x8001307f
    559c:	80002000 	.word	0x80002000

000055a0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    55a0:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    55a2:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    55a4:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    55a8:	4619      	mov	r1, r3
{
    55aa:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    55ac:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    55b0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    55b4:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    55b8:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    55bc:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    55c0:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    55c2:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    55c6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    55ca:	b29b      	uxth	r3, r3
    55cc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    55d0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    55d4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    55d8:	3101      	adds	r1, #1
    55da:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    55de:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    55e0:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    55e2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    55e6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    55e8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    55ea:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    55ec:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    55ee:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    55f2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    55f4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    55f6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    55f8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    55fa:	d1eb      	bne.n	55d4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    55fc:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    5600:	b29b      	uxth	r3, r3
    5602:	f043 030f 	orr.w	r3, r3, #15
    5606:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    560a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    560e:	b29b      	uxth	r3, r3
    5610:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    5614:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    5618:	bd10      	pop	{r4, pc}
    561a:	bf00      	nop

0000561c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    561c:	4b37      	ldr	r3, [pc, #220]	; (56fc <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    561e:	4a38      	ldr	r2, [pc, #224]	; (5700 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    5620:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    5622:	4838      	ldr	r0, [pc, #224]	; (5704 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    5624:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    5628:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    562a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    562c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    5630:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5634:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5638:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    563c:	430a      	orrs	r2, r1
    563e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    5642:	f7ff ffad 	bl	55a0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    5646:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    564a:	f7ff ffa9 	bl	55a0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    564e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    5652:	f7ff ffa5 	bl	55a0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    5656:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    565a:	f7ff ffa1 	bl	55a0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    565e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    5660:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5664:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    5668:	4611      	mov	r1, r2
    566a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    566e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    5672:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    5674:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    5676:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    5678:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    567a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    567e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    5680:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    5682:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    5686:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    5688:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    568a:	d1ee      	bne.n	566a <pwm_init+0x4e>
    568c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    568e:	481e      	ldr	r0, [pc, #120]	; (5708 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    5690:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    5694:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    5698:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    569a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    569e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    56a2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    56a6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    56aa:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    56ac:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    56ae:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    56b0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    56b2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    56b6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    56b8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    56ba:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    56be:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    56c0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    56c2:	d1ee      	bne.n	56a2 <pwm_init+0x86>
    56c4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    56c6:	4811      	ldr	r0, [pc, #68]	; (570c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    56c8:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    56ca:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    56ce:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    56d0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    56d4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    56d8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    56dc:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    56e0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    56e2:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    56e4:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    56e6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    56e8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    56ea:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    56ec:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    56ee:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    56f2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    56f4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    56f8:	d1ee      	bne.n	56d8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    56fa:	bd70      	pop	{r4, r5, r6, pc}
    56fc:	400fc000 	.word	0x400fc000
    5700:	fc030000 	.word	0xfc030000
    5704:	403dc000 	.word	0x403dc000
    5708:	401e0000 	.word	0x401e0000
    570c:	401e4000 	.word	0x401e4000

00005710 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    5710:	4a07      	ldr	r2, [pc, #28]	; (5730 <rtc_get+0x20>)
    5712:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    5714:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    5716:	4619      	mov	r1, r3
    5718:	4684      	mov	ip, r0
    571a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    571c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    571e:	4299      	cmp	r1, r3
    5720:	d1f9      	bne.n	5716 <rtc_get+0x6>
    5722:	4584      	cmp	ip, r0
    5724:	d1f7      	bne.n	5716 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    5726:	0bdb      	lsrs	r3, r3, #15
}
    5728:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    572c:	4770      	bx	lr
    572e:	bf00      	nop
    5730:	400d4000 	.word	0x400d4000

00005734 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    5734:	4770      	bx	lr
    5736:	bf00      	nop

00005738 <sm_align_pool>:
{
    5738:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    573a:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    573e:	b15b      	cbz	r3, 5758 <sm_align_pool+0x20>
    5740:	b1ba      	cbz	r2, 5772 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    5742:	4b0f      	ldr	r3, [pc, #60]	; (5780 <sm_align_pool+0x48>)
    5744:	fba3 1302 	umull	r1, r3, r3, r2
    5748:	08db      	lsrs	r3, r3, #3
    574a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    574e:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5752:	d10a      	bne.n	576a <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    5754:	2001      	movs	r0, #1
}
    5756:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    5758:	4b09      	ldr	r3, [pc, #36]	; (5780 <sm_align_pool+0x48>)
    575a:	fba3 1302 	umull	r1, r3, r3, r2
    575e:	08db      	lsrs	r3, r3, #3
    5760:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    5764:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    5768:	d001      	beq.n	576e <sm_align_pool+0x36>
    576a:	1ad2      	subs	r2, r2, r3
    576c:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    576e:	2af0      	cmp	r2, #240	; 0xf0
    5770:	d8f0      	bhi.n	5754 <sm_align_pool+0x1c>
		errno = ENOSPC;
    5772:	f000 f917 	bl	59a4 <__errno>
    5776:	221c      	movs	r2, #28
    5778:	4603      	mov	r3, r0
    577a:	2000      	movs	r0, #0
    577c:	601a      	str	r2, [r3, #0]
}
    577e:	bd08      	pop	{r3, pc}
    5780:	aaaaaaab 	.word	0xaaaaaaab

00005784 <sm_set_pool>:
{
    5784:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    5786:	4604      	mov	r4, r0
    5788:	b338      	cbz	r0, 57da <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    578a:	b119      	cbz	r1, 5794 <sm_set_pool+0x10>
    578c:	fab2 f682 	clz	r6, r2
    5790:	0976      	lsrs	r6, r6, #5
    5792:	b9a2      	cbnz	r2, 57be <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    5794:	6820      	ldr	r0, [r4, #0]
    5796:	b300      	cbz	r0, 57da <sm_set_pool+0x56>
    5798:	6862      	ldr	r2, [r4, #4]
    579a:	b1f2      	cbz	r2, 57da <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    579c:	4b18      	ldr	r3, [pc, #96]	; (5800 <sm_set_pool+0x7c>)
    579e:	4919      	ldr	r1, [pc, #100]	; (5804 <sm_set_pool+0x80>)
    57a0:	fb02 f303 	mul.w	r3, r2, r3
    57a4:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    57a8:	d317      	bcc.n	57da <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    57aa:	68a3      	ldr	r3, [r4, #8]
    57ac:	b9e3      	cbnz	r3, 57e8 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    57ae:	2200      	movs	r2, #0
			return 1;
    57b0:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    57b2:	6022      	str	r2, [r4, #0]
    57b4:	6062      	str	r2, [r4, #4]
    57b6:	60a2      	str	r2, [r4, #8]
    57b8:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    57ba:	4618      	mov	r0, r3
    57bc:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    57be:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    57c0:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    57c2:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    57c6:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    57c8:	f7ff ffb6 	bl	5738 <sm_align_pool>
    57cc:	4603      	mov	r3, r0
    57ce:	2800      	cmp	r0, #0
    57d0:	d0f3      	beq.n	57ba <sm_set_pool+0x36>
	if (do_zero) {
    57d2:	b96d      	cbnz	r5, 57f0 <sm_set_pool+0x6c>
	return 1;
    57d4:	2301      	movs	r3, #1
}
    57d6:	4618      	mov	r0, r3
    57d8:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    57da:	f000 f8e3 	bl	59a4 <__errno>
    57de:	2216      	movs	r2, #22
		return 0;
    57e0:	2300      	movs	r3, #0
		errno = EINVAL;
    57e2:	6002      	str	r2, [r0, #0]
}
    57e4:	4618      	mov	r0, r3
    57e6:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    57e8:	2100      	movs	r1, #0
    57ea:	f000 f889 	bl	5900 <memset>
    57ee:	e7de      	b.n	57ae <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    57f0:	6862      	ldr	r2, [r4, #4]
    57f2:	4631      	mov	r1, r6
    57f4:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    57f6:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    57f8:	f000 f882 	bl	5900 <memset>
	return 1;
    57fc:	2301      	movs	r3, #1
    57fe:	e7dc      	b.n	57ba <sm_set_pool+0x36>
    5800:	aaaaaaab 	.word	0xaaaaaaab
    5804:	15555555 	.word	0x15555555

00005808 <memmove>:
    5808:	4288      	cmp	r0, r1
    580a:	d90d      	bls.n	5828 <memmove+0x20>
    580c:	188b      	adds	r3, r1, r2
    580e:	4283      	cmp	r3, r0
    5810:	d90a      	bls.n	5828 <memmove+0x20>
    5812:	eb00 0c02 	add.w	ip, r0, r2
    5816:	b1ba      	cbz	r2, 5848 <memmove+0x40>
    5818:	4662      	mov	r2, ip
    581a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    581e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    5822:	4299      	cmp	r1, r3
    5824:	d1f9      	bne.n	581a <memmove+0x12>
    5826:	4770      	bx	lr
    5828:	2a0f      	cmp	r2, #15
    582a:	d80e      	bhi.n	584a <memmove+0x42>
    582c:	4603      	mov	r3, r0
    582e:	f102 3cff 	add.w	ip, r2, #4294967295
    5832:	b14a      	cbz	r2, 5848 <memmove+0x40>
    5834:	f10c 0c01 	add.w	ip, ip, #1
    5838:	3b01      	subs	r3, #1
    583a:	448c      	add	ip, r1
    583c:	f811 2b01 	ldrb.w	r2, [r1], #1
    5840:	f803 2f01 	strb.w	r2, [r3, #1]!
    5844:	4561      	cmp	r1, ip
    5846:	d1f9      	bne.n	583c <memmove+0x34>
    5848:	4770      	bx	lr
    584a:	ea40 0301 	orr.w	r3, r0, r1
    584e:	079b      	lsls	r3, r3, #30
    5850:	d150      	bne.n	58f4 <memmove+0xec>
    5852:	f1a2 0310 	sub.w	r3, r2, #16
    5856:	b570      	push	{r4, r5, r6, lr}
    5858:	f101 0c20 	add.w	ip, r1, #32
    585c:	f023 050f 	bic.w	r5, r3, #15
    5860:	f101 0e10 	add.w	lr, r1, #16
    5864:	f100 0410 	add.w	r4, r0, #16
    5868:	44ac      	add	ip, r5
    586a:	091b      	lsrs	r3, r3, #4
    586c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    5870:	f844 5c10 	str.w	r5, [r4, #-16]
    5874:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    5878:	f844 5c0c 	str.w	r5, [r4, #-12]
    587c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    5880:	f844 5c08 	str.w	r5, [r4, #-8]
    5884:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    5888:	f844 5c04 	str.w	r5, [r4, #-4]
    588c:	f10e 0e10 	add.w	lr, lr, #16
    5890:	45e6      	cmp	lr, ip
    5892:	f104 0410 	add.w	r4, r4, #16
    5896:	d1e9      	bne.n	586c <memmove+0x64>
    5898:	3301      	adds	r3, #1
    589a:	f012 0f0c 	tst.w	r2, #12
    589e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    58a2:	f002 040f 	and.w	r4, r2, #15
    58a6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    58aa:	d027      	beq.n	58fc <memmove+0xf4>
    58ac:	3c04      	subs	r4, #4
    58ae:	f024 0603 	bic.w	r6, r4, #3
    58b2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    58b6:	441e      	add	r6, r3
    58b8:	1f1c      	subs	r4, r3, #4
    58ba:	468e      	mov	lr, r1
    58bc:	f85e 5b04 	ldr.w	r5, [lr], #4
    58c0:	f844 5f04 	str.w	r5, [r4, #4]!
    58c4:	42b4      	cmp	r4, r6
    58c6:	d1f9      	bne.n	58bc <memmove+0xb4>
    58c8:	f10c 0401 	add.w	r4, ip, #1
    58cc:	f002 0203 	and.w	r2, r2, #3
    58d0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    58d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    58d8:	f102 3cff 	add.w	ip, r2, #4294967295
    58dc:	b14a      	cbz	r2, 58f2 <memmove+0xea>
    58de:	f10c 0c01 	add.w	ip, ip, #1
    58e2:	3b01      	subs	r3, #1
    58e4:	448c      	add	ip, r1
    58e6:	f811 2b01 	ldrb.w	r2, [r1], #1
    58ea:	f803 2f01 	strb.w	r2, [r3, #1]!
    58ee:	4561      	cmp	r1, ip
    58f0:	d1f9      	bne.n	58e6 <memmove+0xde>
    58f2:	bd70      	pop	{r4, r5, r6, pc}
    58f4:	f102 3cff 	add.w	ip, r2, #4294967295
    58f8:	4603      	mov	r3, r0
    58fa:	e79b      	b.n	5834 <memmove+0x2c>
    58fc:	4622      	mov	r2, r4
    58fe:	e7eb      	b.n	58d8 <memmove+0xd0>

00005900 <memset>:
    5900:	0783      	lsls	r3, r0, #30
    5902:	b530      	push	{r4, r5, lr}
    5904:	d048      	beq.n	5998 <memset+0x98>
    5906:	1e54      	subs	r4, r2, #1
    5908:	2a00      	cmp	r2, #0
    590a:	d03f      	beq.n	598c <memset+0x8c>
    590c:	b2ca      	uxtb	r2, r1
    590e:	4603      	mov	r3, r0
    5910:	e001      	b.n	5916 <memset+0x16>
    5912:	3c01      	subs	r4, #1
    5914:	d33a      	bcc.n	598c <memset+0x8c>
    5916:	f803 2b01 	strb.w	r2, [r3], #1
    591a:	079d      	lsls	r5, r3, #30
    591c:	d1f9      	bne.n	5912 <memset+0x12>
    591e:	2c03      	cmp	r4, #3
    5920:	d92d      	bls.n	597e <memset+0x7e>
    5922:	b2cd      	uxtb	r5, r1
    5924:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5928:	2c0f      	cmp	r4, #15
    592a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    592e:	d936      	bls.n	599e <memset+0x9e>
    5930:	f1a4 0210 	sub.w	r2, r4, #16
    5934:	f022 0c0f 	bic.w	ip, r2, #15
    5938:	f103 0e20 	add.w	lr, r3, #32
    593c:	44e6      	add	lr, ip
    593e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    5942:	f103 0210 	add.w	r2, r3, #16
    5946:	e942 5504 	strd	r5, r5, [r2, #-16]
    594a:	e942 5502 	strd	r5, r5, [r2, #-8]
    594e:	3210      	adds	r2, #16
    5950:	4572      	cmp	r2, lr
    5952:	d1f8      	bne.n	5946 <memset+0x46>
    5954:	f10c 0201 	add.w	r2, ip, #1
    5958:	f014 0f0c 	tst.w	r4, #12
    595c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    5960:	f004 0c0f 	and.w	ip, r4, #15
    5964:	d013      	beq.n	598e <memset+0x8e>
    5966:	f1ac 0304 	sub.w	r3, ip, #4
    596a:	f023 0303 	bic.w	r3, r3, #3
    596e:	3304      	adds	r3, #4
    5970:	4413      	add	r3, r2
    5972:	f842 5b04 	str.w	r5, [r2], #4
    5976:	4293      	cmp	r3, r2
    5978:	d1fb      	bne.n	5972 <memset+0x72>
    597a:	f00c 0403 	and.w	r4, ip, #3
    597e:	b12c      	cbz	r4, 598c <memset+0x8c>
    5980:	b2c9      	uxtb	r1, r1
    5982:	441c      	add	r4, r3
    5984:	f803 1b01 	strb.w	r1, [r3], #1
    5988:	429c      	cmp	r4, r3
    598a:	d1fb      	bne.n	5984 <memset+0x84>
    598c:	bd30      	pop	{r4, r5, pc}
    598e:	4664      	mov	r4, ip
    5990:	4613      	mov	r3, r2
    5992:	2c00      	cmp	r4, #0
    5994:	d1f4      	bne.n	5980 <memset+0x80>
    5996:	e7f9      	b.n	598c <memset+0x8c>
    5998:	4603      	mov	r3, r0
    599a:	4614      	mov	r4, r2
    599c:	e7bf      	b.n	591e <memset+0x1e>
    599e:	461a      	mov	r2, r3
    59a0:	46a4      	mov	ip, r4
    59a2:	e7e0      	b.n	5966 <memset+0x66>

000059a4 <__errno>:
    59a4:	4b01      	ldr	r3, [pc, #4]	; (59ac <__errno+0x8>)
    59a6:	6818      	ldr	r0, [r3, #0]
    59a8:	4770      	bx	lr
    59aa:	bf00      	nop
    59ac:	20000a68 	.word	0x20000a68

000059b0 <__libc_init_array>:
    59b0:	b570      	push	{r4, r5, r6, lr}
    59b2:	4e0d      	ldr	r6, [pc, #52]	; (59e8 <__libc_init_array+0x38>)
    59b4:	4d0d      	ldr	r5, [pc, #52]	; (59ec <__libc_init_array+0x3c>)
    59b6:	1b76      	subs	r6, r6, r5
    59b8:	10b6      	asrs	r6, r6, #2
    59ba:	d006      	beq.n	59ca <__libc_init_array+0x1a>
    59bc:	2400      	movs	r4, #0
    59be:	f855 3b04 	ldr.w	r3, [r5], #4
    59c2:	3401      	adds	r4, #1
    59c4:	4798      	blx	r3
    59c6:	42a6      	cmp	r6, r4
    59c8:	d1f9      	bne.n	59be <__libc_init_array+0xe>
    59ca:	4e09      	ldr	r6, [pc, #36]	; (59f0 <__libc_init_array+0x40>)
    59cc:	4d09      	ldr	r5, [pc, #36]	; (59f4 <__libc_init_array+0x44>)
    59ce:	1b76      	subs	r6, r6, r5
    59d0:	f000 f816 	bl	5a00 <___init_veneer>
    59d4:	10b6      	asrs	r6, r6, #2
    59d6:	d006      	beq.n	59e6 <__libc_init_array+0x36>
    59d8:	2400      	movs	r4, #0
    59da:	f855 3b04 	ldr.w	r3, [r5], #4
    59de:	3401      	adds	r4, #1
    59e0:	4798      	blx	r3
    59e2:	42a6      	cmp	r6, r4
    59e4:	d1f9      	bne.n	59da <__libc_init_array+0x2a>
    59e6:	bd70      	pop	{r4, r5, r6, pc}
    59e8:	60001e48 	.word	0x60001e48
    59ec:	60001e48 	.word	0x60001e48
    59f0:	60001e50 	.word	0x60001e50
    59f4:	60001e48 	.word	0x60001e48

000059f8 <___reboot_Teensyduino__veneer>:
    59f8:	f85f f000 	ldr.w	pc, [pc]	; 59fc <___reboot_Teensyduino__veneer+0x4>
    59fc:	60001d55 	.word	0x60001d55

00005a00 <___init_veneer>:
    5a00:	f85f f000 	ldr.w	pc, [pc]	; 5a04 <___init_veneer+0x4>
    5a04:	60001dfd 	.word	0x60001dfd
	...

Disassembly of section .fini:

00005a10 <_fini>:
    5a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a12:	bf00      	nop
